#ifndef __SHADOW_FUNCTIONS__
#define __SHADOW_FUNCTIONS__

#include "reimplemented/Threads/Threading.h"


// ------------ MainElf -----------

void InitialUndefinedData(RecompContext* ctx);
void Function_0x10(RecompContext* ctx);
void _Exit1(RecompContext* ctx);
undefined ResolveRelocation(RecompContext* ctx);
undefined DecodeSection(RecompContext* ctx);
undefined RelocateElfInfoHeader(RecompContext* ctx);
undefined OutputLinkerScriptFile(RecompContext* ctx);
void Function_0xA58(RecompContext* ctx);
void LoaderSysJumpRecoverPointNoStateSetting(RecompContext* ctx);
void LoaderSysJumpRecoverPoint(RecompContext* ctx);
undefined LoadModule(RecompContext* ctx, char* moduleName);
undefined MoveElf(RecompContext* ctx);
void GetProgramNameAndOffset(RecompContext* ctx, char* path);
undefined LoaderSysRelocateOnlineElfInfo(RecompContext* ctx);
undefined RelocateCode(RecompContext* ctx);
void FreeDecodedSection(RecompContext* ctx);
undefined RelocateSelfSymbol(RecompContext* ctx);
undefined DisposeRelocationElement(RecompContext* ctx);
undefined SetHeapStartPoint(RecompContext* ctx);
void GetHeapCurrentPoint(RecompContext* ctx);
undefined LoaderSysResetSystem(RecompContext* ctx);
void Function_0x1AA0(RecompContext* ctx);
void _checkExistString(RecompContext* ctx);
void Function_0x1B88(RecompContext* ctx);
void _execProgWithThread(RecompContext* ctx, char* moduleName);
void execProgWithThread(RecompContext* ctx, char* path, int threadID);
void Function_0x1EBC(RecompContext* ctx);
undefined InitException(RecompContext* ctx);
void setCop0Epc(RecompContext* ctx);
void ExceptionCallback1(RecompContext* ctx);
undefined DefaultDebugHandler(RecompContext* ctx);
undefined LoaderSysDeleteAllExternalIntcHandler(RecompContext* ctx);
undefined LoaderSysDeleteAllExternalSema(RecompContext* ctx);
undefined LoaderSysExecuteRecoveryFirstProcess(RecompContext* ctx);
undefined LoaderSysEntryExternalIntcHandlerList(RecompContext* ctx);
void LoaderSysEntryExternalThreadList(RecompContext* ctx);
undefined LoaderSysEntryExternalSemaList(RecompContext* ctx);
undefined LoaderSysEntryExternalIopMemoryList(RecompContext* ctx);
void LoaderSysDeleteExternalIntcHandlerList(RecompContext* ctx);
void LoaderSysDeleteExternalThreadList(RecompContext* ctx);
void LoaderSysDeleteExternalSemaList(RecompContext* ctx);
void LoaderSysDeleteExternalIopMemoryList(RecompContext* ctx);
void LoaderSysInitExternalIntcHandlerList(RecompContext* ctx);
void LoaderSysInitExternalSemaList(RecompContext* ctx);
void LoaderSysInitExternalThreadList(RecompContext* ctx);
void LoaderSysExternalThreadListCallBack(RecompContext* ctx);
void LoaderSysChangeExteranalThreadPriorityExceptMe(RecompContext* ctx);
void LoaderSysDeleteAllExternalThread(RecompContext* ctx);
undefined LoaderSysDeleteAllExternalThreadExceptMe(RecompContext* ctx);
undefined LoaderSysInitExternalIopMemoryList(RecompContext* ctx);
undefined LoaderSysDeleteAllExternalIopMemory(RecompContext* ctx);
void LoaderSysPrintf(char* text);
undefined LoaderSysLoadIopModuleFromEEBuffer(RecompContext* ctx);
undefined LoaderSysCheckCDBootMode(RecompContext* ctx);
undefined LoaderSysPutString(char* text);
void* LoaderSysFOpen(char* path, uint param_2, uint param_3);
void LoaderSysFClose(void* fileHandle);
int LoaderSysFSeek(RecompContext* ctx);
undefined LoaderSysFSeek64(RecompContext* ctx);
int LoaderSysFRead(void* filePointer, void* output, int length);
undefined LoaderSysFWrite(RecompContext* ctx);
void LoaderSysRemove(RecompContext* ctx);
void LoaderSysRmdir(RecompContext* ctx);
void LoaderSysMkdir(RecompContext* ctx);
int LoaderSysGetstat(char* name, void* buffer);
void LoaderSysChstat(RecompContext* ctx);
undefined LoaderSysGetMemoryInfo(RecompContext* ctx);
undefined LoaderSysDumpIopModuleIdentifiers(RecompContext* ctx);
undefined LoaderSysSendAbort(RecompContext* ctx);
undefined LoaderSysFlushPrint(RecompContext* ctx);
undefined checkHookDesc(RecompContext* ctx);
void setNewIopIdentifier(RecompContext* ctx);
void WarmUpCdDrive(RecompContext* ctx);
undefined loaderLoop(RecompContext* ctx);
undefined LoaderSysGetBootArg(RecompContext* ctx);
undefined LoaderSysLoadIopModule(RecompContext* ctx);
undefined LoaderSysUnloadIopModuleByName(RecompContext* ctx);
undefined LoaderSysHookPoint(RecompContext* ctx);
undefined LoaderSysRebootIop(RecompContext* ctx);
undefined loaderExecResetCallback(RecompContext* ctx);
undefined loaderSetResetCallback(RecompContext* ctx);
void memprintf(RecompContext* ctx);
undefined imemprintf(RecompContext* ctx);
undefined initmemprintf(RecompContext* ctx);
void Function_0x4090(RecompContext* ctx);
void Function_0x4428(RecompContext* ctx);
void Function_0x4668(RecompContext* ctx);
void Function_0x4818(RecompContext* ctx);
undefined LoaderSysInitTCP(RecompContext* ctx);
undefined padSysTickProc(RecompContext* ctx);
undefined padsysInit(RecompContext* ctx);
undefined padSysGet(RecompContext* ctx);
undefined padSysReadForLoader(RecompContext* ctx);
undefined padSysVibSetAcrParam(RecompContext* ctx);
void LoaderSysSetPowerOffCallBackFunc(RecompContext* ctx);
undefined PreparePowerOff(RecompContext* ctx);
void Function_0x4FEC(RecompContext* ctx);
undefined usbSerialSysPutString(RecompContext* ctx);
undefined usbSerialSysPrintf(RecompContext* ctx);
undefined usbSerialSysInit(RecompContext* ctx);
void Function_0x53F0(RecompContext* ctx);
void Function_0x53F4(RecompContext* ctx);
undefined PutFont(RecompContext* ctx);
undefined _putString(RecompContext* ctx);
void PutString(RecompContext* ctx);
void PutStringS(long something, char* format);
void Function_0x59D4(RecompContext* ctx);
undefined Sync(RecompContext* ctx);
undefined ReinitDisp(RecompContext* ctx);
undefined LoaderSysDrawSprite(RecompContext* ctx);
undefined ExecBaseProc(RecompContext* ctx);
void SetLocate(RecompContext* ctx);
undefined ScrollDisplay(RecompContext* ctx);
undefined ClearDisplay(RecompContext* ctx);
undefined InitDisp(RecompContext* ctx);
void RestoreNormalDrawEnvironment(RecompContext* ctx);
void SetTextureWithFrameBuffer(RecompContext* ctx);
void SetTexDrawEnvironment(RecompContext* ctx);
void SetDrawnTextureEnvironment(RecompContext* ctx);
void SetDrawEnvironment(RecompContext* ctx);
void SetPrimColor(RecompContext* ctx);
void SetPrimColorTex(RecompContext* ctx);
void PutChar(RecompContext* ctx);
undefined RFU000_FullReset(RecompContext* ctx);
undefined ResetEE(RecompContext* ctx);
undefined SetGsCrt(RecompContext* ctx);
undefined RFU003(RecompContext* ctx);
void _Exit(RecompContext* ctx);
undefined RFU005(RecompContext* ctx);
undefined _LoadExecPS2(RecompContext* ctx);
undefined _ExecPS2(RecompContext* ctx);
undefined RFU008(RecompContext* ctx);
undefined RFU009(RecompContext* ctx);
undefined AddSbusIntcHandler(RecompContext* ctx);
undefined RemoveSbusIntcHandler(RecompContext* ctx);
undefined Interrupt2Iop(RecompContext* ctx);
void SetVTLBRefillHandler(RecompContext* ctx);
void SetVCommonHandler(RecompContext* ctx);
undefined SetVInterruptHandler(RecompContext* ctx);
undefined AddIntcHandler(RecompContext* ctx);
undefined AddIntcHandler2(RecompContext* ctx);
undefined RemoveIntcHandler(RecompContext* ctx);
undefined AddDmacHandler(RecompContext* ctx);
void AddDmacHandler2(RecompContext* ctx);
undefined RemoveDmacHandler(RecompContext* ctx);
undefined _EnableIntc(RecompContext* ctx);
undefined _DisableIntc(RecompContext* ctx);
undefined _EnableDmac(RecompContext* ctx);
undefined _DisableDmac(RecompContext* ctx);
void SetAlarm(RecompContext* ctx);
void ReleaseAlarm(RecompContext* ctx);
undefined _iEnableIntc(RecompContext* ctx);
undefined _iDisableIntc(RecompContext* ctx);
undefined _iEnableDmac(RecompContext* ctx);
undefined _iDisableDmac(RecompContext* ctx);
void iSetAlarm(RecompContext* ctx);
void iReleaseAlarm(RecompContext* ctx);
void CreateThread(ThreadParam* parameters);
undefined DeleteThread(RecompContext* ctx);
undefined _StartThread(RecompContext* ctx);
undefined ExitThread(RecompContext* ctx);
undefined ExitDeleteThread(RecompContext* ctx);
undefined TerminateThread(RecompContext* ctx);
void iTerminateThread(RecompContext* ctx);
void DisableDispatchThread(RecompContext* ctx);
void EnableDispatchThread(RecompContext* ctx);
void ChangeThreadPriority(RecompContext* ctx);
undefined iChangeThreadPriority(RecompContext* ctx);
undefined RotateThreadReadyQueue(RecompContext* ctx);
void _iRotateThreadReadyQueue(RecompContext* ctx);
void ReleaseWaitThread(RecompContext* ctx);
void iReleaseWaitThread(RecompContext* ctx);
undefined GetThreadId(RecompContext* ctx);
undefined ReferThreadStatus(RecompContext* ctx);
void iReferThreadStatus(RecompContext* ctx);
undefined SleepThread(RecompContext* ctx);
undefined WakeupThread(RecompContext* ctx);
undefined _iWakeupThread(RecompContext* ctx);
undefined CancelWakeupThread(RecompContext* ctx);
void iCancelWakeupThread(RecompContext* ctx);
undefined SuspendThread(RecompContext* ctx);
undefined _iSuspendThread(RecompContext* ctx);
void ResumeThread(RecompContext* ctx);
void iResumeThread(RecompContext* ctx);
void JoinThread(RecompContext* ctx);
void RFU060(RecompContext* ctx);
void RFU061(RecompContext* ctx);
undefined EndOfHeap(RecompContext* ctx);
void RFU063(RecompContext* ctx);
undefined CreateSema(RecompContext* ctx);
undefined DeleteSema(RecompContext* ctx);
undefined SignalSema(RecompContext* ctx);
undefined iSignalSema(RecompContext* ctx);
undefined WaitSema(RecompContext* ctx);
undefined PollSema(RecompContext* ctx);
void iPollSema(RecompContext* ctx);
undefined ReferSemaStatus(RecompContext* ctx);
void iReferSemaStatus(RecompContext* ctx);
void RFU073(RecompContext* ctx);
undefined SetOsdConfigParam(RecompContext* ctx);
undefined GetOsdConfigParam(RecompContext* ctx);
void GetGsHParam(RecompContext* ctx);
void GetGsVParam(RecompContext* ctx);
void SetGsHParam(RecompContext* ctx);
void SetGsVParam(RecompContext* ctx);
void RFU080_CreateEventFlag(RecompContext* ctx);
void RFU081_DeleteEventFlag(RecompContext* ctx);
void RFU082_SetEventFlag(RecompContext* ctx);
void RFU083_iSetEventFlag(RecompContext* ctx);
void RFU084_ClearEventFlag(RecompContext* ctx);
void RFU085_iClearEventFlag(RecompContext* ctx);
void RFU086_WaitEvnetFlag(RecompContext* ctx);
void RFU087_PollEvnetFlag(RecompContext* ctx);
void RFU088_iPollEvnetFlag(RecompContext* ctx);
void RFU089_ReferEventFlagStatus(RecompContext* ctx);
void RFU090_iReferEventFlagStatus(RecompContext* ctx);
void EnableIntcHandler(RecompContext* ctx);
void iEnableIntcHandler(RecompContext* ctx);
void DisableIntcHandler(RecompContext* ctx);
void iDisableIntcHandler(RecompContext* ctx);
void EnableDmacHandler(RecompContext* ctx);
void iEnableDmacHandler(RecompContext* ctx);
void DisableDmacHandler(RecompContext* ctx);
void iDisableDmacHandler(RecompContext* ctx);
void KSeg0(RecompContext* ctx);
void EnableCache(RecompContext* ctx);
void DisableCache(RecompContext* ctx);
void GetCop0(RecompContext* ctx);
undefined FlushCache(RecompContext* ctx);
void CpuConfig(RecompContext* ctx);
undefined iGetCop0(RecompContext* ctx);
void iFlushCache(RecompContext* ctx);
void iCpuConfig(RecompContext* ctx);
undefined sceSifStopDma(RecompContext* ctx);
void SetCPUTimerHandler(RecompContext* ctx);
void SetCPUTimer(RecompContext* ctx);
void SetOsdConfigParam2(RecompContext* ctx);
void GetOsdConfigParam2(RecompContext* ctx);
undefined GsGetIMR(RecompContext* ctx);
undefined iGsGetIMR(RecompContext* ctx);
undefined GsPutIMR(RecompContext* ctx);
undefined iGsPutIMR(RecompContext* ctx);
void SetPgifHandler(RecompContext* ctx);
undefined SetVSyncFlag(RecompContext* ctx);
void RFU116(RecompContext* ctx);
void _print(RecompContext* ctx);
undefined sceSifDmaStat(RecompContext* ctx);
void isceSifDmaStat(RecompContext* ctx);
undefined sceSifSetDma(RecompContext* ctx);
undefined isceSifSetDma(RecompContext* ctx);
undefined sceSifSetDChain(RecompContext* ctx);
undefined isceSifSetDChain(RecompContext* ctx);
undefined sceSifSetReg(RecompContext* ctx);
undefined sceSifGetReg(RecompContext* ctx);
undefined _ExecOSD(RecompContext* ctx);
undefined Deci2Call(RecompContext* ctx);
void PSMode(RecompContext* ctx);
void MachineType(RecompContext* ctx);
undefined GetMemorySize(RecompContext* ctx);
undefined _InitTLB(RecompContext* ctx);
undefined QueryIntrContext(RecompContext* ctx);
undefined DisableIntc(RecompContext* ctx);
undefined EnableIntc(RecompContext* ctx);
undefined DisableDmac(RecompContext* ctx);
undefined EnableDmac(RecompContext* ctx);
undefined iEnableIntc(RecompContext* ctx);
undefined iDisableIntc(RecompContext* ctx);
void iEnableDmac(RecompContext* ctx);
void iDisableDmac(RecompContext* ctx);
void Function_0x7690(RecompContext* ctx);
undefined InitThread(RecompContext* ctx);
void iWakeupThread(RecompContext* ctx);
void iRotateThreadReadyQueue(RecompContext* ctx);
void iSuspendThread(RecompContext* ctx);
undefined DelayThread(RecompContext* ctx);
void StartThread(RecompContext* ctx);
void Function_0x7C48(RecompContext* ctx);
void sceVsnprintf(RecompContext* ctx);
void sceSnprintf(RecompContext* ctx);
void sceVprintf(RecompContext* ctx);
void scePrintf(RecompContext* ctx);
undefined kprintf(RecompContext* ctx);
undefined sceSifInitRpc(RecompContext* ctx);
undefined sceSifExitRpc(RecompContext* ctx);
undefined sceSifGetOtherData(RecompContext* ctx);
undefined sceSifBindRpc(RecompContext* ctx);
undefined sceSifCallRpc(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined4 param_9);
undefined sceSifCheckStatRpc(RecompContext* ctx);
undefined sceSifSetRpcQueue(RecompContext* ctx);
undefined sceSifRegisterRpc(RecompContext* ctx);
undefined sceSifRemoveRpc(RecompContext* ctx);
undefined sceSifRemoveRpcQueue(RecompContext* ctx);
undefined sceSifGetNextRequest(RecompContext* ctx);
undefined sceSifExecRequest(RecompContext* ctx);
void sceSifRpcLoop(RecompContext* ctx);
void scePowerOffHandler(RecompContext* ctx);
undefined sceFsInit(RecompContext* ctx);
undefined sceFsReset(RecompContext* ctx);
void sceFsSetIopBuf(RecompContext* ctx);
void sceFsSetIopPrio(RecompContext* ctx);
void sceOpen(RecompContext* ctx);
undefined sceClose(RecompContext* ctx);
undefined sceLseek(RecompContext* ctx);
void sceRead(RecompContext* ctx);
undefined sceWrite(RecompContext* ctx);
undefined sceIoctl(RecompContext* ctx);
undefined sceIoctl2(RecompContext* ctx);
undefined sceRemove(RecompContext* ctx);
void sceMkdir(RecompContext* ctx);
undefined sceRmdir(RecompContext* ctx);
void sceFormat(RecompContext* ctx);
void sceAddDrv(RecompContext* ctx);
void sceDelDrv(RecompContext* ctx);
void sceDopen(RecompContext* ctx);
void sceDclose(RecompContext* ctx);
void sceDread(RecompContext* ctx);
undefined sceGetstat(RecompContext* ctx);
void sceChstat(RecompContext* ctx);
void sceRename(RecompContext* ctx);
void sceChdir(RecompContext* ctx);
void sceSync(RecompContext* ctx);
void sceMount(RecompContext* ctx);
void sceUmount(RecompContext* ctx);
void sceLseek64(RecompContext* ctx);
undefined sceDevctl(RecompContext* ctx);
undefined sceSymlink(RecompContext* ctx);
undefined sceReadlink(RecompContext* ctx);
undefined sceSifInitIopHeap(RecompContext* ctx);
undefined sceSifAllocIopHeap(RecompContext* ctx);
undefined sceSifAllocSysMemory(RecompContext* ctx);
undefined sceSifFreeSysMemory(RecompContext* ctx);
undefined sceSifFreeIopHeap(RecompContext* ctx);
void sceSifLoadIopHeap(RecompContext* ctx);
void sceSifQueryMemSize(RecompContext* ctx);
void sceSifQueryMaxFreeMemSize(RecompContext* ctx);
undefined sceSifQueryTotalFreeMemSize(RecompContext* ctx);
undefined sceSifQueryBlockTopAddress(RecompContext* ctx);
void sceSifQueryBlockSize(RecompContext* ctx);
undefined sceSifLoadFileReset(RecompContext* ctx);
undefined sceSifStopModule(RecompContext* ctx);
undefined sceSifUnloadModule(RecompContext* ctx);
undefined sceSifSearchModuleByName(RecompContext* ctx);
undefined sceSifSearchModuleByAddress(RecompContext* ctx);
undefined sceSifLoadModuleBuffer(RecompContext* ctx);
void sceSifLoadStartModuleBuffer(RecompContext* ctx);
void sceSifLoadModule(RecompContext* ctx);
undefined sceSifLoadStartModule(RecompContext* ctx);
void sceSifLoadElfPart(RecompContext* ctx);
void sceSifLoadElf(RecompContext* ctx);
void sceSifGetIopAddr(RecompContext* ctx);
void sceSifSetIopAddr(RecompContext* ctx);
undefined sceSifResetIop(RecompContext* ctx);
void sceSifIsAliveIop(RecompContext* ctx);
undefined sceSifSyncIop(RecompContext* ctx);
void sceSifRebootIop(RecompContext* ctx);
undefined SetTLBHandler(RecompContext* ctx);
void SetDebugHandler(RecompContext* ctx);
undefined InitTLBFunctions(RecompContext* ctx);
void PutTLBEntry(RecompContext* ctx);
void iPutTLBEntry(RecompContext* ctx);
undefined SetTLBEntry(RecompContext* ctx);
void iSetTLBEntry(RecompContext* ctx);
void GetTLBEntry(RecompContext* ctx);
void iGetTLBEntry(RecompContext* ctx);
void ProbeTLBEntry(RecompContext* ctx);
void iProbeTLBEntry(RecompContext* ctx);
void ExpandScratchPad(RecompContext* ctx);
void InitTLB(RecompContext* ctx);
undefined _kTLBException(RecompContext* ctx);
undefined _xlaunch(RecompContext* ctx);
void _kExitTLBHandler(RecompContext* ctx);
undefined _kDebugException(RecompContext* ctx);
undefined DIntr(RecompContext* ctx);
undefined EIntr(RecompContext* ctx);
void __sceKernlGetEhSemaId(RecompContext* ctx);
undefined GetSystemCallEntry(RecompContext* ctx);
undefined _InitSys(RecompContext* ctx);
undefined InitExecPS2(RecompContext* ctx);
void ExecPS2(RecompContext* ctx);
void LoadExecPS2(RecompContext* ctx);
undefined Exit(RecompContext* ctx);
undefined ExecOSD(RecompContext* ctx);
undefined InitAlarm(RecompContext* ctx);
undefined SetT2(RecompContext* ctx);
undefined SetT2_COUNT(RecompContext* ctx);
undefined SetT2_MODE(RecompContext* ctx);
undefined SetT2_COMP(RecompContext* ctx);
undefined InitTimer(RecompContext* ctx);
void EndTimer(RecompContext* ctx);
void GetTimerPreScaleFactor(RecompContext* ctx);
undefined StartTimerSystemTime(RecompContext* ctx);
undefined StopTimerSystemTime(RecompContext* ctx);
undefined iGetTimerSystemTime(RecompContext* ctx);
void GetTimerSystemTime(RecompContext* ctx);
undefined iAllocTimerCounter(RecompContext* ctx);
undefined AllocTimerCounter(RecompContext* ctx);
undefined iFreeTimerCounter(RecompContext* ctx);
undefined FreeTimerCounter(RecompContext* ctx);
undefined iGetTimerUsedUnusedCounters(RecompContext* ctx);
undefined GetTimerUsedUnusedCounters(RecompContext* ctx);
undefined iStartTimerCounter(RecompContext* ctx);
undefined StartTimerCounter(RecompContext* ctx);
undefined iStopTimerCounter(RecompContext* ctx);
void StopTimerCounter(RecompContext* ctx);
void SetTimerCount(RecompContext* ctx);
undefined iGetTimerBaseTime(RecompContext* ctx);
undefined GetTimerBaseTime(RecompContext* ctx);
undefined iGetTimerCount(RecompContext* ctx);
void GetTimerCount(RecompContext* ctx);
undefined iSetTimerHandler(RecompContext* ctx);
undefined SetTimerHandler(RecompContext* ctx);
void TimerBusClock2USec(RecompContext* ctx);
undefined TimerUSec2BusClock(RecompContext* ctx);
undefined TimerBusClock2Freq(RecompContext* ctx);
void TimerFreq2BusClock(RecompContext* ctx);
undefined _InitAlarm(RecompContext* ctx);
undefined SetTimerAlarm(RecompContext* ctx);
undefined iSetTimerAlarm(RecompContext* ctx);
undefined ReleaseTimerAlarm(RecompContext* ctx);
undefined iReleaseTimerAlarm(RecompContext* ctx);
undefined sceSifInitRebootNotify(RecompContext* ctx);
void sceSifSetRebootNotifyBuffer(RecompContext* ctx);
undefined sceSifAddRebootNotifyHandler(RecompContext* ctx);
undefined sceSifRemoveRebootNotifyHandler(RecompContext* ctx);
undefined sceSifExecNotifyHandler(RecompContext* ctx);
undefined sceResetttyinit(RecompContext* ctx);
undefined VSync(RecompContext* ctx);
undefined VSync2(RecompContext* ctx);
void write(RecompContext* ctx);
void read(RecompContext* ctx);
void open(RecompContext* ctx);
void close(RecompContext* ctx);
void ioctl(RecompContext* ctx);
void lseek(RecompContext* ctx);
void sbrk(RecompContext* ctx);
void isatty(RecompContext* ctx);
void fstat(RecompContext* ctx);
void getpid(RecompContext* ctx);
void kill(RecompContext* ctx);
undefined stat(RecompContext* ctx);
undefined unlink(RecompContext* ctx);
undefined sceDeci2Open(RecompContext* ctx);
void sceDeci2Close(RecompContext* ctx);
undefined sceDeci2ReqSend(RecompContext* ctx);
undefined sceDeci2Poll(RecompContext* ctx);
void sceDeci2GrpOpen(RecompContext* ctx);
void sceDeci2GrpClose(RecompContext* ctx);
undefined sceDeci2ExRecv(RecompContext* ctx);
undefined sceDeci2ExSend(RecompContext* ctx);
void sceDeci2ExReqSend(RecompContext* ctx);
void sceDeci2ExLock(RecompContext* ctx);
void sceDeci2ExUnLock(RecompContext* ctx);
undefined kputs(RecompContext* ctx);
undefined sceTtyWrite(RecompContext* ctx);
undefined sceTtyRead(RecompContext* ctx);
undefined sceTtyInit(RecompContext* ctx);
undefined sceSifGetSreg(RecompContext* ctx);
undefined sceSifSetSreg(RecompContext* ctx);
void sceSifGetDataTable(RecompContext* ctx);
undefined sceSifInitCmd(RecompContext* ctx);
undefined sceSifExitCmd(RecompContext* ctx);
void sceSifSetCmdBuffer(RecompContext* ctx);
void sceSifSetSysCmdBuffer(RecompContext* ctx);
undefined sceSifAddCmdHandler(RecompContext* ctx);
undefined sceSifRemoveCmdHandler(RecompContext* ctx);
undefined sceSifSendCmd(RecompContext* ctx);
undefined isceSifSendCmd(RecompContext* ctx);
undefined sceSifWriteBackDCache(RecompContext* ctx);
undefined sceVif1PkInit(RecompContext* ctx);
undefined sceVif1PkReset(RecompContext* ctx);
undefined sceVif1PkTerminate(RecompContext* ctx);
undefined sceVif1PkCnt(RecompContext* ctx);
undefined sceVif1PkEnd(RecompContext* ctx);
undefined sceVif1PkOpenDirectCode(RecompContext* ctx);
undefined sceVif1PkCloseDirectCode(RecompContext* ctx);
undefined sceVif1PkOpenGifTag(RecompContext* ctx);
undefined sceVif1PkCloseGifTag(RecompContext* ctx);
undefined sceVif1PkAlign(RecompContext* ctx);
undefined sceVif1PkAddGsData(RecompContext* ctx);
undefined sceGsResetGraph(RecompContext* ctx);
undefined sceGsGetGParam(RecompContext* ctx);
undefined sceGsResetPath(RecompContext* ctx);
undefined sceGsSetDefDrawEnv(RecompContext* ctx);
undefined sceGsPutDrawEnv(RecompContext* ctx);
undefined sceGsSetDefDBuff(RecompContext* ctx);
undefined sceGsSwapDBuff(RecompContext* ctx);
undefined sceGsSyncV(RecompContext* ctx);
undefined sceGsSyncPath(RecompContext* ctx);
undefined sceGsSetDefTexEnv(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined2 param_9, undefined2 param_10, undefined2 param_11, undefined2 param_12);
undefined sceGsSetDefAlphaEnv(RecompContext* ctx);
undefined sceGsSetHalfOffset(RecompContext* ctx);
undefined sceGsSetDefDispEnv(RecompContext* ctx);
undefined sceGsPutDispEnv(RecompContext* ctx);
undefined sceGszbufaddr(RecompContext* ctx);
undefined sceGsSetDefClear(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined1 param_9, undefined1 param_10, undefined4 param_11);
undefined sceDmaGetChan(RecompContext* ctx);
undefined sceDmaReset(RecompContext* ctx);
undefined sceDmaPutEnv(RecompContext* ctx);
void sceDmaGetEnv(RecompContext* ctx);
void sceDmaPutStallAddr(RecompContext* ctx);
undefined sceDmaSend(RecompContext* ctx);
undefined sceDmaSendN(RecompContext* ctx);
void sceDmaSendI(RecompContext* ctx);
void sceDmaRecv(RecompContext* ctx);
void sceDmaRecvN(RecompContext* ctx);
void sceDmaRecvI(RecompContext* ctx);
undefined sceDmaSync(RecompContext* ctx);
undefined sceDmaWatch(RecompContext* ctx);
undefined sceDmaPause(RecompContext* ctx);
void sceDmaRestart(RecompContext* ctx);
undefined scePad2Init(RecompContext* ctx);
undefined scePad2End(RecompContext* ctx);
undefined scePad2CreateSocket(RecompContext* ctx);
undefined scePad2DeleteSocket(RecompContext* ctx);
undefined scePad2Read(RecompContext* ctx);
undefined scePad2GetButtonProfile(RecompContext* ctx);
undefined scePad2GetState(RecompContext* ctx);
void scePad2GetButtonInfo(RecompContext* ctx);
void scePad2StateIntToStr(RecompContext* ctx);
void sceVibGetProfile(RecompContext* ctx);
undefined sceVibSetActParam(RecompContext* ctx);
undefined sceDbcInit(RecompContext* ctx);
undefined sceDbcEnd(RecompContext* ctx);
undefined sceDbcSetWorkAddr(RecompContext* ctx);
undefined sceDbcCreateSocket(RecompContext* ctx);
undefined sceDbcDeleteSocket(RecompContext* ctx);
undefined sceDbcGetDepNumber(RecompContext* ctx);
undefined sceDbcGetConnection(RecompContext* ctx);
void sceDbcInitSocket(RecompContext* ctx);
void sceDbcResetSocket(RecompContext* ctx);
void sceDbcGetDeviceStatus(RecompContext* ctx);
undefined sceDbcSearchPortSpecific(RecompContext* ctx);
undefined sceDbcSRData(RecompContext* ctx);
void sceDbcSendData(RecompContext* ctx);
undefined sceDbcSendData2(RecompContext* ctx);
undefined sceDbcSendData3(RecompContext* ctx);
undefined sceDbcReceiveData(RecompContext* ctx);
undefined sceCdCallback(RecompContext* ctx);
undefined _sceCd_cd_callback(RecompContext* ctx);
void _sceCd_cbLoop(RecompContext* ctx);
void sceCdInitEeCB(RecompContext* ctx);
void _sceCd_cd_read_intr(RecompContext* ctx);
undefined sceCdPOffCallback(RecompContext* ctx);
undefined sceCdLayerSearchFile(RecompContext* ctx);
undefined sceCdSearchFile(RecompContext* ctx);
undefined _sceCd_ncmd_prechk(RecompContext* ctx);
undefined sceCdNcmdDiskReady(RecompContext* ctx);
undefined sceCdSync(RecompContext* ctx);
undefined sceCdSyncS(RecompContext* ctx);
undefined _sceCd_scmd_prechk(RecompContext* ctx);
void _sceCdSC(RecompContext* ctx);
undefined sceCdInit(RecompContext* ctx);
undefined sceCdDiskReady_old(RecompContext* ctx);
undefined sceCdDiskReady(RecompContext* ctx);
undefined sceCdPowerOff(RecompContext* ctx);
undefined sceCdMmode(RecompContext* ctx);
undefined sceCdChgSys(RecompContext* ctx);
void sceInetPoll(RecompContext* ctx);
undefined sceInetName2Address(RecompContext* ctx);
undefined sceInetAddress2String(RecompContext* ctx);
undefined sceInetAddress2Name(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined4 param_9);
undefined sceInetCreate(RecompContext* ctx);
undefined sceInetOpen(RecompContext* ctx);
undefined sceInetClose(RecompContext* ctx);
undefined sceInetRecv(RecompContext* ctx);
undefined sceInetRecvFrom(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined4 param_9);
undefined sceInetSend(RecompContext* ctx);
undefined sceInetSendTo(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined4 param_9);
void sceInetAbort(RecompContext* ctx);
void sceInetControl(RecompContext* ctx);
undefined sceInetGetInterfaceList(RecompContext* ctx);
undefined sceInetInterfaceControl(RecompContext* ctx);
undefined sceInetGetRoutingTable(RecompContext* ctx);
undefined sceInetGetNameServers(RecompContext* ctx);
void sceInetChangeThreadPriority(RecompContext* ctx);
void sceInetGetLog(RecompContext* ctx);
void sceInetAbortLog(RecompContext* ctx);
undefined sceInetCtlUpInterface(RecompContext* ctx);
void sceInetCtlDownInterface(RecompContext* ctx);
undefined sceInetCtlSetAutoMode(RecompContext* ctx);
void sceInetCtlGetState(RecompContext* ctx);
undefined sceLibnetInitialize(RecompContext* ctx);
undefined sceLibnetTerminate(RecompContext* ctx);
undefined sceLibnetRegisterHandler(RecompContext* ctx);
undefined sceLibnetUnregisterHandler(RecompContext* ctx);
undefined sceLibnetSetConfiguration(RecompContext* ctx);
undefined sceLibnetWaitGetInterfaceID(RecompContext* ctx);
undefined sceLibnetWaitGetAddress(RecompContext* ctx);
void sceLibnetWaitGetInterfaceEvent(RecompContext* ctx);
undefined sceSifMInitRpc(RecompContext* ctx);
undefined sceSifMExitRpc(RecompContext* ctx);
void sceSifMBindRpc(RecompContext* ctx);
undefined sceSifMBindRpcParam(RecompContext* ctx);
undefined sceSifMUnBindRpc(RecompContext* ctx);
undefined sceSifMCallRpc(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined4 param_9);
undefined sceMc2Init(RecompContext* ctx);
undefined sceMc2End(RecompContext* ctx);
undefined sceMc2CreateSocket(RecompContext* ctx);
undefined sceMc2DeleteSocket(RecompContext* ctx);
void sceMc2SearchSocket(RecompContext* ctx);
void sceMc2ChangeThreadPriority(RecompContext* ctx);
void sceMc2iChangeThreadPriority(RecompContext* ctx);
undefined sceMc2FormatAsync(RecompContext* ctx);
undefined sceMc2UnformatAsync(RecompContext* ctx);
undefined sceMc2GetInfoAsync(RecompContext* ctx);
undefined sceMc2SearchFileAsync(RecompContext* ctx);
undefined sceMc2GetDirAllAsync(RecompContext* ctx);
undefined sceMc2ReadFileAsync(RecompContext* ctx);
undefined sceMc2WriteFileAsync(RecompContext* ctx);
undefined sceMc2CreateFileAsync(RecompContext* ctx);
undefined sceMc2DeleteAsync(RecompContext* ctx);
undefined sceMc2GetDirAsync(RecompContext* ctx);
undefined sceMc2MkdirAsync(RecompContext* ctx);
undefined sceMc2ChdirAsync(RecompContext* ctx);
undefined sceMc2ChmodAsync(RecompContext* ctx);
undefined sceMc2RenameAsync(RecompContext* ctx);
undefined sceMc2GetEntSpaceAsync(RecompContext* ctx);
void sceMc2CheckAsync(RecompContext* ctx);
undefined sceMc2Sync(RecompContext* ctx);
undefined sceMc2GetInfo(RecompContext* ctx);
void sceMc2Format(RecompContext* ctx);
void sceMc2Unformat(RecompContext* ctx);
undefined sceMc2ReadFile(RecompContext* ctx);
undefined sceMc2WriteFile(RecompContext* ctx);
undefined sceMc2CreateFile(RecompContext* ctx);
undefined sceMc2Delete(RecompContext* ctx);
void sceMc2Rename(RecompContext* ctx);
undefined sceMc2Mkdir(RecompContext* ctx);
undefined sceMc2Chdir(RecompContext* ctx);
undefined sceMc2GetDir(RecompContext* ctx);
void sceMc2Chmod(RecompContext* ctx);
void sceMc2SearchFile(RecompContext* ctx);
void sceMc2GetEntSpace(RecompContext* ctx);
undefined _sceMcFatInit(RecompContext* ctx);
undefined _sceMcFatInit2(RecompContext* ctx);
undefined _sceMcFatGetInfo(RecompContext* ctx);
undefined _sceMcFatFormat(RecompContext* ctx);
undefined _sceMcFatUnFormat(RecompContext* ctx);
undefined _sceMcFatSearchFile(RecompContext* ctx);
undefined _sceMcFatCreateFile(RecompContext* ctx);
undefined _sceMcFatReadFile(RecompContext* ctx);
undefined _sceMcFatWriteFile(RecompContext* ctx);
undefined _sceMcFatDeleteFile(RecompContext* ctx);
undefined _sceMcFatChDir(RecompContext* ctx);
undefined _sceMcFatGetDir(RecompContext* ctx);
undefined _sceMcFatSetAttr(RecompContext* ctx);
undefined _sceMcFatRename(RecompContext* ctx);
undefined _sceMcFatGetEntSpace(RecompContext* ctx);
undefined _sceMcpInit(RecompContext* ctx);
undefined _sceMcpGetCardSpec(RecompContext* ctx);
undefined _sceMcpCheckNewCard(RecompContext* ctx);
undefined _sceMcpAuthentication(RecompContext* ctx);
undefined _sceMcpReadSysInfo(RecompContext* ctx);
undefined _sceMcpWriteSysInfo(RecompContext* ctx);
undefined _sceMcpReadClust(RecompContext* ctx);
undefined _sceMcpWriteClust(RecompContext* ctx);
undefined _sceMcpFlushCache(RecompContext* ctx);
undefined _sceMcpWriteUserClustOnCache(RecompContext* ctx);
undefined _sceMcpReadUserClustOnCache(RecompContext* ctx);
undefined _sceMcpReadUserClust(RecompContext* ctx);
undefined _sceMcpWriteUserClust(RecompContext* ctx);
undefined _sceMcpIsSpeckOutBlock(RecompContext* ctx);
undefined _sceMcpIsSpeckOutClust(RecompContext* ctx);
undefined _sceMcpMakeSpecoutBlock(RecompContext* ctx);
void _SceMcComGetSysInfo(RecompContext* ctx);
undefined _sceMcCoreInit(RecompContext* ctx);
undefined _sceMcCoreEnd(RecompContext* ctx);
undefined _sceMcCoreSetWriteBackHole(RecompContext* ctx);
undefined _sceMcCoreSetCardSpec(RecompContext* ctx);
undefined _sceMcCoreGetCardSpec(RecompContext* ctx);
undefined _sceMcCoreCheckNewCard(RecompContext* ctx);
undefined _sceMcCoreClearNewCardFlag(RecompContext* ctx);
undefined _sceMcCoreAuthentication(RecompContext* ctx);
undefined _sceMcCoreWriteBack(RecompContext* ctx);
undefined _sceMcCoreReadClock(RecompContext* ctx);
undefined _sceMcCoreReadPage2(RecompContext* ctx);
undefined _sceMcCoreReadPage(RecompContext* ctx);
undefined _sceMcCoreWritePage(RecompContext* ctx);
undefined _sceMcCoreWriteSameData(RecompContext* ctx);
undefined _sceMcCoreBlockErase(RecompContext* ctx);
undefined _sceMcCoreGetConnection(RecompContext* ctx);
undefined _sceMcCoreCreateSocket(RecompContext* ctx);
undefined _sceMcCoreCheckSocket(RecompContext* ctx);
undefined _sceMcCoreDeleteSocket(RecompContext* ctx);
undefined _sceMcCoreChangeSocketTypeDbc2Mc(RecompContext* ctx);
undefined _sceMcCoreChangeSocketTypeMc2Dbc(RecompContext* ctx);
undefined sceNetcnfifSetup(RecompContext* ctx);
undefined sceNetcnfifInit(RecompContext* ctx);
undefined sceNetcnfifCreateCallbackThread(RecompContext* ctx);
void sceNetcnfifDeleteCallbackThread(RecompContext* ctx);
undefined sceNetcnfifSync(RecompContext* ctx);
undefined sceNetcnfifCheck(RecompContext* ctx);
undefined sceNetcnfifGetResult(RecompContext* ctx);
undefined sceNetcnfifSetFNoDecode(RecompContext* ctx);
undefined sceNetcnfifGetCount(RecompContext* ctx);
undefined sceNetcnfifGetList(RecompContext* ctx);
undefined sceNetcnfifLoadEntry(RecompContext* ctx);
undefined sceNetcnfifLoadEntryAuto(RecompContext* ctx);
void sceNetcnfifAddEntry(RecompContext* ctx);
void sceNetcnfifEditEntry(RecompContext* ctx);
void sceNetcnfifDeleteEntry(RecompContext* ctx);
void sceNetcnfifSetLatestEntry(RecompContext* ctx);
void sceNetcnfifDeleteAll(RecompContext* ctx);
void sceNetcnfifCheckCapacity(RecompContext* ctx);
void sceNetcnfifCheckAdditionalAT(RecompContext* ctx);
void sceNetcnfifCheckSpecialProvider(RecompContext* ctx);
undefined sceNetcnfifGetAddr(RecompContext* ctx);
undefined sceNetcnfifAllocWorkarea(RecompContext* ctx);
undefined sceNetcnfifFreeWorkarea(RecompContext* ctx);
undefined sceNetcnfifSetEnv(RecompContext* ctx);
void sceNetcnfifTerm(RecompContext* ctx);
undefined sce_create_callback_thread(RecompContext* ctx);
undefined sce_delete_callback_thread(RecompContext* ctx);
undefined sceNetcnfifSendIOP(RecompContext* ctx);
undefined sceNetcnfifDmaCheck(RecompContext* ctx);
undefined sce_call_rpc(RecompContext* ctx);
undefined sce_sync(RecompContext* ctx);
undefined __divdi3(RecompContext* ctx);
undefined __moddi3(RecompContext* ctx);
undefined __udivdi3(RecompContext* ctx);
undefined __umoddi3(RecompContext* ctx);
undefined __floatdisf(RecompContext* ctx);
undefined __fixunsdfdi(RecompContext* ctx);
undefined __fixunssfdi(RecompContext* ctx);
undefined __do_global_dtors(RecompContext* ctx);
undefined __do_global_ctors(RecompContext* ctx);
undefined __main(RecompContext* ctx);
undefined fptodp(RecompContext* ctx);
void Function_0x25080(RecompContext* ctx);
void Section_0x1_field_0x252CC(RecompContext* ctx);
undefined dpadd(RecompContext* ctx);
undefined dpsub(RecompContext* ctx);
undefined dpmul(RecompContext* ctx);
undefined dpdiv(RecompContext* ctx);
undefined dpcmp(RecompContext* ctx);
undefined litodp(RecompContext* ctx);
undefined __make_dp(RecompContext* ctx);
undefined dptofp(RecompContext* ctx);
undefined dptoul(RecompContext* ctx);
void Function_0x25B30(RecompContext* ctx);
undefined __register_frame_info(RecompContext* ctx);
undefined __register_frame(RecompContext* ctx);
undefined __register_frame_info_table(RecompContext* ctx);
void __register_frame_table(RecompContext* ctx);
undefined __deregister_frame_info(RecompContext* ctx);
void __deregister_frame(RecompContext* ctx);
void Function_0x26920(RecompContext* ctx);
void __frame_state_for(RecompContext* ctx);
undefined __muldi3(RecompContext* ctx);
undefined __floatdidf(RecompContext* ctx);
undefined __unpack_f(RecompContext* ctx);
undefined __make_fp(RecompContext* ctx);
undefined __pack_d(RecompContext* ctx);
undefined __unpack_d(RecompContext* ctx);
undefined __fpcmp_parts_d(RecompContext* ctx);
undefined __pack_f(RecompContext* ctx);
void atexit(RecompContext* ctx);
void atoi(RecompContext* ctx);
undefined __errno(RecompContext* ctx);
undefined memalign(RecompContext* ctx);
undefined _memalign_r(RecompContext* ctx);
void Function_0x27808(RecompContext* ctx);
undefined _malloc_r(RecompContext* ctx);
void memset_ps2(RecompContext* ctx, int dst, int value, int length);
undefined __malloc_lock(RecompContext* ctx);
undefined __malloc_unlock(RecompContext* ctx);
void _printf_r(RecompContext* ctx);
undefined _sbrk_r(RecompContext* ctx);
undefined _init_signal_r(RecompContext* ctx);
undefined _signal_r(RecompContext* ctx);
undefined _raise_r(RecompContext* ctx);
undefined __sigtramp_r(RecompContext* ctx);
void raise(RecompContext* ctx);
undefined signal(RecompContext* ctx);
void _init_signal(RecompContext* ctx);
void __sigtramp(RecompContext* ctx);
undefined _kill_r(RecompContext* ctx);
undefined _getpid_r(RecompContext* ctx);
void _sprintf_r(RecompContext* ctx);
undefined _strtol_r(RecompContext* ctx);
void strtol(RecompContext* ctx);
undefined _vfprintf_r(RecompContext* ctx);
void Function_0x2B1D8(RecompContext* ctx);
undefined __svfscanf(RecompContext* ctx);
undefined __sccl(RecompContext* ctx);
void vsprintf_r(RecompContext* ctx);
undefined __swsetup(RecompContext* ctx);
void atof(RecompContext* ctx);
void atol(RecompContext* ctx);
undefined _dtoa_r(RecompContext* ctx);
undefined __sfmoreglue(RecompContext* ctx);
undefined __sfp(RecompContext* ctx);
undefined _cleanup_r(RecompContext* ctx);
void _cleanup(RecompContext* ctx);
undefined __sinit(RecompContext* ctx);
undefined _free_r(RecompContext* ctx);
undefined _malloc_trim_r(RecompContext* ctx);
undefined __sfvwrite(RecompContext* ctx);
undefined _fwalk(RecompContext* ctx);
void _setlocale_r(RecompContext* ctx);
undefined _localeconv_r(RecompContext* ctx);
void setlocale(RecompContext* ctx);
void* localeconv(RecompContext* ctx);
undefined __smakebuf(RecompContext* ctx);
undefined _mbtowc_r(RecompContext* ctx);
undefined _Balloc(RecompContext* ctx);
undefined _Bfree(RecompContext* ctx);
undefined _multadd(RecompContext* ctx);
undefined _s2b(RecompContext* ctx);
undefined _hi0bits(RecompContext* ctx);
undefined _lo0bits(RecompContext* ctx);
undefined _i2b(RecompContext* ctx);
undefined _multiply(RecompContext* ctx);
undefined _pow5mult(RecompContext* ctx);
undefined _lshift(RecompContext* ctx);
undefined __mcmp(RecompContext* ctx);
undefined __mdiff(RecompContext* ctx);
undefined _ulp(RecompContext* ctx);
undefined _b2d(RecompContext* ctx);
undefined _d2b(RecompContext* ctx);
undefined _ratio(RecompContext* ctx);
void _mprec_log10(RecompContext* ctx);
undefined __srefill(RecompContext* ctx);
void __sread(RecompContext* ctx);
void __swrite(RecompContext* ctx);
void __sseek(RecompContext* ctx);
void __sclose(RecompContext* ctx);
void _strtod_r(RecompContext* ctx);
void strtod(RecompContext* ctx);
void strtodf(RecompContext* ctx);
undefined _strtoul_r(RecompContext* ctx);
undefined strtoul(RecompContext* ctx);
undefined __submore(RecompContext* ctx);
undefined _write_r(RecompContext* ctx);
undefined _calloc_r(RecompContext* ctx);
undefined _close_r(RecompContext* ctx);
undefined _fstat_r(RecompContext* ctx);
undefined _lseek_r(RecompContext* ctx);
undefined _read_r(RecompContext* ctx);
undefined _realloc_r(RecompContext* ctx);
undefined _sceSDC(RecompContext* ctx);
undefined SyncDCache(RecompContext* ctx);
void iSyncDCache(RecompContext* ctx);
undefined _sceIDC(RecompContext* ctx);
void InvalidDCache(RecompContext* ctx);
void iInvalidDCache(RecompContext* ctx);
undefined __fixdfdi(RecompContext* ctx);
undefined dptoli(RecompContext* ctx);
undefined ExceptionCallback(RecompContext* ctx);
int main(RecompContext* ctx, int argc, char** argv);
undefined FUN_00104ff0(RecompContext* ctx);
undefined FUN_001050a0(RecompContext* ctx);
undefined FUN_001059d8(RecompContext* ctx);
undefined FUN_00107c70(RecompContext* ctx);
undefined FUN_00107ca8(RecompContext* ctx);
undefined FUN_00107d58(RecompContext* ctx);
undefined FUN_00107d90(RecompContext* ctx);
undefined FUN_00107e20(RecompContext* ctx);
undefined FUN_00107ff8(RecompContext* ctx);
undefined FUN_00108d10(RecompContext* ctx);
undefined FUN_00108d68(RecompContext* ctx);
undefined FUN_00108d90(RecompContext* ctx);
undefined FUN_00108db8(RecompContext* ctx);
undefined FUN_001091c0(RecompContext* ctx);
undefined FUN_00109268(RecompContext* ctx);
undefined FUN_00109288(RecompContext* ctx);
undefined FUN_001092b8(RecompContext* ctx);
undefined FUN_001092f8(RecompContext* ctx);
undefined FUN_001093c8(RecompContext* ctx);
undefined FUN_00109408(RecompContext* ctx);
undefined FUN_00109640(RecompContext* ctx);
undefined FUN_00109690(RecompContext* ctx);
undefined FUN_001096d0(RecompContext* ctx);
undefined FUN_001098f0(RecompContext* ctx);
undefined FUN_0010a0b0(RecompContext* ctx);
undefined FUN_0010a120(RecompContext* ctx);
undefined FUN_0010a1a0(RecompContext* ctx);
undefined FUN_0010a228(RecompContext* ctx, undefined param_1, undefined param_2, undefined param_3, undefined param_4, undefined param_5, undefined param_6, undefined param_7, undefined param_8, undefined4 param_9, undefined4 param_10);
undefined FUN_0010a318(RecompContext* ctx);
undefined FUN_0010a388(RecompContext* ctx);
undefined FUN_0010a740(RecompContext* ctx);
undefined FUN_0010a798(RecompContext* ctx);
undefined FUN_0010a7c8(RecompContext* ctx);
undefined FUN_0010a878(RecompContext* ctx);
undefined FUN_0010aac8(RecompContext* ctx);
undefined FUN_0010bea8(RecompContext* ctx);
undefined FUN_0010e238(RecompContext* ctx);
undefined FUN_0010e338(RecompContext* ctx);
undefined FUN_0010e400(RecompContext* ctx);
undefined FUN_0010ea10(RecompContext* ctx);
undefined FUN_0010ec78(RecompContext* ctx);
undefined FUN_0010f360(RecompContext* ctx);
undefined FUN_0010f370(RecompContext* ctx);
void RFU091(RecompContext* ctx);
undefined SetSyscall(RecompContext* ctx);
void SetTLBEntry1(RecompContext* ctx);
undefined FUN_0010f590(RecompContext* ctx);
undefined FUN_0010fb88(RecompContext* ctx);
undefined FUN_0010fbf8(RecompContext* ctx);
undefined FUN_0010fc08(RecompContext* ctx);
undefined FUN_0010fc40(RecompContext* ctx);
undefined FUN_0010fc80(RecompContext* ctx);
undefined FUN_0010fcc8(RecompContext* ctx);
undefined FUN_0010fe40(RecompContext* ctx);
undefined FUN_0010fe50(RecompContext* ctx);
undefined FUN_0010fe98(RecompContext* ctx);
undefined FUN_0010ffb0(RecompContext* ctx);
undefined FUN_0010ffc0(RecompContext* ctx);
undefined FUN_00110000(RecompContext* ctx);
void InitTLBRef(RecompContext* ctx);
undefined FUN_00110260(RecompContext* ctx);
undefined FUN_00110270(RecompContext* ctx);
undefined FUN_00110780(RecompContext* ctx);
undefined FUN_00110910(RecompContext* ctx);
undefined FUN_00110998(RecompContext* ctx);
undefined FUN_001109d0(RecompContext* ctx);
undefined FUN_00111750(RecompContext* ctx);
undefined FUN_00112358(RecompContext* ctx);
undefined FUN_00112380(RecompContext* ctx);
undefined FUN_001123c0(RecompContext* ctx);
undefined FUN_00112400(RecompContext* ctx);
undefined FUN_001128a0(RecompContext* ctx);
undefined FUN_001128c0(RecompContext* ctx);
undefined FUN_00112cc8(RecompContext* ctx);
undefined FUN_00112e80(RecompContext* ctx);
undefined FUN_00114108(RecompContext* ctx);
undefined GetGsDxDyOffset(RecompContext* ctx);
undefined FUN_001147c0(RecompContext* ctx);
undefined FUN_00114830(RecompContext* ctx);
undefined FUN_001148b8(RecompContext* ctx);
undefined FUN_001148e0(RecompContext* ctx);
undefined FUN_001155d8(RecompContext* ctx);
undefined FUN_00115650(RecompContext* ctx);
undefined FUN_001156a8(RecompContext* ctx);
undefined FUN_00115710(RecompContext* ctx);
undefined FUN_00115778(RecompContext* ctx);
undefined FUN_001157d8(RecompContext* ctx);
undefined FUN_00115a30(RecompContext* ctx);
undefined FUN_00115d70(RecompContext* ctx);
undefined FUN_00116c58(RecompContext* ctx);
undefined FUN_00116fb0(RecompContext* ctx);
undefined FUN_00117098(RecompContext* ctx);
undefined FUN_001171b8(RecompContext* ctx);
undefined FUN_00117210(RecompContext* ctx);
undefined FUN_00118380(RecompContext* ctx);
undefined FUN_00118438(RecompContext* ctx);
undefined FUN_00118490(RecompContext* ctx);
undefined FUN_001184e8(RecompContext* ctx);
undefined FUN_00118578(RecompContext* ctx);
undefined FUN_00119498(RecompContext* ctx);
undefined FUN_00119528(RecompContext* ctx);
undefined FUN_00119548(RecompContext* ctx);
undefined FUN_00119568(RecompContext* ctx);
undefined FUN_00119648(RecompContext* ctx);
undefined FUN_00119670(RecompContext* ctx);
undefined FUN_00119708(RecompContext* ctx);
undefined FUN_001199a0(RecompContext* ctx);
undefined FUN_001199f8(RecompContext* ctx);
undefined FUN_00119aa0(RecompContext* ctx);
undefined FUN_00119ac0(RecompContext* ctx);
undefined FUN_0011b458(RecompContext* ctx);
undefined FUN_0011b670(RecompContext* ctx);
undefined FUN_0011bae8(RecompContext* ctx);
undefined FUN_0011bb48(RecompContext* ctx);
undefined FUN_0011bbb8(RecompContext* ctx);
undefined FUN_0011bc10(RecompContext* ctx);
bool FUN_0011bcc8(RecompContext* ctx, char* param_1, char* param_2);
undefined FUN_0011be48(RecompContext* ctx);
undefined FUN_0011bf68(RecompContext* ctx);
undefined FUN_0011bfb0(RecompContext* ctx);
undefined FUN_0011c200(RecompContext* ctx);
undefined FUN_0011c320(RecompContext* ctx);
undefined FUN_0011c3b0(RecompContext* ctx);
undefined FUN_0011c4c8(RecompContext* ctx);
undefined FUN_0011c510(RecompContext* ctx);
undefined FUN_0011c578(RecompContext* ctx);
undefined FUN_0011c6a8(RecompContext* ctx);
undefined FUN_0011c7d8(RecompContext* ctx);
undefined FUN_0011c8b0(RecompContext* ctx);
undefined FUN_0011ca30(RecompContext* ctx);
undefined FUN_0011cac0(RecompContext* ctx);
undefined FUN_0011d8e0(RecompContext* ctx);
undefined FUN_0011d988(RecompContext* ctx);
undefined FUN_0011d9e8(RecompContext* ctx);
undefined FUN_0011dc60(RecompContext* ctx);
undefined FUN_0011e0b0(RecompContext* ctx);
undefined FUN_0011e258(RecompContext* ctx);
undefined FUN_0011e388(RecompContext* ctx);
undefined FUN_0011e858(RecompContext* ctx);
undefined FUN_00120f30(RecompContext* ctx);
undefined FUN_00121000(RecompContext* ctx);
undefined FUN_00121058(RecompContext* ctx);
undefined FUN_00121ec0(RecompContext* ctx);
undefined FUN_00122ea8(RecompContext* ctx);
undefined FUN_00122f90(RecompContext* ctx);
undefined FUN_00123180(RecompContext* ctx);
undefined FUN_001231a8(RecompContext* ctx);
undefined FUN_00123208(RecompContext* ctx);
undefined FUN_00125998(RecompContext* ctx);
undefined FUN_001259e0(RecompContext* ctx);
undefined FUN_00125a38(RecompContext* ctx);
undefined FUN_001262b8(RecompContext* ctx);
undefined FUN_001262f8(RecompContext* ctx);
undefined FUN_00126388(RecompContext* ctx);
undefined FUN_001263e0(RecompContext* ctx);
undefined FUN_00126548(RecompContext* ctx);
undefined FUN_001266f0(RecompContext* ctx);
undefined FUN_00126800(RecompContext* ctx);
undefined FUN_00129830(RecompContext* ctx);
undefined FUN_00129878(RecompContext* ctx);
undefined FUN_0012b018(RecompContext* ctx);
undefined FUN_0012c240(RecompContext* ctx);
undefined FUN_0012d7f0(RecompContext* ctx);
undefined FUN_0012f800(RecompContext* ctx);

// ----------- MANAGER -------------

undefined Undefined_Gap_0x0_0x1E0(RecompContext* ctx);
undefined DEBUG_update_direction(RecompContext* ctx);
undefined DEBUG_get_cur_using_anb_file_name(RecompContext* ctx);
undefined DEBUG_disp_object_info(RecompContext* ctx);
undefined DEBUG_disp_ray(RecompContext* ctx);
undefined DEBUG_disp_cylinder_object(RecompContext* ctx);
undefined DEBUG_disp_collision_attribute_info(RecompContext* ctx);
undefined DEBUG_disp_center_collision_attribute_info(RecompContext* ctx);
undefined doit_debug_utility(RecompContext* ctx);
undefined disp_debug_utility(RecompContext* ctx);
undefined DEBUG_set_update_position_method_pointer(RecompContext* ctx);
undefined DEBUG_is_locking_debug_camera(RecompContext* ctx);
undefined DEBUG_update_position(RecompContext* ctx);
undefined DEBUG_get_2d_font_disp_position(RecompContext* ctx);
undefined DEBUG_get_2d_font_default_height_offset(RecompContext* ctx);
undefined DEBUG_get_cntrl_mode_name(RecompContext* ctx);
undefined DEBUG_get_latest_motion_name(RecompContext* ctx);
undefined DEBUG_get_base_name(RecompContext* ctx);
undefined DEBUG_get_base_name_extention_cut(RecompContext* ctx);
undefined DEBUG_get_parent_layout_name(RecompContext* ctx);
undefined DEBUG_disp_region_object(RecompContext* ctx);
undefined DEBUG_disp_sphere_object(RecompContext* ctx);
undefined DEBUG_disp_box_object(RecompContext* ctx);
undefined DEBUG_disp_collision_attribute_info_extend(RecompContext* ctx);
undefined DEBUG_disp_collision_name(RecompContext* ctx);
undefined GAMEUTIL_increase_yaw_limit_extend(RecompContext* ctx);
undefined GAMEUTIL_get_limit_clip_yaw_rel(RecompContext* ctx);
undefined GAMEUTIL_get_move_radi_from_yaw1_to_yaw2_extend(RecompContext* ctx);
undefined GAMEUTIL_is_between_yaw_and_yaw_extend_rel(RecompContext* ctx);
undefined GAMEUTIL_is_inside_of_region_pitch(RecompContext* ctx);
undefined GAMEUTIL_inc_or_dec_for_near_to_aim_yaw(RecompContext* ctx);
undefined GAMEUTIL_inc_or_dec_for_near_to_aim_pitch(RecompContext* ctx);
undefined GAMEUTIL_get_interp_pitch(RecompContext* ctx);
undefined GAMEUTIL_act_yaw_rot_region_check(RecompContext* ctx);
undefined GAMEUTIL_act_pitch_rot(RecompContext* ctx);
undefined GAMEUTIL_act_pitch_rot_limit_clip(RecompContext* ctx);
undefined GAMEUTIL_get_rot_dir_for_near_to_aim_yaw_dir(RecompContext* ctx);
undefined GAMEUTIL_near_to_aim_pitch_dir(RecompContext* ctx);
undefined GAMEUTIL_is_nearly_equal_zero(RecompContext* ctx);
undefined GAMEUTIL_is_nearly_equal_zero3D(RecompContext* ctx);
undefined GAMEUTIL_is_diff_nearly_equal_zero(RecompContext* ctx);
undefined GAMEUTIL_is_diff_nearly_equal_zero3D(RecompContext* ctx);
undefined GAMEUTIL_get_answer_of_2jihouteishiki(RecompContext* ctx);
undefined GAMEUTIL_get_cross_position_coefficient_t_by_dist_factor(RecompContext* ctx);
undefined GAMEUTIL_get_xyz_axis_from_quaternion(RecompContext* ctx);
undefined GAMEUTIL_get_segment_num_and_data(RecompContext* ctx);
undefined GAMEUTIL_check_parent_flag(RecompContext* ctx);
undefined GAMEUTIL_get_parent_collision_attribute(RecompContext* ctx);
undefined GAMEUTIL_get_parent_object(RecompContext* ctx);
undefined GAMEUTIL_get_parent_plane(RecompContext* ctx);
undefined GAMEUTIL_get_local_quaternion(RecompContext* ctx);
undefined GAMEUTIL_get_local_directionX(RecompContext* ctx);
undefined GAMEUTIL_get_local_directionY(RecompContext* ctx);
undefined GAMEUTIL_get_local_directionZ(RecompContext* ctx);
undefined GAMEUTIL_get_offset_position_by_option_space(RecompContext* ctx);
undefined GAMEUTIL_add_local_offset_root_position(RecompContext* ctx);
undefined GAMEUTIL_get_node_posi_by_id(RecompContext* ctx);
undefined GAMEUTIL_get_node_quaternion_posi_by_id(RecompContext* ctx);
undefined GAMEUTIL_get_node_quaternion_posi_by_id_extend(RecompContext* ctx);
undefined GAMEUTIL_is_inside_of_region_ratio(RecompContext* ctx);
undefined GAMEUTIL_get_new_velocity(RecompContext* ctx);
undefined GAMEUTIL_get_new_velocity_by_brake(RecompContext* ctx);
undefined GAMEUTIL_get_new_velocity_by_brake_abs(RecompContext* ctx);
undefined GAMEUTIL_get_velocity_by_diff_move(RecompContext* ctx);
undefined GAMEUTIL_get_velocity_by_diff_move3D(RecompContext* ctx);
undefined GAMEUTIL_get_vector_velocity_by_diff_move3D(RecompContext* ctx);
undefined GAMEUTIL_get_move_limit_position(RecompContext* ctx);
undefined GAMEUTIL_get_move_limit_position3D(RecompContext* ctx);
undefined GAMEUTIL_get_vel_limit_position(RecompContext* ctx);
undefined GAMEUTIL_is_inverse_move_direction(RecompContext* ctx);
undefined GAMEUTIL_mul_ratio(RecompContext* ctx);
undefined GAMEUTIL_check_and_get_normalize_vector(RecompContext* ctx);
undefined GAMEUTIL_get_motion_kind(RecompContext* ctx);
undefined GAMEUTIL_get_divide_vector_value(RecompContext* ctx);
undefined GAMEUTIL_get_except_axis_vector(RecompContext* ctx);
undefined GAMEUTIL_convert_from_cos_to_linear_ratio(RecompContext* ctx);
undefined GAMEUTIL_act_axis_rot_root_quaternion(RecompContext* ctx);
undefined GAMEUTIL_act_axis_rot_root_quaternion_abs(RecompContext* ctx);
undefined GAMEUTIL_get_difference_value(RecompContext* ctx);
undefined GAMEUTIL_get_increase_value(RecompContext* ctx);
undefined GAMEUTIL_is_between_value(RecompContext* ctx);
undefined GAMEUTIL_is_max_input(RecompContext* ctx);
undefined GAMEUTIL_convert_from_lw_to_game_coord(RecompContext* ctx);
undefined GAMEUTIL_increase_yaw(RecompContext* ctx);
undefined GAMEUTIL_increase_yaw_limit(RecompContext* ctx);
undefined GAMEUTIL_increase_yaw_region(RecompContext* ctx);
undefined GAMEUTIL_increase_yaw_limit_clip(RecompContext* ctx);
undefined GAMEUTIL_increase_yaw_limit_clip_extend(RecompContext* ctx);
undefined GAMEUTIL_get_limit_clip_yaw_abs(RecompContext* ctx);
undefined GAMEUTIL_increase_pitch(RecompContext* ctx);
undefined GAMEUTIL_increase_pitch_limit_clip(RecompContext* ctx);
undefined GAMEUTIL_get_difference_yaw_and_yaw(RecompContext* ctx);
undefined GAMEUTIL_get_difference_yaw_and_yaw_extend(RecompContext* ctx);
undefined GAMEUTIL_get_difference_pitch_and_pitch(RecompContext* ctx);
undefined GAMEUTIL_get_move_radi_from_yaw1_to_yaw2(RecompContext* ctx);
undefined GAMEUTIL_get_move_radi_from_pitch1_to_pitch2(RecompContext* ctx);
undefined GAMEUTIL_is_between_yaw_and_yaw(RecompContext* ctx);
undefined GAMEUTIL_is_between_yaw_and_yaw_extend_abs(RecompContext* ctx);
undefined GAMEUTIL_is_between_pitch_and_pitch(RecompContext* ctx);
undefined GAMEUTIL_is_inside_of_region_yaw(RecompContext* ctx);
undefined GAMEUTIL_is_reach_aim_yaw_angle(RecompContext* ctx);
undefined GAMEUTIL_is_reach_aim_pitch_angle(RecompContext* ctx);
undefined GAMEUTIL_near_to_aim_yaw_angle(RecompContext* ctx);
undefined GAMEUTIL_near_to_aim_pitch_angle(RecompContext* ctx);
undefined GAMEUTIL_get_yaw_matrix(RecompContext* ctx);
undefined GAMEUTIL_get_pitch_matrix(RecompContext* ctx);
undefined GAMEUTIL_get_direction_by_yaw(RecompContext* ctx);
undefined GAMEUTIL_get_direction_by_yaw_pitch(RecompContext* ctx);
undefined GAMEUTIL_get_yaw_by_direction(RecompContext* ctx);
undefined GAMEUTIL_get_yaw_pitch_by_direction(RecompContext* ctx);
undefined GAMEUTIL_is_yaw_pitch_get_direction(RecompContext* ctx);
undefined GAMEUTIL_get_interp_yaw(RecompContext* ctx);
undefined GAMEUTIL_get_pitch_radi(RecompContext* ctx);
undefined GAMEUTIL_get_pitch_dir(RecompContext* ctx);
undefined GAMEUTIL_divide_yaw_pitch_dir(RecompContext* ctx);
undefined GAMEUTIL_get_yaw_pitch_merge_dir(RecompContext* ctx);
undefined GAMEUTIL_act_yaw_rot(RecompContext* ctx);
undefined GAMEUTIL_is_yaw_dir_sandwich(RecompContext* ctx);
undefined GAMEUTIL_is_pitch_dir_sandwich(RecompContext* ctx);
undefined GAMEUTIL_is_yaw_dir_inside_of_region(RecompContext* ctx);
undefined GAMEUTIL_is_pitch_dir_inside_of_region(RecompContext* ctx);
undefined GAMEUTIL_get_difference_radi_yaw_dir(RecompContext* ctx);
undefined GAMEUTIL_get_difference_radi_pitch_dir(RecompContext* ctx);
undefined GAMEUTIL_get_move_radi_yaw_dir(RecompContext* ctx);
undefined GAMEUTIL_get_move_radi_pitch_dir(RecompContext* ctx);
undefined GAMEUTIL_get_rot_dir_for_near_to_aim_pitch_dir(RecompContext* ctx);
undefined GAMEUTIL_is_reach_aim_yaw_dir(RecompContext* ctx);
undefined GAMEUTIL_is_reach_aim_pitch_dir(RecompContext* ctx);
undefined GAMEUTIL_near_to_aim_yaw_dir(RecompContext* ctx);
undefined GAMEUTIL_is_nearly_equal_yaw(RecompContext* ctx);
undefined GAMEUTIL_is_nearly_equal_pitch(RecompContext* ctx);
undefined GAMEUTIL_set_inside_check_method(RecompContext* ctx);
undefined GAMEUTIL_is_inside(RecompContext* ctx);
undefined Undefined_Gap_0x7890_0x7A68(RecompContext* ctx);
undefined initmanager(RecompContext* ctx);
undefined get_fast_get_malloc_partition(RecompContext* ctx);
undefined malloc_from_src_partition(RecompContext* ctx);
undefined malloc_from_root_partition(RecompContext* ctx);
undefined malloc_from_fast_get_partition(RecompContext* ctx);
undefined entrymanager(RecompContext* ctx);
undefined initmanagerPartitionConf(RecompContext* ctx);
undefined getPartitionByName(RecompContext* ctx);
undefined GAMEUTIL_get_spring_interpolate_value3D_extend(RecompContext* ctx);
undefined GAMEUTIL_doit_interp_ratio_cntrl(RecompContext* ctx);
undefined doit_double_spring_interp_cntrl(RecompContext* ctx);
undefined GAMEUTIL_get_dist_ratio(RecompContext* ctx);
undefined GAMEUTIL_get_dist_ratio_by_dist_squ(RecompContext* ctx);
undefined GAMEUTIL_get_cos_ratio(RecompContext* ctx);
undefined GAMEUTIL_get_interp_value(RecompContext* ctx);
undefined GAMEUTIL_get_interp_value3D(RecompContext* ctx);
undefined GAMEUTIL_get_interp_value_ratio_pow(RecompContext* ctx);
undefined GAMEUTIL_get_spring_damp_offset(RecompContext* ctx);
undefined GAMEUTIL_get_spring_interpolate_offset(RecompContext* ctx);
undefined GAMEUTIL_get_spring_interpolate_value_extend(RecompContext* ctx);
undefined GAMEUTIL_get_spring_interpolate_offset3D(RecompContext* ctx);
undefined GAMEUTIL_get_spring_interpolate_value3D(RecompContext* ctx);
undefined GAMEUTIL_constructor_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_reset_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_forward_timer_still_one_ratio_time_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_get_interp_ratio_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_get_interp_timer_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_set_act_interp_flag_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_set_act_max_zero_clip_flag_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_set_param_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_set_param_extend_interp_ratio_cntrl(RecompContext* ctx);
undefined GAMEUTIL_reset_interp_value_cntrl(RecompContext* ctx);
undefined GAMEUTIL_doit_interp_value_cntrl(RecompContext* ctx);
undefined GAMEUTIL_get_interp_value_interp_value_cntrl(RecompContext* ctx);
undefined GAMEUTIL_get_hope_value_interp_value_cntrl(RecompContext* ctx);
undefined set_param_double_spring_interp_common(RecompContext* ctx);
undefined constructor_double_spring_interp_cntrl(RecompContext* ctx);
undefined set_rot_radi_value_flag_double_spring_interp_cntrl(RecompContext* ctx);
undefined reset_double_spring_interp_cntrl(RecompContext* ctx);
undefined is_reach_src_value_double_spring_interp_cntrl(RecompContext* ctx);
undefined constructor_double_spring_interp_cntrl3D(RecompContext* ctx);
undefined set_rot_radi_value_flag_double_spring_interp_cntrl3D(RecompContext* ctx);
undefined reset_double_spring_interp_cntrl3D(RecompContext* ctx);
undefined doit_double_spring_interp_cntrl3D(RecompContext* ctx);
undefined is_reach_src_value_double_spring_interp_cntrl3D(RecompContext* ctx);
undefined constructor_aim_angle_interp_cntrl(RecompContext* ctx);
undefined reset_aim_angle_interp_cntrl(RecompContext* ctx);
undefined doit_aim_angle_interp_cntrl(RecompContext* ctx);
undefined set_interp_param_aim_angle_interp_cntrl(RecompContext* ctx);
undefined Undefined_Gap_0x96AC_0x9B20(RecompContext* ctx);
undefined bgEnd(RecompContext* ctx);
undefined bgDraw(RecompContext* ctx);
undefined bgBegin(RecompContext* ctx);
undefined getBgAntiLevel(RecompContext* ctx);
undefined bgInit(RecompContext* ctx);
undefined setBossEffectTexture(RecompContext* ctx);
undefined bossDeathEffectBegin(RecompContext* ctx);
undefined bossDeathEffectEnd(RecompContext* ctx);
undefined getNowBossEffect(RecompContext* ctx);
undefined setBossDeathEffect(RecompContext* ctx);
undefined setShadowEffect(RecompContext* ctx);
undefined endBossDeathEffect(RecompContext* ctx);
undefined getBossEffectBlurLevel(RecompContext* ctx);
undefined getBossEffectColorR(RecompContext* ctx);
undefined getBossEffectColorG(RecompContext* ctx);
undefined getBossEffectColorB(RecompContext* ctx);
undefined getBossEffectBlendRatio(RecompContext* ctx);
undefined getBossEffectOutLine(RecompContext* ctx);
undefined clipBySphere(RecompContext* ctx);
undefined clipByMinMaxCube(RecompContext* ctx);
undefined getZ(RecompContext* ctx);
undefined depthOfField(RecompContext* ctx);
undefined getDepthOfFieldSw(RecompContext* ctx);
undefined getDepthOfFieldLevel(RecompContext* ctx);
undefined getDepthOfFieldPlanes(RecompContext* ctx);
undefined getDepthOfFieldNearZ(RecompContext* ctx);
undefined Undefined_Gap_0xCF04_0xD5E0(RecompContext* ctx);
undefined effectSet(RecompContext* ctx);
undefined fsEffectSetParam(RecompContext* ctx);
undefined fsEffectSetParamSheetSeg(RecompContext* ctx);
undefined fogEffectSetParam(RecompContext* ctx);
undefined effectReset(RecompContext* ctx);
undefined fsEffectCreateSetScript(RecompContext* ctx);
undefined fsEffectCreateSetScriptSheetSeg(RecompContext* ctx);
undefined fsEffectCreateSetScriptWithPlayMode(RecompContext* ctx);
undefined fsEffectManagerSetDemoParam(RecompContext* ctx);
undefined fsEffectReset(RecompContext* ctx);
undefined fsEffectDefault(RecompContext* ctx);
undefined fsEffectManagerInit(RecompContext* ctx);
undefined initFsEffect(RecompContext* ctx);
undefined deleteFsEffect(RecompContext* ctx);
undefined initFogEffect(RecompContext* ctx);
undefined deleteFogEffect(RecompContext* ctx);
undefined getCurrentFsEffect(RecompContext* ctx);
undefined Undefined_Gap_0xDFBC_0xE0F8(RecompContext* ctx);
undefined foginterp(RecompContext* ctx);
undefined setFogImmediate(RecompContext* ctx);
undefined GetNowFogColorR(RecompContext* ctx);
undefined GetNowFogColorG(RecompContext* ctx);
undefined GetNowFogColorB(RecompContext* ctx);
undefined getFogMode(RecompContext* ctx);
undefined getFogNearDist(RecompContext* ctx);
undefined getFogFarDist(RecompContext* ctx);
undefined getFogNearRate(RecompContext* ctx);
undefined getFogFarRate(RecompContext* ctx);
undefined getFogRate(RecompContext* ctx);
undefined getFogOffset(RecompContext* ctx);
undefined getFogUnderWater(RecompContext* ctx);
undefined getFogColorR(RecompContext* ctx);
undefined getFogColorG(RecompContext* ctx);
undefined getFogColorB(RecompContext* ctx);
undefined changeFogParam(RecompContext* ctx);
undefined SetAndLockBgColor(RecompContext* ctx);
undefined UnlockBgColor(RecompContext* ctx);
undefined SeemlessInitFogTargetParamWorldLayout(RecompContext* ctx);
undefined setFogParamDefault(RecompContext* ctx);
undefined fogSetFogColorMulRatio(RecompContext* ctx);
undefined getFogFactor0(RecompContext* ctx);
undefined getFogFactor1(RecompContext* ctx);
undefined feedbackBlur(RecompContext* ctx);
undefined feedbackBlur2(RecompContext* ctx);
undefined screenBrightness(RecompContext* ctx);
undefined drawFrontFog(RecompContext* ctx);
undefined fadeScreen(RecompContext* ctx);
undefined drawDemoBar(RecompContext* ctx);
undefined screenBlur(RecompContext* ctx);
undefined GetBlurRadius(RecompContext* ctx);
undefined cameraBlur(RecompContext* ctx);
undefined skipBlur(RecompContext* ctx);
undefined setFadeColor(RecompContext* ctx);
undefined setFadeLayer(RecompContext* ctx);
undefined cameraBlurClearIntensityArray(RecompContext* ctx);
undefined getCameraBlurSw(RecompContext* ctx);
undefined getBlurAlsoChara(RecompContext* ctx);
undefined getBlurWorkSize(RecompContext* ctx);
undefined getNBlurPlanes(RecompContext* ctx);
undefined getBlurIntensity(RecompContext* ctx);
undefined getBlurZBase(RecompContext* ctx);
undefined getBlurMinThreshold(RecompContext* ctx);
undefined getBlurMaxThreshold(RecompContext* ctx);
undefined getBlurShutterSpeed(RecompContext* ctx);
undefined getBlurXYZRatio(RecompContext* ctx);
undefined getBlurCamMoveThreshold(RecompContext* ctx);
undefined getBankAngle(RecompContext* ctx);
undefined glBeginWithDlLayerNo(RecompContext* ctx);
undefined Undefined_Gap_0x10AD4_0x11D98(RecompContext* ctx);
undefined glEnd(RecompContext* ctx);
undefined glBlendFunc(RecompContext* ctx);
undefined glBlendFuncParticle(RecompContext* ctx);
undefined Undefined_Gap_0x12090_0x12BC0(RecompContext* ctx);
undefined glRotatef(RecompContext* ctx);
undefined glReset(RecompContext* ctx);
undefined glEnable(RecompContext* ctx);
undefined glDisable(RecompContext* ctx);
undefined glMatrixMode(RecompContext* ctx);
undefined glBegin(RecompContext* ctx);
undefined glNormal3f(RecompContext* ctx);
undefined glNormal3fv(RecompContext* ctx);
undefined glNormal4f(RecompContext* ctx);
undefined glNormal4fv(RecompContext* ctx);
undefined glColor3f(RecompContext* ctx);
undefined glColor3fv(RecompContext* ctx);
undefined glColor4f(RecompContext* ctx);
undefined glColor4fv(RecompContext* ctx);
undefined glTexCoord2f(RecompContext* ctx);
undefined glTexCoord2fv(RecompContext* ctx);
undefined glVertex2f(RecompContext* ctx);
undefined glVertex2fv(RecompContext* ctx);
undefined glVertex3f(RecompContext* ctx);
undefined glVertex3fv(RecompContext* ctx);
undefined glVertex4f(RecompContext* ctx);
undefined glVertex4fv(RecompContext* ctx);
undefined glGetColor(RecompContext* ctx);
undefined glGetZTest(RecompContext* ctx);
undefined glLoadIdentity(RecompContext* ctx);
undefined glLoadMatrixf(RecompContext* ctx);
undefined glGetMatrixf(RecompContext* ctx);
undefined glPushMatrix(RecompContext* ctx);
undefined glPopMatrix(RecompContext* ctx);
undefined glTranslatef(RecompContext* ctx);
undefined glScalef(RecompContext* ctx);
undefined glRotatex(RecompContext* ctx);
undefined glRotatey(RecompContext* ctx);
undefined glRotatez(RecompContext* ctx);
undefined glZOffset(RecompContext* ctx);
undefined glSetReg(RecompContext* ctx);
undefined glGetCurrentMatrix(RecompContext* ctx);
undefined glLightVector(RecompContext* ctx);
undefined glSetLightVector(RecompContext* ctx);
undefined glSetLightColor(RecompContext* ctx);
undefined gluSetWrapMode(RecompContext* ctx);
undefined iosgluGetCameraContext(RecompContext* ctx);
undefined glSetFogFactor(RecompContext* ctx);
undefined glSetFogFactorDirect(RecompContext* ctx);
undefined gluGetLookAtPosition(RecompContext* ctx);
undefined iosgluGetViewCoordPosition(RecompContext* ctx);
undefined gluGetCameraSpaceXYZ(RecompContext* ctx);
undefined gluUpdateCameraContext(RecompContext* ctx);
undefined gluGetBrightness(RecompContext* ctx);
undefined printGifTag(RecompContext* ctx);
undefined printPrimReg(RecompContext* ctx);
undefined glGetZWrite(RecompContext* ctx);
undefined glGetLineSmooth(RecompContext* ctx);
undefined Undefined_Gap_0x1458C_0x145E0(RecompContext* ctx);
undefined setv3f(RecompContext* ctx);
undefined glResetWithLayerNo(RecompContext* ctx);
undefined graphFrameFinish(RecompContext* ctx);
undefined graphFrameBufferReInitialize(RecompContext* ctx);
undefined LockFullScreenEffect(RecompContext* ctx);
undefined UnlockFullScreenEffect(RecompContext* ctx);
undefined graphSetFogParam(RecompContext* ctx);
undefined getMBlur(RecompContext* ctx);
undefined setMBlur(RecompContext* ctx);
undefined getBrightness(RecompContext* ctx);
undefined graphFrameBufferReInitializeRequest(RecompContext* ctx);
undefined graphFrameInit(RecompContext* ctx);
undefined graphFsEffectReset(RecompContext* ctx);
undefined graphInit(RecompContext* ctx);
undefined getFullScreenEffect(RecompContext* ctx);
undefined getFBOfsU(RecompContext* ctx);
undefined getFBOfsV(RecompContext* ctx);
undefined getFBOfsX(RecompContext* ctx);
undefined getFBOfsY(RecompContext* ctx);
undefined graphInitLayer(RecompContext* ctx);
undefined graphInitAllLayer(RecompContext* ctx);
undefined Undefined_Gap_0x14C98_0x157C0(RecompContext* ctx);
undefined kPrintf(RecompContext* ctx);
undefined kPrintfScale(RecompContext* ctx);
undefined kPrintfAsSprite(RecompContext* ctx);
undefined kprintfSJIS(RecompContext* ctx);
undefined kprintfContext(RecompContext* ctx);
undefined kprintfContextCentering(RecompContext* ctx);
undefined kprintfContextSJIS(RecompContext* ctx);
undefined Undefined_Gap_0x15FFC_0x16148(RecompContext* ctx);
undefined kInit(RecompContext* ctx);
undefined kSetTex(RecompContext* ctx);
undefined kColor(RecompContext* ctx);
undefined iosInitKPrintfContext(RecompContext* ctx);
undefined iosInitKPrintfContext3D(RecompContext* ctx);
undefined iosSetKPrintfColorContext(RecompContext* ctx);
undefined iosSetKPrintfLocateContext(RecompContext* ctx);
undefined iosSetKPrintfLocateContextRelativePosition(RecompContext* ctx);
undefined iosSetKPrintfDynamicsContext(RecompContext* ctx);
undefined iosSetKPrintfDlContext(RecompContext* ctx);
undefined iosSetKPrintfScaleContext(RecompContext* ctx);
undefined getFontBoard(RecompContext* ctx);
undefined Undefined_Gap_0x166D4_0x16890(RecompContext* ctx);
undefined setLightParam(RecompContext* ctx);
undefined setLight(RecompContext* ctx);
undefined getAmbientColorC(RecompContext* ctx);
undefined getSpecularity(RecompContext* ctx);
undefined setSpecularity(RecompContext* ctx);
undefined getAmbientColor(RecompContext* ctx);
undefined lightsw0(RecompContext* ctx);
undefined getlc0_r(RecompContext* ctx);
undefined getlc0_g(RecompContext* ctx);
undefined getlc0_b(RecompContext* ctx);
undefined getlv0_h(RecompContext* ctx);
undefined getlv0_p(RecompContext* ctx);
undefined getlv0_b(RecompContext* ctx);
undefined lightsw1(RecompContext* ctx);
undefined getlc1_r(RecompContext* ctx);
undefined getlc1_g(RecompContext* ctx);
undefined getlc1_b(RecompContext* ctx);
undefined getlv1_h(RecompContext* ctx);
undefined getlv1_p(RecompContext* ctx);
undefined getlv1_b(RecompContext* ctx);
undefined lightsw2(RecompContext* ctx);
undefined getlc2_r(RecompContext* ctx);
undefined getlc2_g(RecompContext* ctx);
undefined getlc2_b(RecompContext* ctx);
undefined getlv2_h(RecompContext* ctx);
undefined getlv2_p(RecompContext* ctx);
undefined getlv2_b(RecompContext* ctx);
undefined lightsw3(RecompContext* ctx);
undefined getamb_r(RecompContext* ctx);
undefined getamb_g(RecompContext* ctx);
undefined getamb_b(RecompContext* ctx);
undefined setLightParamDefault(RecompContext* ctx);
undefined rotLightVector(RecompContext* ctx);
undefined CopyAmbFromAmbdef(RecompContext* ctx);
undefined getLightVector(RecompContext* ctx);
undefined debugLineObjectCreateAndSetAttributreIfChange(RecompContext* ctx);
undefined lineObjectCreatef(RecompContext* ctx);
undefined lineObjectDispImmediate(RecompContext* ctx);
undefined Undefined_Gap_0x181EC_0x1A330(RecompContext* ctx);
undefined lineObjectFlip(RecompContext* ctx);
undefined debugLineObjectSetup(RecompContext* ctx);
undefined debugLineObjectSetAttribute(RecompContext* ctx);
undefined debugLineObjectCreateAttributre(RecompContext* ctx);
undefined debugLineObjectSetMatrix(RecompContext* ctx);
undefined debugLineObjectSetBillboardMatrix(RecompContext* ctx);
undefined debugLineObjectDisp(RecompContext* ctx);
undefined lineObjectDispImmediatef(RecompContext* ctx);
undefined lineObjectCreate(RecompContext* ctx);
undefined lineObjectDelete(RecompContext* ctx);
undefined lineObjectInit(RecompContext* ctx);
undefined Undefined_Gap_0x1B2FC_0x1B578(RecompContext* ctx);
undefined modelCreatePacketTransPacket(RecompContext* ctx);
undefined modelGetDlLayer(RecompContext* ctx);
undefined modelInitDispModelClass(RecompContext* ctx);
undefined modelReInitialize(RecompContext* ctx);
undefined modelDisp(RecompContext* ctx);
undefined Undefined_Gap_0x1CCBC_0x1D188(RecompContext* ctx);
undefined modelClipSkin(RecompContext* ctx);
undefined modelClipSolid(RecompContext* ctx);
undefined Undefined_Gap_0x1D9F4_0x1E100(RecompContext* ctx);
undefined modelResetSurface(RecompContext* ctx);
undefined modelResetLayer(RecompContext* ctx);
undefined modelNameByObj(RecompContext* ctx);
undefined modelNameByHeader(RecompContext* ctx);
undefined modelSetMatrixTransTag(RecompContext* ctx);
undefined modelGetTextureObjByIndex(RecompContext* ctx);
undefined modelGetTextureResourceByIndex(RecompContext* ctx);
undefined modelDeleteDispModelClass(RecompContext* ctx);
undefined modelGetLinkCount(RecompContext* ctx);
undefined modelIncLinkCount(RecompContext* ctx);
undefined modelDecLinkCount(RecompContext* ctx);
undefined modelGetWorkSize(RecompContext* ctx);
undefined modelInitialize(RecompContext* ctx);
undefined modelGetName(RecompContext* ctx);
undefined SetDisplayModelNearClippingSwitch(RecompContext* ctx);
undefined modelSetSurface(RecompContext* ctx);
undefined modelGetDlLayerIndex(RecompContext* ctx);
undefined modelSetEnviroment(RecompContext* ctx);
undefined modelInit(RecompContext* ctx);
undefined ModelDispGetWorkSize(RecompContext* ctx);
undefined Undefined_Gap_0x1E740_0x1EB38(RecompContext* ctx);
undefined ptclmanBuildMatPacket(RecompContext* ctx);
undefined ptclmanBuildVtxPacket(RecompContext* ctx);
undefined ptclDisplayListPut(RecompContext* ctx);
undefined ptclDisplayListGet(RecompContext* ctx);
undefined ptclmanBegin(RecompContext* ctx);
undefined ptclmanEnd(RecompContext* ctx);
undefined ptclmanBuildEnvPacket(RecompContext* ctx);
undefined ptclmanGet(RecompContext* ctx);
undefined ptclmanPut(RecompContext* ctx);
undefined ptclmanFrameInit(RecompContext* ctx);
undefined ptclCounterInit(RecompContext* ctx);
undefined ptclCounterGet(RecompContext* ctx);
undefined meshDispInstance(RecompContext* ctx);
undefined meshCreate(RecompContext* ctx);
undefined GetMeshClass(RecompContext* ctx);
undefined meshTransMatrix(RecompContext* ctx);
undefined meshTransLightMatrix(RecompContext* ctx);
undefined meshDisp(RecompContext* ctx);
undefined meshFlip(RecompContext* ctx);
undefined meshInstanceFree(RecompContext* ctx);
undefined meshCreateInstanceCopy(RecompContext* ctx);
undefined meshGetWorkSize(RecompContext* ctx);
undefined meshObjectFree(RecompContext* ctx);
undefined Undefined_Gap_0x1FA2C_0x1FA40(RecompContext* ctx);
undefined CreateMeshObj(RecompContext* ctx);
undefined reflectionBegin(RecompContext* ctx);
undefined reflectionEnd(RecompContext* ctx);
undefined getRefBlurLevel(RecompContext* ctx);
undefined reflectionInit(RecompContext* ctx);
undefined refractionBegin(RecompContext* ctx);
undefined waterRefractionBegin(RecompContext* ctx);
undefined Undefined_Gap_0x212E4_0x21A60(RecompContext* ctx);
undefined inWaterEffectInit(RecompContext* ctx);
undefined refractionEnd(RecompContext* ctx);
undefined waterRefractionEnd(RecompContext* ctx);
undefined getIsInWater(RecompContext* ctx);
undefined getRefractBlurSpeed(RecompContext* ctx);
undefined getRefractBlurSpeedRand(RecompContext* ctx);
undefined getRefractBlurLevel(RecompContext* ctx);
undefined getRefractBlurLevelRand(RecompContext* ctx);
undefined getRefractLengthRatio(RecompContext* ctx);
undefined getRefractBlendRatio(RecompContext* ctx);
undefined getRefractBrightness(RecompContext* ctx);
undefined shadowReset(RecompContext* ctx);
undefined shadowDraw(RecompContext* ctx);
undefined getShadowIntensity(RecompContext* ctx);
undefined getShadowDebug(RecompContext* ctx);
undefined setShadowIntensity(RecompContext* ctx);
undefined GetShadowLength(RecompContext* ctx);
undefined shadowGetWorkSize(RecompContext* ctx);
undefined shadowModelInit(RecompContext* ctx);
undefined shadowModelReInit(RecompContext* ctx);
undefined shadowReInit(RecompContext* ctx);
undefined shadowInit(RecompContext* ctx);
undefined shadowDisp(RecompContext* ctx);
undefined getShadowDispFlag(RecompContext* ctx);
undefined Undefined_Gap_0x22FD4_0x26250(RecompContext* ctx);
undefined solarFlareReset(RecompContext* ctx);
undefined solarFlare(RecompContext* ctx);
undefined getSolarFlareSw(RecompContext* ctx);
undefined getSolarFlareBlur(RecompContext* ctx);
undefined getSolarFlareColorR(RecompContext* ctx);
undefined getSolarFlareColorG(RecompContext* ctx);
undefined getSolarFlareColorB(RecompContext* ctx);
undefined getSolarFlareSolarLevel(RecompContext* ctx);
undefined getSolarGlowLevel(RecompContext* ctx);
undefined getSolarFlareSamplePix(RecompContext* ctx);
undefined getSolarFlarePanelZ(RecompContext* ctx);
undefined getSolarFlareReduceOfsU(RecompContext* ctx);
undefined getSolarFlareReduceOfsV(RecompContext* ctx);
undefined getSolarFlareZoomOfsU(RecompContext* ctx);
undefined getSolarFlareZoomOfsV(RecompContext* ctx);
undefined Undefined_Gap_0x2652C_0x26A88(RecompContext* ctx);
undefined spriteInitObject(RecompContext* ctx);
undefined Undefined_Gap_0x26C44_0x271F8(RecompContext* ctx);
undefined spriteDrawSpriteTexNoSet(RecompContext* ctx);
undefined spriteDrawSprite(RecompContext* ctx);
undefined Undefined_Gap_0x28E58_0x29100(RecompContext* ctx);
undefined setVertexPos(RecompContext* ctx);
undefined spriteDrawSpriteUV(RecompContext* ctx);
undefined spriteDrawSpriteST(RecompContext* ctx);
undefined spriteDrawSpriteUV2(RecompContext* ctx);
undefined spriteDrawSpriteST2(RecompContext* ctx);
undefined spriteCreateObject(RecompContext* ctx);
undefined spriteDeleteObject(RecompContext* ctx);
undefined spriteSetPosition(RecompContext* ctx);
undefined spriteSetTextureCoordinateST(RecompContext* ctx);
undefined spriteSetTextureCoordinateSTFromUV(RecompContext* ctx);
undefined spriteSetTextureCoordinateUV(RecompContext* ctx);
undefined spriteSetColor(RecompContext* ctx);
undefined spriteSetScale(RecompContext* ctx);
undefined spriteSetRotation(RecompContext* ctx);
undefined spriteSetBlendMode(RecompContext* ctx);
undefined spriteSetFade(RecompContext* ctx);
undefined spriteSetPriority(RecompContext* ctx);
undefined getSpriteDispFlag(RecompContext* ctx);
undefined texTransResolve(RecompContext* ctx);
undefined Undefined_Gap_0x2DB70_0x2DE10(RecompContext* ctx);
undefined texClutScrollOne(RecompContext* ctx);
undefined texAnimationOne(RecompContext* ctx);
undefined Undefined_Gap_0x2EBDC_0x2F480(RecompContext* ctx);
undefined texInit(RecompContext* ctx);
undefined texScaleClutAlphaByName(RecompContext* ctx);
undefined texScaleClut(RecompContext* ctx);
undefined texName(RecompContext* ctx);
undefined texNameRes(RecompContext* ctx);
undefined texGetCSM1Idx(RecompContext* ctx);
undefined texGetTexByteSize(RecompContext* ctx);
undefined texGetTexTBPSize(RecompContext* ctx);
undefined texGetSize(RecompContext* ctx);
undefined texTransRequest(RecompContext* ctx);
undefined texTransRequestMulti(RecompContext* ctx);
undefined texResetVRAMRequest(RecompContext* ctx);
undefined texGetTextureModuleGroup(RecompContext* ctx);
undefined texGetWorkSize(RecompContext* ctx);
undefined texInitialize(RecompContext* ctx);
undefined texDelete(RecompContext* ctx);
undefined texClutReset(RecompContext* ctx);
undefined texReset(RecompContext* ctx);
undefined texSearchMopByName(RecompContext* ctx);
undefined texScaleClutAlpha(RecompContext* ctx);
undefined texScaleClutByName(RecompContext* ctx);
undefined Undefined_Gap_0x30350_0x30398(RecompContext* ctx);
undefined texNameResErrorCheck(RecompContext* ctx);
undefined getTexTransEnableFlag(RecompContext* ctx);
undefined texSetModelName(RecompContext* ctx);
undefined Undefined_Gap_0x30404_0x30A70(RecompContext* ctx);
undefined vramAlloc(RecompContext* ctx);
undefined vramCreateBlock(RecompContext* ctx);
undefined vramDeleteBlock(RecompContext* ctx);
undefined vramFree(RecompContext* ctx);
undefined vramReset(RecompContext* ctx);
undefined vramEnd(RecompContext* ctx);
undefined vramInit(RecompContext* ctx);
undefined vramAllocByTBPSize(RecompContext* ctx);
undefined zFog(RecompContext* ctx);
undefined getZFogDivide(RecompContext* ctx);
undefined getZFogWidth(RecompContext* ctx);
undefined getZFogFarMargin(RecompContext* ctx);
undefined getZFogFar(RecompContext* ctx);
undefined getZFogScissorMargin(RecompContext* ctx);
undefined getBgFogOffset(RecompContext* ctx);
undefined setZFogFar(RecompContext* ctx);
undefined zFogInit(RecompContext* ctx);
undefined getZFogNear(RecompContext* ctx);
undefined Undefined_Gap_0x311D4_0x31EE8(RecompContext* ctx);
undefined GetMotionFloatFrameNoCaribration(RecompContext* ctx);
undefined Undefined_Gap_0x3214C_0x32CF8(RecompContext* ctx);
undefined GetMotionColSphereInfoIntFrame(RecompContext* ctx);
undefined Undefined_Gap_0x32E5C_0x36190(RecompContext* ctx);
undefined GetObjectAnimationFloatFrame(RecompContext* ctx);
undefined GetMotionMatrix(RecompContext* ctx);
undefined GetInitialInverseMatrix(RecompContext* ctx);
undefined Undefined_Gap_0x37050_0x37170(RecompContext* ctx);
undefined DebugDispMotion(RecompContext* ctx);
undefined InitDebugMotion(RecompContext* ctx);
undefined getBlendBaseMotion(RecompContext* ctx);
undefined getBlendLastMotion(RecompContext* ctx);
undefined GetMotionDirectResourceNodeQuaternionPosFloatFrame(RecompContext* ctx);
undefined GetAnimObjResource(RecompContext* ctx);
undefined DebugGetAnimObjName(RecompContext* ctx);
undefined GetMotionOptionNodeNextSwitchFrameDirectResource(RecompContext* ctx);
undefined GetMotionOptionNodeNextSwitchFrame(RecompContext* ctx);
undefined GetMotionOptionNodeBooleanInfoFloatFrame(RecompContext* ctx);
undefined GetMotionNbOptionNodes(RecompContext* ctx);
undefined GetMotionOptionNodePhysicalId(RecompContext* ctx);
undefined GetMotionVersion(RecompContext* ctx);
undefined GetMotionResourceOriginalFrames(RecompContext* ctx);
undefined GetMotionStretchRatio(RecompContext* ctx);
undefined GetMotionIntFrame(RecompContext* ctx);
undefined GetMotionRootIntFrame(RecompContext* ctx);
undefined GetMotionOptionNodeIntFrame(RecompContext* ctx);
undefined GetMotionRootFloatFrame(RecompContext* ctx);
undefined GetMotionRootDirInfo(RecompContext* ctx);
undefined GetMotionGazeDirInfo(RecompContext* ctx);
undefined GetMotionColSphereInfo(RecompContext* ctx);
undefined Undefined_Gap_0x39820_0x39D10(RecompContext* ctx);
undefined GetMotionFloatFrame(RecompContext* ctx);
undefined Undefined_Gap_0x39F70_0x3A6F8(RecompContext* ctx);
undefined GetTRS_Onake_From_ObjectAnimation(RecompContext* ctx);
undefined InterPOrObjectAnimation(RecompContext* ctx);
undefined SetTRS_Onake_From_ObjectAnimation(RecompContext* ctx);
undefined GetMotionFrameDirectResource(RecompContext* ctx);
undefined GetMotionOptionNodeFloatFrameDirectResource(RecompContext* ctx);
undefined GetMotionOptionNodeParentId(RecompContext* ctx);
undefined GetMotionResourceFrames(RecompContext* ctx);
undefined GetMotionNodeQuaternionPosToolCoord(RecompContext* ctx);
undefined GetMotionNodeQuaternionPos(RecompContext* ctx);
undefined GetMotionNodePos(RecompContext* ctx);
undefined GetMotionNodeGeoToolCoord(RecompContext* ctx);
undefined GetMotionNodeIntFrameDirectResource(RecompContext* ctx);
undefined GetMotionFloatFrameWithLimitCaribration(RecompContext* ctx);
undefined GetMotionOptionNodeFloatFrame(RecompContext* ctx);
undefined GetObjectAnimationParentNodeId(RecompContext* ctx);
undefined GetMotionRootInfo(RecompContext* ctx);
undefined GetMotionRootShiftInfo(RecompContext* ctx);
undefined GetMotionFrame(RecompContext* ctx);
undefined GetMotionFrameWithOutsideLimit(RecompContext* ctx);
undefined GetMotionBasePos(RecompContext* ctx);
undefined GetMotionNodeBasePos(RecompContext* ctx);
undefined GetMotionNodeBaseQuaternion(RecompContext* ctx);
undefined GetMotionNodeParentBaseQuaternion(RecompContext* ctx);
undefined GetMotionNodeExistNodeAnimationData(RecompContext* ctx);
undefined getAnimObjResource(RecompContext* ctx);
undefined getMotionFloatFrameWithLimitCaribration(RecompContext* ctx);
undefined getMotionFloatFrame(RecompContext* ctx);
undefined GetMotionNS_RootInfo(RecompContext* ctx);
undefined GetMotionNS_RootShiftInfo(RecompContext* ctx);
undefined GetMotionNS_RootDirInfo(RecompContext* ctx);
undefined DebugDumpMotion(RecompContext* ctx);
undefined IsFullFixFormat(RecompContext* ctx);
undefined getPosPQSAnimIntFrame(RecompContext* ctx);
undefined getQuatPQSAnimIntFrame(RecompContext* ctx);
undefined InitMotionBoolInfo(RecompContext* ctx);
undefined SetMotionDynamicCallFunc(RecompContext* ctx);
undefined GetMotionResourceRotAngle(RecompContext* ctx);
undefined MultiGlobalQuaternionToRootSkeleton(RecompContext* ctx);
undefined GetDissolveAnimation(RecompContext* ctx);
undefined GetMotionMatrixOfTargetFromRoot(RecompContext* ctx);
undefined GetMotionMatrixOfTargetFromParent(RecompContext* ctx);
undefined GetMotionMatrixOfChildsFromTarget(RecompContext* ctx);
undefined GetMorphAnimation(RecompContext* ctx);
undefined resourceRot(RecompContext* ctx);
undefined Undefined_Gap_0x3CF30_0x3D080(RecompContext* ctx);
undefined GetMotionRootDirInfoIntFrame(RecompContext* ctx);
undefined GetMotionGazeDirInfoIntFrame(RecompContext* ctx);
undefined GetBlendedMotion(RecompContext* ctx);
undefined GetBlendedMotionRoot(RecompContext* ctx);
undefined Undefined_Gap_0x3D1E8_0x3DA08(RecompContext* ctx);
undefined CopyMultiQuaternionFromMotionRotElem(RecompContext* ctx);
undefined Undefined_Gap_0x3DA5C_0x3DC88(RecompContext* ctx);
undefined InitAnimationData(RecompContext* ctx);
undefined getBlendFirstMotion(RecompContext* ctx);
undefined GetMotionOptionNodeBooleanInfoFloatFrameDirectResource(RecompContext* ctx);
undefined get_temp_parameter_motion_ik_base(RecompContext* ctx);
undefined constructor_motion_ik_base(RecompContext* ctx);
undefined init_motion_ik_base(RecompContext* ctx);
undefined doit_motion_ik_base(RecompContext* ctx);
undefined get_type_parameter_segment_motion_ik_base(RecompContext* ctx);
undefined update_node_by_quater_motion_ik_base(RecompContext* ctx);
undefined update_node_by_rotXYZ_motion_ik_base(RecompContext* ctx);
undefined get_animation_designer_node_quater_motion_ik_base(RecompContext* ctx);
undefined get_animation_designer_node_rotXYZ_motion_ik_base(RecompContext* ctx);
undefined convert_from_quater_to_rotXYZ_motion_ik_base(RecompContext* ctx);
undefined convert_from_quater_to_rotXYZ_direct_motion_ik_base(RecompContext* ctx);
undefined convert_from_rotXYZ_to_quater_motion_ik_base(RecompContext* ctx);
undefined convert_from_rotXYZ_to_quater_direct_motion_ik_base(RecompContext* ctx);
undefined doit_motion_ik_interest(RecompContext* ctx);
undefined Undefined_Gap_0x3E8DC_0x3ED50(RecompContext* ctx);
undefined constructor_motion_ik_interest(RecompContext* ctx);
undefined begin_motion_ik_interest(RecompContext* ctx);
undefined request_end_motion_ik_interest(RecompContext* ctx);
undefined is_doing_motion_ik_interest(RecompContext* ctx);
undefined Undefined_Gap_0x3EE78_0x3F288(RecompContext* ctx);
undefined constructor_neck_turn(RecompContext* ctx);
undefined begin_neck_turn(RecompContext* ctx);
undefined request_end_neck_turn(RecompContext* ctx);
undefined is_doit_neck_turn_need(RecompContext* ctx);
undefined doit_neck_turn(RecompContext* ctx);
undefined Undefined_Gap_0x3F3C0_0x3F450(RecompContext* ctx);
undefined initGazeIKWork(RecompContext* ctx);
undefined getSizeGazeIKWork(RecompContext* ctx);
undefined GetAnimationClass(RecompContext* ctx);
undefined InitAnimationClassWithFrame(RecompContext* ctx);
undefined InitAnimationClass(RecompContext* ctx);
undefined GetAnimationClassCurrentInfo(RecompContext* ctx);
undefined GetAnimationClassCurrentInfoWithOutsideLimit(RecompContext* ctx);
undefined GetAnimationClassObjectAnimation(RecompContext* ctx);
undefined UpdateAnimationClassPastSimpleInfo(RecompContext* ctx);
undefined GetAnimationClassCurrentInfoDirectResource(RecompContext* ctx);
undefined SetAnimationClassLastInfoDirectResource(RecompContext* ctx);
undefined Undefined_Gap_0x3F824_0x3FD88(RecompContext* ctx);
undefined GetAnimationDefObjLeaveType(RecompContext* ctx);
undefined GetAnimationDefClass(RecompContext* ctx);
undefined getAnimationDefByName(RecompContext* ctx);
undefined CreateAnimationDefObj(RecompContext* ctx);
undefined Undefined_Gap_0x3FF3C_0x3FF48(RecompContext* ctx);
undefined InitAnimationDefObj(RecompContext* ctx);
undefined GetAnimationDefObjWorkSize(RecompContext* ctx);
undefined CalcNodeInterp(RecompContext* ctx);
undefined CalcNodeQuaternionWithIK(RecompContext* ctx);
undefined SetCharacterClassMotionAddSyncMode(RecompContext* ctx);
undefined Undefined_Gap_0x4102C_0x41C00(RecompContext* ctx);
undefined CharacterClassMalloc(RecompContext* ctx);
undefined GetCharacterObjWorkSize(RecompContext* ctx);
undefined GetCharacterClassOptionNodeGeo(RecompContext* ctx);
undefined SetCharacterObjDemoMotionMode(RecompContext* ctx);
undefined InitCharacterObj(RecompContext* ctx);
undefined ReleaseCharacterClassMotSyncAnim(RecompContext* ctx);
undefined FlushCharacterObjImmediate(RecompContext* ctx);
undefined ExecCharaGeometry(RecompContext* ctx);
undefined getClothGeometry(RecompContext* ctx);
undefined GetCharacterClass(RecompContext* ctx);
undefined FlushCharacterObj(RecompContext* ctx);
undefined ExecCharaGeometryPreprocess(RecompContext* ctx);
undefined ExecCharaGeometryPostprocess(RecompContext* ctx);
undefined GetCharacterClassInitParamNbNodes(RecompContext* ctx);
undefined GetCharacterClassInitParamNbOptionNodes(RecompContext* ctx);
undefined GetCharacterClassBaseQ(RecompContext* ctx);
undefined GetCharacterClassMotionTopDirection(RecompContext* ctx);
undefined GetCharacterClassControlFrontDirection(RecompContext* ctx);
undefined GetCharacterClassMotionFrontDirection(RecompContext* ctx);
undefined GetCharacterClassControlDirection(RecompContext* ctx);
undefined GetCharacterClassIKNodeBooleanInfo(RecompContext* ctx);
undefined GetCharacterClassOptionNodeLocalQuaternionPos(RecompContext* ctx);
undefined ResetCharacterClassCtrlRelationInfos(RecompContext* ctx);
undefined ResetCharacterClassFallDownInfo(RecompContext* ctx);
undefined ResetCharacterClassIKInfo(RecompContext* ctx);
undefined ResetCharacterClassWaterStatus(RecompContext* ctx);
undefined ReleaseCharacterClassMotSyncAnimForceDeleteGroupWithMotChange(RecompContext* ctx);
undefined ReleaseCharacterClassAddMotSyncAnim(RecompContext* ctx);
undefined DebugResetCharacterObjControlTarget(RecompContext* ctx);
undefined UpdateCharacterClassGeometry(RecompContext* ctx);
undefined UpdateCharacterClassPastGeometry(RecompContext* ctx);
undefined RequestCharacterMotionShiftFunc(RecompContext* ctx);
undefined GetCharacterClassNodeQuaternionPos(RecompContext* ctx);
undefined CalcCharacterClassBaseGeo(RecompContext* ctx);
undefined ResetCharacterClassSyncMode(RecompContext* ctx);
undefined SetCharacterClassMotionNormalSyncMode(RecompContext* ctx);
undefined ResetCharacterClassMotInterpInfo(RecompContext* ctx);
undefined ResetCharacterClassSlideStatus(RecompContext* ctx);
undefined ResetCharacterClassMotionInterpRootOfs(RecompContext* ctx);
undefined GetScalableTurnQuaternionArray(RecompContext* ctx);
undefined GetCharacterClassCurrentAnimationPositionInfo(RecompContext* ctx);
undefined GetCharacterClassCurAnimationFrameRate(RecompContext* ctx);
undefined GetCharacterClassCurAnimationTotalFrame(RecompContext* ctx);
undefined GetCharacterClassCurAnimationCurFrame(RecompContext* ctx);
undefined regularizeMatAry(RecompContext* ctx);
undefined acceptMotionShiftFunc(RecompContext* ctx);
undefined GetCalcNumObjWorkSize(RecompContext* ctx);
undefined GetCharSuspension1D(RecompContext* ctx);
undefined SetCharacterObjControlCallBackFunc(RecompContext* ctx);
undefined SetCharacterObjControlBypassFunc(RecompContext* ctx);
undefined ChangeCharacterObjCollisionEnableFlag(RecompContext* ctx);
undefined ChangeCharacterObjCollisionResourceAttribute(RecompContext* ctx);
undefined SetCharacterObjCollisionProcFlag(RecompContext* ctx);
undefined GetGeometryPointerCharColAttr(RecompContext* ctx);
undefined GetParentCharColAttr(RecompContext* ctx);
undefined DebugGetParentCharColAttr(RecompContext* ctx);
undefined PredictMotionGeometryPotential(RecompContext* ctx);
undefined PredictMotionGeometryPotentialWithScaleElem(RecompContext* ctx);
undefined GetCharacterClassMotionInterpNodePosition(RecompContext* ctx);
undefined GetCharacterClassMotionInterpNodeLastPosition(RecompContext* ctx);
undefined GetCharacterClassMotionPhysicalNodeID(RecompContext* ctx);
undefined SetCharacterClassRootQuaternion(RecompContext* ctx);
undefined SetCharacterClassRootQuaternionWithInterpolationGeometry(RecompContext* ctx);
undefined GetCharacterObjMotionShiftCallBackMaxEntry(RecompContext* ctx);
undefined ResetCharacterObjMotionShiftCallBackEntryAll(RecompContext* ctx);
undefined SetCharacterObjMotionShiftCallBackEntry(RecompContext* ctx);
undefined SetCharacterObjParentPlaneDiscontinuousJudgeFunc(RecompContext* ctx);
undefined SetCharacterObjParentPointXZFitGpChangeJudgeFunc(RecompContext* ctx);
undefined SetCharacterObjColSphereOverrideFunc(RecompContext* ctx);
undefined SetInertiaRotInterpMode(RecompContext* ctx);
undefined DebugDispCharacterStatus(RecompContext* ctx);
undefined CallMotShiftCallBackElemLeaveFunc(RecompContext* ctx);
undefined CallMotShiftCallBackElemEntryFunc(RecompContext* ctx);
undefined SetCharacterObjScriptKeyEnableFlagOnDemoOrient(RecompContext* ctx);
undefined UnlinkSecureParentInfo(RecompContext* ctx);
undefined LinkSecureParentInfoByGP(RecompContext* ctx);
undefined LinkSecureParentInfoByDBPos(RecompContext* ctx);
undefined ResetCharacterObj4DDynamicsInfo(RecompContext* ctx);
undefined InitSecureParentInfo(RecompContext* ctx);
undefined getMotionDebugPrintMode(RecompContext* ctx);
undefined getAddMotionEnableFlag(RecompContext* ctx);
undefined getIkControlEnableFlag(RecompContext* ctx);
undefined getRootMoveDisableFlag(RecompContext* ctx);
undefined dispCollisionFinderFlag(RecompContext* ctx);
undefined dispCollisionKeepAreaFlag(RecompContext* ctx);
undefined getCollisionDisableAtDirectPlayFlag(RecompContext* ctx);
undefined GetCharacterClassMotionBaseQ(RecompContext* ctx);
undefined fittingwithrot(RecompContext* ctx);
undefined ResetCharacterClassIKNodeInterpInfo(RecompContext* ctx);
undefined Undefined_Gap_0x48020_0x48060(RecompContext* ctx);
undefined getoptnodephysicalnodeid(RecompContext* ctx);
undefined GetCharacterClassNodeMatQuaternionPos(RecompContext* ctx);
undefined EnableCharacterObjAdditionMotion(RecompContext* ctx);
undefined DisableCharacterObjAdditionMotion(RecompContext* ctx);
undefined DisableCharacterObjAddParentVelocity(RecompContext* ctx);
undefined EnableCharacterObjAddParentVelocity(RecompContext* ctx);
undefined ReleaseCharacterClassAddMotSyncAnimAll(RecompContext* ctx);
undefined Undefined_Gap_0x48324_0x48388(RecompContext* ctx);
undefined AddCharacterClassOptionNodeSubGeometry(RecompContext* ctx);
undefined Undefined_Gap_0x48620_0x499E0(RecompContext* ctx);
undefined AddCharacterClassSubGeometries(RecompContext* ctx);
undefined Undefined_Gap_0x49C24_0x4B428(RecompContext* ctx);
undefined SetCharacterClassGazeAdditionChannelInfo(RecompContext* ctx);
undefined GetOptionNodePhysicalNodeId(RecompContext* ctx);
undefined AddCharacterClassOptionNodeSubGeometries(RecompContext* ctx);
undefined AddSubGeometry(RecompContext* ctx);
undefined Undefined_Gap_0x4B630_0x4B7C0(RecompContext* ctx);
undefined AddCharacterClassSubGeometriesOfMatrix(RecompContext* ctx);
undefined GetCharacterClassGazeAddMotions(RecompContext* ctx);
undefined InitGazeAddChannelDef(RecompContext* ctx);
undefined Undefined_Gap_0x4BA64_0x4E730(RecompContext* ctx);
undefined GetControlCheckStatusFromGP(RecompContext* ctx);
undefined Undefined_Gap_0x4E844_0x4EB20(RecompContext* ctx);
undefined PredictMotionOrientByScriptCtrl(RecompContext* ctx);
undefined Undefined_Gap_0x4EF64_0x508F0(RecompContext* ctx);
undefined ChangeCharacterObjControlTarget(RecompContext* ctx);
undefined ChangeCharacterObjControlledTarget(RecompContext* ctx);
undefined CharaCtrlSearchControlChange(RecompContext* ctx);
undefined CheckControlDef(RecompContext* ctx);
undefined CheckControlDefByStatus(RecompContext* ctx);
undefined CharaCtrlPlayableControl(RecompContext* ctx);
undefined CharaCtrlPlayableControlExt(RecompContext* ctx);
undefined CharaCtrlAIControl(RecompContext* ctx);
undefined CharaCtrlResetCtrlStatus(RecompContext* ctx);
undefined CharaCtrlResetAllScriptCtrlStatus(RecompContext* ctx);
undefined CharaCtrlSetScriptCtrlStatus(RecompContext* ctx);
undefined CharaCtrlResetScriptCtrlStatus(RecompContext* ctx);
undefined CharaCtrlResetPlayableCtrlStatus(RecompContext* ctx);
undefined CharaCtrlSetOutsideScriptCtrlStatus(RecompContext* ctx);
undefined CharaCtrlSetScriptCtrlStatusCallBack(RecompContext* ctx);
undefined InitScriptControlButtonCallBack(RecompContext* ctx);
undefined CheckParentCharOrLwsOrient(RecompContext* ctx);
undefined IsParentCharOrLwsOrient(RecompContext* ctx);
undefined ForceAcceptMotionControlChange(RecompContext* ctx);
undefined getMotionPrintTarget(RecompContext* ctx);
undefined getLocalAccelDispFlag(RecompContext* ctx);
undefined getScriptSwitchDispSw(RecompContext* ctx);
undefined resetOutsideScriptCtrlStatus(RecompContext* ctx);
undefined GetPadControlFlag(RecompContext* ctx);
undefined checkScriptControlDef(RecompContext* ctx);
undefined YattsukeSetPlayerR1ON(RecompContext* ctx);
undefined ResetCharacterClassMailRelationalTriggerFlags(RecompContext* ctx);
undefined RecvCharacterObjMail(RecompContext* ctx);
undefined SendCharaAttackMsg(RecompContext* ctx);
undefined SendCharaControlChangeMsg(RecompContext* ctx);
undefined SendCharaControlledChangeMsg(RecompContext* ctx);
undefined SendCharaMotionSyncStartMsg(RecompContext* ctx);
undefined SendCharaAddMotionSyncStartMsg(RecompContext* ctx);
undefined SendCharaNodeParentSetMsg(RecompContext* ctx);
undefined Undefined_Gap_0x5191C_0x51E50(RecompContext* ctx);
undefined ForceAcceptMotion(RecompContext* ctx);
undefined ResetCharacterClassAnimeFrameTableInfo(RecompContext* ctx);
undefined Undefined_Gap_0x52134_0x55840(RecompContext* ctx);
undefined character_motchange_adjustrootrot(RecompContext* ctx);
undefined Undefined_Gap_0x55E34_0x57580(RecompContext* ctx);
undefined OptimizeMotionOrient(RecompContext* ctx);
undefined SearchSubAnimation(RecompContext* ctx);
undefined RequestCharacterClassSlip(RecompContext* ctx);
undefined RequestCharacterClassNoClimbableSlip(RecompContext* ctx);
undefined RequestCharacterClassMotionChange(RecompContext* ctx);
undefined RequestCharacterClassAdditionMotionChange(RecompContext* ctx);
undefined RequestCharacterClassMotionChangeWithParam(RecompContext* ctx);
undefined RequestCharacterClassMotionDirection(RecompContext* ctx);
undefined RequestCharacterClassMotionDirectionByGPTop(RecompContext* ctx);
undefined RequestCharacterClassMotionDirectionByGPTail(RecompContext* ctx);
undefined RequestCharacterClassMotionDirectionByGPAirBalanceDir(RecompContext* ctx);
undefined RequestCharacterClassMotionTurnLevel(RecompContext* ctx);
undefined RequestCharacterClassRootOffset(RecompContext* ctx);
undefined RequestCharacterClassMotionPlaySpeedUp(RecompContext* ctx);
undefined RequestCharacterClassMotionPlaySpeedDown(RecompContext* ctx);
undefined RequestCharacterClassMotionPlaySpeedDown2(RecompContext* ctx);
undefined RequestCharacterClassWindForceMove(RecompContext* ctx);
undefined ResetCharacterClassMotionShiftInfo(RecompContext* ctx);
undefined DebugCallCharacterObjMotionLeaveFunc(RecompContext* ctx);
undefined SetCharacterObjDemoCutFinishFlag(RecompContext* ctx);
undefined CancelCharacterClassMotionChange(RecompContext* ctx);
undefined getTurnLimitInterp(RecompContext* ctx);
undefined getRatioFromInterp(RecompContext* ctx);
undefined PredictMotionChangeState(RecompContext* ctx);
undefined FinishCharacterObjAllAdditionMotion(RecompContext* ctx);
undefined getMotionInterpMode(RecompContext* ctx);
undefined getJumpSpeedLimitEnableFlag(RecompContext* ctx);
undefined callEntryFunc(RecompContext* ctx);
undefined entrySyncAnim(RecompContext* ctx);
undefined SetMotionMinimumSpeed(RecompContext* ctx);
undefined SetMotionMaximumSpeed(RecompContext* ctx);
undefined ContinueMotionCurrentSpeed(RecompContext* ctx);
undefined checkShift(RecompContext* ctx);
undefined SetCharacterObjMotionJumpSpeedLimit(RecompContext* ctx);
undefined GetMainAnimation(RecompContext* ctx);
undefined GetSubAnimation(RecompContext* ctx);
undefined Undefined_Gap_0x58688_0x58A58(RecompContext* ctx);
undefined charrootdyn_acceptMotionRootOffset(RecompContext* ctx);
undefined Undefined_Gap_0x58F18_0x59120(RecompContext* ctx);
undefined charrootdyn_getCollisionDB(RecompContext* ctx);
undefined charrootdyn_getParentedEdgeInfo(RecompContext* ctx);
undefined Undefined_Gap_0x595EC_0x5A488(RecompContext* ctx);
undefined charrootdyn_updateParentPointGPInfo(RecompContext* ctx);
undefined charrootdyn_getChainStatus(RecompContext* ctx);
undefined charrootdyn_getNipPlaneStatus(RecompContext* ctx);
undefined GetCharaVCollisionStatus(RecompContext* ctx);
undefined charrootdyn_HslidecollisionCB(RecompContext* ctx);
undefined charrootdyn_setkeepcolhitstatus(RecompContext* ctx);
undefined charrootdyn_slidecollisionCB(RecompContext* ctx);
undefined Undefined_Gap_0x5BEF4_0x5C238(RecompContext* ctx);
undefined getAverageNormal(RecompContext* ctx);
undefined charrootdyn_getCompleteFittingYQFromStabGPWithSlopeLimit_X(RecompContext* ctx);
undefined Undefined_Gap_0x5CCDC_0x5CE90(RecompContext* ctx);
undefined charrootdyn_setLandingStatus(RecompContext* ctx);
undefined Undefined_Gap_0x5D078_0x5E0A0(RecompContext* ctx);
undefined charrootdyn_parentHColGp(RecompContext* ctx);
undefined charnodeparent(RecompContext* ctx);
undefined norootdynamics(RecompContext* ctx);
undefined GetCharaRootDynamics(RecompContext* ctx);
undefined GetCharaRootDynamicsAfter(RecompContext* ctx);
undefined ReparentCharacterObj(RecompContext* ctx);
undefined charrootdyn_getCyclicCollisionDetectZYOneWay(RecompContext* ctx);
undefined charrootdyn_getCyclicCollisionDetectZY(RecompContext* ctx);
undefined ResetCharacterClassPositionMemoryInfo(RecompContext* ctx);
undefined ResetCharacterClassDynamicsElement(RecompContext* ctx);
undefined charrootdyn_clipNoStopCollisionFinder(RecompContext* ctx);
undefined charrootdyn_slidecollision(RecompContext* ctx);
undefined charrootdyn_getCollisionDBwithFunc(RecompContext* ctx);
undefined charrootdyn_getInterpVector(RecompContext* ctx);
undefined charrootdyn_getInterpPoint(RecompContext* ctx);
undefined charrootdyn_getGPPlaneInfo(RecompContext* ctx);
undefined charrootdyn_getGPPlaneInfoWithVPlane(RecompContext* ctx);
undefined charrootdyn_getUpperEdgeEffectiveHeight(RecompContext* ctx);
undefined charrootdyn_checkHangableEdgeWall(RecompContext* ctx);
undefined charrootdyn_detectCharClimbableWall(RecompContext* ctx);
undefined charrootdyn_detectCharClimbableWallContinue(RecompContext* ctx);
undefined charrootdyn_checkZplane(RecompContext* ctx);
undefined charrootdyn_setHColFindStatus(RecompContext* ctx);
undefined charrootdyn_getLandingSurface(RecompContext* ctx);
undefined charrootdyn_slideExceptionJudgeCB(RecompContext* ctx);
undefined charrootdyn_getSlideCollisionJudgeCBArg(RecompContext* ctx);
undefined charrootdyn_checkUnderWater(RecompContext* ctx);
undefined charrootdyn_getWaterStatus(RecompContext* ctx);
undefined charrootdyn_addSlideElement(RecompContext* ctx);
undefined ResetCharacterObjGeoDynamics(RecompContext* ctx);
undefined charrootdyn_getvelocity(RecompContext* ctx);
undefined charrootdyn_addWindDynamicsToRoot(RecompContext* ctx);
undefined charrootdyn_getPlaneYFittingVector(RecompContext* ctx);
undefined charrootdyn_getLocalOffsetFromParentGP(RecompContext* ctx);
undefined charrootdyn_getCompleteFittingYQFromYDir(RecompContext* ctx);
undefined charrootdyn_findLocalYGeometryPoint(RecompContext* ctx);
undefined charrootdyn_findGlobalYGeometryPoint(RecompContext* ctx);
undefined charrootdyn_checkIYplane4D(RecompContext* ctx);
undefined charrootdyn_checkIYplane3D(RecompContext* ctx);
undefined charrootdyn_checkIYPlane3DWithPos(RecompContext* ctx);
undefined charrootdyn_getCompleteFittingYQFromStabGPWithSlopeLimit(RecompContext* ctx);
undefined charrootdyn_getCompleteFittingPlaneFromStabGPWithSlopeLimit(RecompContext* ctx);
undefined charrootdyn_getGPRelativePositionWithQ(RecompContext* ctx);
undefined charrootdyn_getLocalYGlobalXZOffsetFromParentGP(RecompContext* ctx);
undefined SetCharacterClassWindDynamics(RecompContext* ctx);
undefined charrootdyn_setEdgeUpperPlaneInfoFlag(RecompContext* ctx);
undefined charrootdyn_resetEdgeUpperPlaneInfoFlag(RecompContext* ctx);
undefined charrootdyn_setVColFindFlag(RecompContext* ctx);
undefined charrootdyn_resetHColFindFlag(RecompContext* ctx);
undefined charrootdyn_resetVColFindFlag(RecompContext* ctx);
undefined charrootdyn_resetVColEdgeFindFlag(RecompContext* ctx);
undefined charrootdyn_resetChainFindStatus(RecompContext* ctx);
undefined charrootdyn_resetkeepcolhitstatus(RecompContext* ctx);
undefined charrootdyn_restoreposition(RecompContext* ctx);
undefined charrootdyn_getCharaFront_PlaneTopDifferenceXZAngle(RecompContext* ctx);
undefined charrootdyn_getRegularColFinderPosition(RecompContext* ctx);
undefined charrootdyn_getCollisionAttribute(RecompContext* ctx);
undefined charrootdyn_getOffsetGlobalPos(RecompContext* ctx);
undefined charrootdyn_getForceLimitMode(RecompContext* ctx);
undefined charrootdyn_getNoLimitMode(RecompContext* ctx);
undefined charrootdyn_getForceNoLimitMode(RecompContext* ctx);
undefined charrootdyn_getLimitMode(RecompContext* ctx);
undefined charrootdyn_checkSlopeLimit(RecompContext* ctx);
undefined charrootdyn_getMotionRootInfo(RecompContext* ctx);
undefined charrootdyn_getCyclicCollisionDetectZYOneWayCB(RecompContext* ctx);
undefined charrootdyn_getCyclicCollisionDetectZYOneWayComplexCB(RecompContext* ctx);
undefined GetRootRotStatus(RecompContext* ctx);
undefined EnableCharacterObjMotionRootRotDynamics(RecompContext* ctx);
undefined charrootdyn_detectCharEdge(RecompContext* ctx);
undefined charrootdyn_isParentToEdge(RecompContext* ctx);
undefined charrootdyn_getGPPlaneInfoByCollisionDBData(RecompContext* ctx);
undefined charrootdyn_updateCharacterClassParentGeometry(RecompContext* ctx);
undefined charrootdyn_getLocalOffsetFromParentGPwithGPCoordinate(RecompContext* ctx);
undefined charrootdyn_setFallDownLandingOffset(RecompContext* ctx);
undefined charrootdyn_getEdgeEffectivityCheckRayPosition(RecompContext* ctx);
undefined getEdgeHangDebugFlag(RecompContext* ctx);
undefined getAirResistEnableFlag(RecompContext* ctx);
undefined getDisableExtendWallFlag(RecompContext* ctx);
undefined Undefined_Gap_0x642C4_0x64408(RecompContext* ctx);
undefined charrootdyn_exchangeEdgePointOtherSideSurface(RecompContext* ctx);
undefined charrootdyn_checkParentGPPlaneDir(RecompContext* ctx);
undefined Undefined_Gap_0x64624_0x64660(RecompContext* ctx);
undefined charrootdyn_memoryposition(RecompContext* ctx);
undefined charrootdyn_setChainFindStatus(RecompContext* ctx);
undefined motrootdyn_startfreefall(RecompContext* ctx);
undefined motrootdyn_startfreefall_from_pendulum(RecompContext* ctx);
undefined Undefined_Gap_0x64990_0x64B20(RecompContext* ctx);
undefined freefallnostab(RecompContext* ctx);
undefined motrootdyn_startmotionfall(RecompContext* ctx);
undefined motionfall(RecompContext* ctx);
undefined charrootdyn_resetRootDynamicsWithLowerCollisionForXZ(RecompContext* ctx);
undefined charrootdyn_resetRootDynamicsWithLowerCollisionForXZFit(RecompContext* ctx);
undefined Undefined_Gap_0x64D44_0x64D70(RecompContext* ctx);
undefined motrootdyn_startcharnodeparent(RecompContext* ctx);
undefined norootdynamics_vel_xzstab(RecompContext* ctx);
undefined norootdynamics_vel(RecompContext* ctx);
undefined directplay(RecompContext* ctx);
undefined charrootdyn_debugDispParentGeometryStatus(RecompContext* ctx);
undefined Undefined_Gap_0x6528C_0x66BF0(RecompContext* ctx);
undefined getIkExpressionSwBool(RecompContext* ctx);
undefined getRootFittingEnableFlag(RecompContext* ctx);
undefined getRootFittingMode(RecompContext* ctx);
undefined getIkExpressionSw(RecompContext* ctx);
undefined GetCharacterClassOptionNodeBasePos(RecompContext* ctx);
undefined resetExpressionLocalHeightDiff(RecompContext* ctx);
undefined CalcRootFitting(RecompContext* ctx);
undefined SetCharacterObjForceNoExpressionInterp(RecompContext* ctx);
undefined Undefined_Gap_0x6702C_0x67A60(RecompContext* ctx);
undefined edgepoint(RecompContext* ctx);
undefined charrootdyn_edgepointstab(RecompContext* ctx);
undefined motrootdyn_startedgepoint_from_pendulum_with_edge(RecompContext* ctx);
undefined motrootdyn_setupedgepoint(RecompContext* ctx);
undefined motrootdyn_startedgepoint(RecompContext* ctx);
undefined Undefined_Gap_0x682F0_0x68860(RecompContext* ctx);
undefined edgexz(RecompContext* ctx);
undefined GetPleneFittingPointWithNormal(RecompContext* ctx);
undefined charrootdyn_parentpointxzfitstab(RecompContext* ctx);
undefined Undefined_Gap_0x692C4_0x695F0(RecompContext* ctx);
undefined parentpointxzfit(RecompContext* ctx);
undefined motrootdyn_startparentpointxzfit_from_pendulum(RecompContext* ctx);
undefined motrootdyn_startparentpointxzfit(RecompContext* ctx);
undefined motrootdyn_startparentpointxzfit_from_falldown(RecompContext* ctx);
undefined motrootdyn_startparentpointxzfit_from_xzfit(RecompContext* ctx);
undefined motrootdyn_startparentpointxzfit_from_xz(RecompContext* ctx);
undefined Undefined_Gap_0x69B34_0x69D20(RecompContext* ctx);
undefined pendulum(RecompContext* ctx);
undefined motrootdyn_startpendulum_nochange_parent(RecompContext* ctx);
undefined motrootdyn_startpendulum(RecompContext* ctx);
undefined motrootdyn_startchainhang(RecompContext* ctx);
undefined motrootdyn_startpendulum_with_VCOL(RecompContext* ctx);
undefined swim(RecompContext* ctx);
undefined motrootdyn_startswim(RecompContext* ctx);
undefined Undefined_Gap_0x6BDF8_0x6C348(RecompContext* ctx);
undefined xz(RecompContext* ctx);
undefined motrootdyn_startxz_from_pendulum(RecompContext* ctx);
undefined motrootdyn_startxz_from_edgepoint(RecompContext* ctx);
undefined motrootdyn_startxz_from_parentpoint(RecompContext* ctx);
undefined motrootdyn_startxz_from_xzfit(RecompContext* ctx);
undefined motrootdyn_startxz(RecompContext* ctx);
undefined Undefined_Gap_0x6D298_0x6D470(RecompContext* ctx);
undefined motrootdyn_startxzfit(RecompContext* ctx);
undefined motrootdyn_parent_from_falldown(RecompContext* ctx);
undefined motrootdyn_startxzfit_from_xz(RecompContext* ctx);
undefined Undefined_Gap_0x6DF98_0x70170(RecompContext* ctx);
undefined motrootdyn_changehcol_from_xz(RecompContext* ctx);
undefined motrootdyn_startxzfit_common(RecompContext* ctx);
undefined motrootdyn_startxzfit_from_falldown(RecompContext* ctx);
undefined motrootdyn_startxzfit_from_edgepoint(RecompContext* ctx);
undefined motrootdyn_startxzfit_from_parentpointxzfit(RecompContext* ctx);
undefined motrootdyn_startxzfit_from_pendulum(RecompContext* ctx);
undefined xzfit(RecompContext* ctx);
undefined GetChildGroupManagerClass(RecompContext* ctx);
undefined InitChildGroupManagerObj(RecompContext* ctx);
undefined EntryChildGroupManagerObj(RecompContext* ctx);
undefined FlushChildGroupManagerObj(RecompContext* ctx);
undefined ExecChildGroupManagerObj(RecompContext* ctx);
undefined GetDemoOrientNext(RecompContext* ctx);
undefined SetDemoMotionOrientInfo(RecompContext* ctx);
undefined Undefined_Gap_0x70AE8_0x71020(RecompContext* ctx);
undefined ExecFogColMan(RecompContext* ctx);
undefined NewCreateFogColClass(RecompContext* ctx);
undefined Undefined_Gap_0x71700_0x71D18(RecompContext* ctx);
undefined InitFogColMan(RecompContext* ctx);
undefined AddCollMan(RecompContext* ctx);
undefined DeleteCollMan(RecompContext* ctx);
undefined CreateFogColMan(RecompContext* ctx);
undefined SetInitFogColClassFromStageData(RecompContext* ctx);
undefined UpdateFogAnim(RecompContext* ctx);
undefined UpdateFogCol(RecompContext* ctx);
undefined SetFogColAvailableFlag(RecompContext* ctx);
undefined IsEnvelopeFogType(RecompContext* ctx);
undefined GetFogColMan(RecompContext* ctx);
undefined GetFogColClass(RecompContext* ctx);
undefined ForceFogColFlagEnvelope(RecompContext* ctx);
undefined getOutSideVectorXYZSquare(RecompContext* ctx);
undefined Undefined_Gap_0x7230C_0x72318(RecompContext* ctx);
undefined CheckCollisionColClass(RecompContext* ctx);
undefined GetGeoDispClass(RecompContext* ctx);
undefined CreateGeoDispObj(RecompContext* ctx);
undefined Undefined_Gap_0x724B0_0x724E8(RecompContext* ctx);
undefined CheckPositionInsideOfJudgeVolumeInfo(RecompContext* ctx);
undefined Undefined_Gap_0x7281C_0x72E60(RecompContext* ctx);
undefined ClipJudgeVolumeInfo(RecompContext* ctx);
undefined GetJudgeVolumeClass(RecompContext* ctx);
undefined InitJudgeVolumeClass(RecompContext* ctx);
undefined FlushJudgeVolumeClassImmediate(RecompContext* ctx);
undefined FlushJudgeVolumeObjImmediate(RecompContext* ctx);
undefined FlushJudgeVolumeClass(RecompContext* ctx);
undefined FlushJudgeVolumeObj(RecompContext* ctx);
undefined GetJudgeVolumeClassWorkSize(RecompContext* ctx);
undefined EntryJudgeVolumeClassObjectGroup(RecompContext* ctx);
undefined GetJudgeVolumeClassObjectGroup(RecompContext* ctx);
undefined GetJudgeVolumeClassObjectGroupById(RecompContext* ctx);
undefined CheckPositionInsideOfJudgeVolumeObject(RecompContext* ctx);
undefined CheckPositionInsideOfJudgeVolumeObjectByLabel(RecompContext* ctx);
undefined GetCenterPositionOfJudgeVolumeInfo(RecompContext* ctx);
undefined SetJudgeVolumeInfo(RecompContext* ctx);
undefined SearchJudgeVolumeByName(RecompContext* ctx);
undefined UpdateLayoutClassSimpleGeometry(RecompContext* ctx);
undefined UnparentLayoutObj(RecompContext* ctx);
undefined Undefined_Gap_0x74234_0x75860(RecompContext* ctx);
undefined InitAliasLayoutObj(RecompContext* ctx);
undefined FlushLayoutObj(RecompContext* ctx);
undefined FlushLayoutObjImmediate(RecompContext* ctx);
undefined GetLayoutObjChildWithName(RecompContext* ctx);
undefined SaveLayoutObjGroupAllGeo(RecompContext* ctx);
undefined SetLayoutObjAccessSwitch(RecompContext* ctx);
undefined Undefined_Gap_0x76210_0x76368(RecompContext* ctx);
undefined CreateLayoutObj(RecompContext* ctx);
undefined CreateLayoutObjVU0Secure(RecompContext* ctx);
undefined GetLayoutObjNum(RecompContext* ctx);
undefined GetLayoutDispObjNum(RecompContext* ctx);
undefined GetLayoutClass(RecompContext* ctx);
undefined SetLayoutUserClipFunc(RecompContext* ctx);
undefined InitLayoutObj(RecompContext* ctx);
undefined CreateAliasLayoutObj(RecompContext* ctx);
undefined GetLayoutObjWorkSize(RecompContext* ctx);
undefined FlushCollisionWork(RecompContext* ctx);
undefined SetLayoutObjSubDispFunc(RecompContext* ctx);
undefined ParentLayoutObj(RecompContext* ctx);
undefined ForceUnparentLayoutObj(RecompContext* ctx);
undefined ForceDeleteLayoutObjChildLink(RecompContext* ctx);
undefined ForceParentLayoutObj(RecompContext* ctx);
undefined AddLayoutObjSubLink(RecompContext* ctx);
undefined ForceUnparentLayoutObjChildLink(RecompContext* ctx);
undefined SetLayoutClassRootQuaternion(RecompContext* ctx);
undefined UpdateLayoutClassParentGeometry(RecompContext* ctx);
undefined GetLayoutClassObjectName(RecompContext* ctx);
undefined UpdateLayoutClassPastSimpleGeometry(RecompContext* ctx);
undefined UpdateLayoutClassParentSimpleGeometry(RecompContext* ctx);
undefined UpdateLayoutClassGeometry(RecompContext* ctx);
undefined UpdateLayoutClassPastGeometry(RecompContext* ctx);
undefined SetLayoutObjAccessSwitchThisObjOnly(RecompContext* ctx);
undefined GetLayoutClassWindGeometry(RecompContext* ctx);
undefined SetLayoutClassScaleElem(RecompContext* ctx);
undefined CheckLayoutObjChainExist(RecompContext* ctx);
undefined SetLayoutObjDebugResetFunc(RecompContext* ctx);
undefined CallLayoutObjDebugResetFunc(RecompContext* ctx);
undefined GetLayoutClassCollisionBoundaryInfo(RecompContext* ctx);
undefined SetLayoutObjCollisionEnableFlag(RecompContext* ctx);
undefined GetLayoutObjCollisionEnableFlag(RecompContext* ctx);
undefined SetLayoutClassCollisionWorkAdr(RecompContext* ctx);
undefined ChangeLayoutObjCollisionResourceAttribute(RecompContext* ctx);
undefined SaveLayoutObjGeo(RecompContext* ctx);
undefined GetLayoutRootMatrix(RecompContext* ctx);
undefined GetLayoutParentObj(RecompContext* ctx);
undefined getSeqNo(RecompContext* ctx);
undefined Undefined_Gap_0x781A4_0x781D8(RecompContext* ctx);
undefined GetAliasLayoutObjWorkSize(RecompContext* ctx);
undefined UpdateAliasLayoutObjClothGeometry(RecompContext* ctx);
undefined Undefined_Gap_0x7839C_0x795C8(RecompContext* ctx);
undefined ClipLayoutObjModel(RecompContext* ctx);
undefined Undefined_Gap_0x79750_0x79A80(RecompContext* ctx);
undefined CalcLightLayoutObj(RecompContext* ctx);
undefined Undefined_Gap_0x79CF0_0x7A000(RecompContext* ctx);
undefined DispDispObjGroupModel(RecompContext* ctx);
undefined SetVIF1MarkCallbackFunc(RecompContext* ctx);
undefined SetCameraResetSw(RecompContext* ctx);
undefined InitLayoutObjMatrix(RecompContext* ctx);
undefined DispLayoutObjModel(RecompContext* ctx);
undefined initSortDisplayObj(RecompContext* ctx);
undefined deleteSortLayoutObj(RecompContext* ctx);
undefined GetResetCameraFlagForDisplay(RecompContext* ctx);
undefined getSubObjDispSw(RecompContext* ctx);
undefined getMotionBlurSw(RecompContext* ctx);
undefined motionBlurTestType(RecompContext* ctx);
undefined SetLayoutDisplayFlag(RecompContext* ctx);
undefined GetAmbientBrightnessOfLayoutObject(RecompContext* ctx);
undefined Undefined_Gap_0x7A8F8_0x7A900(RecompContext* ctx);
undefined CreateLightColMan(RecompContext* ctx);
undefined LoopExecPreLightColMan(RecompContext* ctx);
undefined Undefined_Gap_0x7AC98_0x7AEA8(RecompContext* ctx);
undefined InitStageLightColMan(RecompContext* ctx);
undefined GetLightColMan(RecompContext* ctx);
undefined InitLightColMan(RecompContext* ctx);
undefined LoopExecAfterLightColMan(RecompContext* ctx);
undefined TaskExecLightColMan(RecompContext* ctx);
undefined SetCameraReverbFlag(RecompContext* ctx);
undefined SetGeoDispClassLightColMan(RecompContext* ctx);
undefined getColLightDebugSts(RecompContext* ctx);
undefined GetColLightDebugSts(RecompContext* ctx);
undefined Undefined_Gap_0x7B2C4_0x7B638(RecompContext* ctx);
undefined DeleteGameLight(RecompContext* ctx);
undefined UpdateClipGameLight(RecompContext* ctx);
undefined Undefined_Gap_0x7B894_0x7BA80(RecompContext* ctx);
undefined ExecGameLight(RecompContext* ctx);
undefined NewCreateGameLightClass(RecompContext* ctx);
undefined deleteGameLightObj(RecompContext* ctx);
undefined GetGameLightClass(RecompContext* ctx);
undefined SetGameLightAvailable(RecompContext* ctx);
undefined AddGaLightMan(RecompContext* ctx);
undefined ForceGameLightFlagEnvelope(RecompContext* ctx);
undefined IsEnvelopeGameLightType(RecompContext* ctx);
undefined UpdateGameLight(RecompContext* ctx);
undefined CalcColorParamGameLight(RecompContext* ctx);
undefined GameLightCalcOutSideParam(RecompContext* ctx);
undefined ForceDelGameLighObj(RecompContext* ctx);
undefined SetGameLightUserParam(RecompContext* ctx);
undefined SetGameLightUserFunc(RecompContext* ctx);
undefined InitGameLightClass(RecompContext* ctx);
undefined GameLightCalcImpact(RecompContext* ctx);
undefined Undefined_Gap_0x7C634_0x7CAC0(RecompContext* ctx);
undefined AddGlLightMan(RecompContext* ctx);
undefined DeleteGlobalLight(RecompContext* ctx);
undefined Undefined_Gap_0x7CDBC_0x7CF20(RecompContext* ctx);
undefined GlobalLightConsistencyWorkGrp(RecompContext* ctx);
undefined Undefined_Gap_0x7D098_0x7D460(RecompContext* ctx);
undefined ExecGlobalLightMan(RecompContext* ctx);
undefined GetGlobalLightClass(RecompContext* ctx);
undefined SetGlobalLightAvailable(RecompContext* ctx);
undefined deleteGlobalLightObj(RecompContext* ctx);
undefined ForceDelGlobalLighObj(RecompContext* ctx);
undefined GlobalLightCalcOutSideParam(RecompContext* ctx);
undefined ForceGlobalLightFlagEnvelope(RecompContext* ctx);
undefined IsEnvelopeGlobalLightType(RecompContext* ctx);
undefined SetColorParamAmbientLight(RecompContext* ctx);
undefined UpdateGlobalLightInRange(RecompContext* ctx);
undefined UpdateGlobalLightOutRange(RecompContext* ctx);
undefined UpdateGlobalLightAmbient(RecompContext* ctx);
undefined UpdateGlobalLightDistant(RecompContext* ctx);
undefined IsEnvelopeDistantLightType(RecompContext* ctx);
undefined globalLightCalcLightNum(RecompContext* ctx);
undefined CalcColorParamDistantLight(RecompContext* ctx);
undefined CalcColorParamAmbientLight(RecompContext* ctx);
undefined SetWorkFromGlobalLight(RecompContext* ctx);
undefined GetNextWorkLightClass(RecompContext* ctx);
undefined GetImpactWorstWorkLightClass(RecompContext* ctx);
undefined GetDirColorFromWorkLight(RecompContext* ctx);
undefined CreateLightObj(RecompContext* ctx);
undefined GetLightClass(RecompContext* ctx);
undefined CreateAmbientLightObj(RecompContext* ctx);
undefined Undefined_Gap_0x7E1B4_0x7E1D0(RecompContext* ctx);
undefined InitLightObj(RecompContext* ctx);
undefined GetAmbientLightClass(RecompContext* ctx);
undefined Undefined_Gap_0x7E25C_0x7E268(RecompContext* ctx);
undefined InitAmbientLightObj(RecompContext* ctx);
undefined Undefined_Gap_0x7E298_0x7E588(RecompContext* ctx);
undefined ExecLwsDemoOrientManagerObj(RecompContext* ctx);
undefined InitLwsDemoOrientManagerObj(RecompContext* ctx);
undefined CreateLwsDemoOrientManagerObj(RecompContext* ctx);
undefined SetLwoDemoOrientManagerObjCutFinishFlag(RecompContext* ctx);
undefined FlushLwsDemoOrientManagerObj(RecompContext* ctx);
undefined Undefined_Gap_0x7E8AC_0x7E968(RecompContext* ctx);
undefined GetLwsDemoOrientManagerObjWorkSize(RecompContext* ctx);
undefined Undefined_Gap_0x7E97C_0x80700(RecompContext* ctx);
undefined GetLwsOrientWorkSize(RecompContext* ctx);
undefined Undefined_Gap_0x80828_0x80C90(RecompContext* ctx);
undefined InitLwsOrientObj(RecompContext* ctx);
undefined IsLwsOrientRootNode(RecompContext* ctx);
undefined GetLwsOrientNodeNum(RecompContext* ctx);
undefined GetLwsOrientInitMotionPtr(RecompContext* ctx);
undefined GetMotKToMotP(RecompContext* ctx);
undefined ExecScriptLwsOrientClass(RecompContext* ctx);
undefined Undefined_Gap_0x81160_0x814F8(RecompContext* ctx);
undefined loadCdNmoFile(RecompContext* ctx);
undefined loadCdNsoFile(RecompContext* ctx);
undefined loadCdNtoFile(RecompContext* ctx);
undefined loadCdColResFile(RecompContext* ctx);
undefined initAnimDefSegOneElement(RecompContext* ctx);
undefined Undefined_Gap_0x81CCC_0x81FF0(RecompContext* ctx);
undefined setLayoutClassInitParam(RecompContext* ctx);
undefined initLayoutObj(RecompContext* ctx);
undefined initLayoutObjVU0Secure(RecompContext* ctx);
undefined Undefined_Gap_0x827FC_0x82AE8(RecompContext* ctx);
undefined initScriptLayoutObj(RecompContext* ctx);
undefined initAliasLayoutObj(RecompContext* ctx);
undefined initScriptCharObj(RecompContext* ctx);
undefined initScriptLwsorientObj(RecompContext* ctx);
undefined Undefined_Gap_0x84800_0x855D8(RecompContext* ctx);
undefined GetLayoutObjGroup(RecompContext* ctx);
undefined GetLayoutDispObjGroup(RecompContext* ctx);
undefined InitObjectManagerResourceInfo(RecompContext* ctx);
undefined initSkelObjResource(RecompContext* ctx);
undefined initDispObjResource(RecompContext* ctx);
undefined initShadowObjResource(RecompContext* ctx);
undefined initColObjResource(RecompContext* ctx);
undefined initAnimationObjResource(RecompContext* ctx);
undefined initClothObjResource(RecompContext* ctx);
undefined GetSkeletonFocusNode(RecompContext* ctx);
undefined GetSkeletonFocusNodeDirect(RecompContext* ctx);
undefined SearchLayoutObjDefByName(RecompContext* ctx);
undefined SearchScriptLayoutObjDefByName(RecompContext* ctx);
undefined SearchLwsOrientObjDefByName(RecompContext* ctx);
undefined initScriptAnimationObj(RecompContext* ctx);
undefined initLightObj(RecompContext* ctx);
undefined initScriptSpriteObj(RecompContext* ctx);
undefined initScriptSpriteMenuObj(RecompContext* ctx);
undefined initParticleObject(RecompContext* ctx);
undefined initAmbientLightObj(RecompContext* ctx);
undefined InitBinarySize(RecompContext* ctx);
undefined createBinaryMemoryInfoWindow(RecompContext* ctx);
undefined AddObjectManagerCollisionWorkSizeBoss(RecompContext* ctx);
undefined AddObjectManagerCollisionWorkSizeStage(RecompContext* ctx);
undefined AddObjectManagerSheetWorkSize(RecompContext* ctx);
undefined AddObjectManagerGameObjectSize(RecompContext* ctx);
undefined AddObjectManagerSeamlessWorkSize(RecompContext* ctx);
undefined getObjInitMessageDebugSw(RecompContext* ctx);
undefined GetAmbientLightObjGroup(RecompContext* ctx);
undefined GetModelObjGroup(RecompContext* ctx);
undefined skelSegInit(RecompContext* ctx);
undefined skelSegDel(RecompContext* ctx);
undefined debugCreateAnimObjSegmentDisp(RecompContext* ctx);
undefined debugDeleteAnimObjSegmentDisp(RecompContext* ctx);
undefined debugCreateAnimObjSegmentDefDisp(RecompContext* ctx);
undefined debugDeleteAnimObjSegmentDefDisp(RecompContext* ctx);
undefined loadCdMotionFile(RecompContext* ctx);
undefined unloadCdMotionFile(RecompContext* ctx);
undefined garbageNmoCallBack(RecompContext* ctx);
undefined unloadCdNmoFile(RecompContext* ctx);
undefined garbageNsoCallBack(RecompContext* ctx);
undefined unloadCdNsoFile(RecompContext* ctx);
undefined garbageNtoCallBack(RecompContext* ctx);
undefined unloadCdNtoFile(RecompContext* ctx);
undefined loadCdWinTexFile(RecompContext* ctx);
undefined unloadCdWinTexFile(RecompContext* ctx);
undefined loadCdNfbFile(RecompContext* ctx);
undefined unloadCdNfbFile(RecompContext* ctx);
undefined loadCdXffFile(RecompContext* ctx);
undefined unloadCdXffFile(RecompContext* ctx);
undefined garbageColResCallBack(RecompContext* ctx);
undefined unloadCdColResFile(RecompContext* ctx);
undefined initAnimDefSeg(RecompContext* ctx);
undefined deleteAnimDefSeg(RecompContext* ctx);
undefined initLwsOriDefSeg(RecompContext* ctx);
undefined deleteLwsOriDefSeg(RecompContext* ctx);
undefined EntryObjectManagerCollisionGroup(RecompContext* ctx);
undefined EntryInterestGroup(RecompContext* ctx);
undefined deleteAmbientLightObj(RecompContext* ctx);
undefined getMemoryInfoMode(RecompContext* ctx);
undefined getMemoryInfoLightSw(RecompContext* ctx);
undefined objectmanager_mallocerrorfunc(RecompContext* ctx);
undefined GetScriptClass(RecompContext* ctx);
undefined initScriptObj(RecompContext* ctx);
undefined Undefined_Gap_0x87370_0x874C0(RecompContext* ctx);
undefined initScriptSystem(RecompContext* ctx);
undefined createScriptObj(RecompContext* ctx);
undefined flushScriptObj(RecompContext* ctx);
undefined execScript(RecompContext* ctx);
undefined flushScriptObjImmediate(RecompContext* ctx);
undefined GetScriptObjWorkSize(RecompContext* ctx);
undefined SetScriptObjDeleteCallBackFunc(RecompContext* ctx);
undefined SetScriptObjDeleteCallBackFunc2(RecompContext* ctx);
undefined SetScriptObjFinishCallBackFunc(RecompContext* ctx);
undefined GetScriptPriorityGroup(RecompContext* ctx);
undefined setScriptObjArgument(RecompContext* ctx);
undefined Undefined_Gap_0x87878_0x879B0(RecompContext* ctx);
undefined getStackViewFlag(RecompContext* ctx);
undefined scriptIntrSignal(RecompContext* ctx);
undefined scriptIntrEntryJump(RecompContext* ctx);
undefined scriptIntrDeleteJump(RecompContext* ctx);
undefined scriptIntrAllDeleteJump(RecompContext* ctx);
undefined scriptIntrEntryChildThread(RecompContext* ctx);
undefined scriptIntrDeleteChildThread(RecompContext* ctx);
undefined scriptIntrAllDeleteSubThread(RecompContext* ctx);
undefined scriptIntrSegInit(RecompContext* ctx);
undefined scriptIntrSegDelete(RecompContext* ctx);
undefined Undefined_Gap_0x87DB4_0x88070(RecompContext* ctx);
undefined SetScriptAnimationObjAccessSwitch(RecompContext* ctx);
undefined Undefined_Gap_0x8821C_0x88330(RecompContext* ctx);
undefined StartAnimationSubObjInfinitePart(RecompContext* ctx);
undefined Undefined_Gap_0x8863C_0x88968(RecompContext* ctx);
undefined PlayScriptAnimationSequence(RecompContext* ctx);
undefined updateObjectGeo(RecompContext* ctx);
undefined updateParticleGeo(RecompContext* ctx);
undefined Undefined_Gap_0x895A0_0x89C08(RecompContext* ctx);
undefined updateWindGeo(RecompContext* ctx);
undefined updateWindBoxGeo(RecompContext* ctx);
undefined updateSEGeo(RecompContext* ctx);
undefined Undefined_Gap_0x8A670_0x8B530(RecompContext* ctx);
undefined CreateScriptAnimationObj(RecompContext* ctx);
undefined CreateScriptAnimationSequence(RecompContext* ctx);
undefined kickLWS(RecompContext* ctx);
undefined Undefined_Gap_0x8BDC8_0x8C158(RecompContext* ctx);
undefined updateDamageGeo(RecompContext* ctx);
undefined Undefined_Gap_0x8C588_0x8D1F8(RecompContext* ctx);
undefined DebugDispVolumeShapeColor(RecompContext* ctx);
undefined updateVolumeShapePQSGeo(RecompContext* ctx);
undefined Undefined_Gap_0x8D694_0x8EE68(RecompContext* ctx);
undefined ExecObjectAnimation(RecompContext* ctx);
undefined ExecMotionSyncAnimation(RecompContext* ctx);
undefined SetScriptAnimationGlobalBaseInfo(RecompContext* ctx);
undefined GetScriptAnimationGlobalBaseInfo(RecompContext* ctx);
undefined GetScriptAnimationWindParam(RecompContext* ctx);
undefined CopyScriptAnimationWindParam(RecompContext* ctx);
undefined CopyScriptAnimationWindGeometryPointer(RecompContext* ctx);
undefined getLWSDebugMode(RecompContext* ctx);
undefined GetScriptAnimationClass(RecompContext* ctx);
undefined SetScriptAnimationSinglePlay(RecompContext* ctx);
undefined SetScriptAnimationObjGeometryOverrideCallBackFunc(RecompContext* ctx);
undefined SetScriptAnimationObjChildEntryGroup(RecompContext* ctx);
undefined updateLayoutGeo(RecompContext* ctx);
undefined updateCamVibGeo(RecompContext* ctx);
undefined updateLWSTriggerGeo(RecompContext* ctx);
undefined updateLightGeo(RecompContext* ctx);
undefined updateParticleDissolveGeo(RecompContext* ctx);
undefined update_camera_region_geometry(RecompContext* ctx);
undefined kickEffect(RecompContext* ctx);
undefined kickParticle(RecompContext* ctx);
undefined particleOnOff(RecompContext* ctx);
undefined GetScriptAnimationObjChildObjWithName(RecompContext* ctx);
undefined updateGameLightGeo(RecompContext* ctx);
undefined updateClipGameLightGeo(RecompContext* ctx);
undefined IsNonISysObjTypeRes(RecompContext* ctx);
undefined SubCallDeleteFuncNonISysObjTypeRes(RecompContext* ctx);
undefined EntryScriptAnimationObjJudgeVolumeGroup(RecompContext* ctx);
undefined ScriptAnimationObjCheckPositionInsideOfJudgeVolumeObject(RecompContext* ctx);
undefined ScriptAnimationObjOfJudgeVolumeObject(RecompContext* ctx);
undefined GetScriptAnimationSubObjectWithTypeFiltering(RecompContext* ctx);
undefined SetScariptAnimationObjMotSyncSlotId(RecompContext* ctx);
undefined DebugDispVolumeShape(RecompContext* ctx);
undefined DebugDispVolumeAll(RecompContext* ctx);
undefined DebugDispVolumeAllColor(RecompContext* ctx);
undefined DeleteAllActiveScriptAnimationObj(RecompContext* ctx);
undefined GetScriptAnimationObjResourcePlayTime(RecompContext* ctx);
undefined Undefined_Gap_0x90BE4_0x90E68(RecompContext* ctx);
undefined getLWSDebugMode2(RecompContext* ctx);
undefined getExternalLWSFlag(RecompContext* ctx);
undefined Undefined_Gap_0x90E84_0x91520(RecompContext* ctx);
undefined GetMotionResourceTime(RecompContext* ctx);
undefined UpdateOutRangeLightGeo(RecompContext* ctx);
undefined Undefined_Gap_0x9164C_0x916B0(RecompContext* ctx);
undefined ReparentChildObjects(RecompContext* ctx);
undefined CreateScriptCharObj(RecompContext* ctx);
undefined GetScriptCharacterClass(RecompContext* ctx);
undefined FlushScriptCharObj(RecompContext* ctx);
undefined InitScriptCharObj(RecompContext* ctx);
undefined SetScriptCharDefaultScriptFunc(RecompContext* ctx);
undefined SetScriptCharacterObjReleaseCallBackFunc(RecompContext* ctx);
undefined Undefined_Gap_0x919CC_0x91A88(RecompContext* ctx);
undefined GetScriptCharObjWorkSize(RecompContext* ctx);
undefined CreateScriptLayoutObj(RecompContext* ctx);
undefined CreateAliasScriptLayoutObj(RecompContext* ctx);
undefined FlushScriptLayoutObj(RecompContext* ctx);
undefined GetScriptLayoutClass(RecompContext* ctx);
undefined SetScriptLayoutObjLetterProcMode(RecompContext* ctx);
undefined ExecScriptLayoutObj(RecompContext* ctx);
undefined InitScriptLayoutObj(RecompContext* ctx);
undefined GetScriptLayoutObjWorkSize(RecompContext* ctx);
undefined FlushScriptLayoutObjImmediate(RecompContext* ctx);
undefined Undefined_Gap_0x91F88_0x92000(RecompContext* ctx);
undefined InitAliasScriptLayoutObj(RecompContext* ctx);
undefined Undefined_Gap_0x920B4_0x92240(RecompContext* ctx);
undefined CreateScriptLwsOri(RecompContext* ctx);
undefined Undefined_Gap_0x92350_0x925A0(RecompContext* ctx);
undefined GetScrLwsOriClass(RecompContext* ctx);
undefined FlushScriptLwsOri(RecompContext* ctx);
undefined SetScrLwsOriObjReleaseCallBackFunc(RecompContext* ctx);
undefined InitScriptLwsOrientObj(RecompContext* ctx);
undefined GetScriptLwsOrientObjWorkSize(RecompContext* ctx);
undefined SetScriptLwsOrientObjDefaultScriptFunc(RecompContext* ctx);
undefined CreateScriptLwsOrientDefObj(RecompContext* ctx);
undefined GetScriptLwsOrientDefinfo(RecompContext* ctx);
undefined Undefined_Gap_0x927E4_0x92870(RecompContext* ctx);
undefined DeleteScriptLwsOrientObjSubObjects(RecompContext* ctx);
undefined Undefined_Gap_0x92950_0x92958(RecompContext* ctx);
undefined AddSortObj(RecompContext* ctx);
undefined GetNextSortObj(RecompContext* ctx);
undefined GetFirstSortObj(RecompContext* ctx);
undefined InitSortObj(RecompContext* ctx);
undefined ClearSortList(RecompContext* ctx);
undefined CreateSortList(RecompContext* ctx);
undefined DeleteSortList(RecompContext* ctx);
undefined Undefined_Gap_0x92CAC_0x93A08(RecompContext* ctx);
undefined SpriteMenuIsFadeCheckSelectLayer(RecompContext* ctx);
undefined Undefined_Gap_0x93B00_0x94AC8(RecompContext* ctx);
undefined SpriteMenuSetSpriteObjectParam(RecompContext* ctx);
undefined Undefined_Gap_0x94D08_0x966D0(RecompContext* ctx);
undefined GetSpriteMenuClass(RecompContext* ctx);
undefined GetScriptSpriteMenuClass(RecompContext* ctx);
undefined SpriteMenuSetPadEventCallback(RecompContext* ctx);
undefined SpriteSubMenuSetPadEventCallback(RecompContext* ctx);
undefined SpriteMenuSetDispFlag(RecompContext* ctx);
undefined SpriteMenuSetDispFlagNoFade(RecompContext* ctx);
undefined SpriteMenuSetDispFlagByHash(RecompContext* ctx);
undefined SpriteMenuSetDispFlagAll(RecompContext* ctx);
undefined SpriteMenuSetMenuDispFlag(RecompContext* ctx);
undefined SpriteMenuGetSpriteMenuClassParam(RecompContext* ctx);
undefined SpriteMenuSetLayer(RecompContext* ctx);
undefined SpriteMenuSetLayerPriority(RecompContext* ctx);
undefined SpriteMenuSetLayerPriorityAllLayer(RecompContext* ctx);
undefined SpriteMenuGetLayerStatus(RecompContext* ctx);
undefined SpriteMenuGetLayerByHash(RecompContext* ctx);
undefined SpriteMenuGetLayerNoByHash(RecompContext* ctx);
undefined SpriteMenuGetPartsParamByHash(RecompContext* ctx);
undefined SpriteMenuGetPartsParamByHashStr(RecompContext* ctx);
undefined SpriteMenuGetPartsDefByHash(RecompContext* ctx);
undefined SpriteMenuGetPartsDefByHashStr(RecompContext* ctx);
undefined SpriteMenuGetPartsDefValueByHash(RecompContext* ctx);
undefined SpriteMenuGetPartsDefValueByHashStr(RecompContext* ctx);
undefined SpriteMenuSetPartsDefValueByHash(RecompContext* ctx);
undefined SpriteMenuSetPartsDefValueByHashStr(RecompContext* ctx);
undefined SpriteMenuSetPartsDefValueByHashStrWithoutErrorCheck(RecompContext* ctx);
undefined SpriteMenuSetSpriteMenuSoundSwitchByHash(RecompContext* ctx);
undefined SpriteMenuSetSpriteMenuSoundSwitchByHashStr(RecompContext* ctx);
undefined SpriteMenuGetSelectLayer(RecompContext* ctx);
undefined SpriteMenuGetPadEvent(RecompContext* ctx);
undefined SpriteMenuGetProgressiveOffset(RecompContext* ctx);
undefined SpriteMenuGetMenuIdByPartsId(RecompContext* ctx);
undefined SpriteMenuGetMenuIdByHash(RecompContext* ctx);
undefined SpriteMenuGetMenuIdByHashStr(RecompContext* ctx);
undefined SpriteMenuGetSelectMenuIdBySpriteMenuClass(RecompContext* ctx);
undefined SpriteMenuGetSelectMenuId(RecompContext* ctx);
undefined SpriteMenuSetSelectMenuId(RecompContext* ctx);
undefined SpriteMenuGetSelectSubMenuId(RecompContext* ctx);
undefined SpriteMenuSetSelectSubMenuId(RecompContext* ctx);
undefined SpriteMenuGetSelectMenuMode(RecompContext* ctx);
undefined SpriteMenuSetSelectMenuMode(RecompContext* ctx);
undefined SpriteMenuSetDefaultSelectMenu(RecompContext* ctx);
undefined SpriteMenuSetSliderValue(RecompContext* ctx);
undefined SpriteMenuSetSliderValueByHash(RecompContext* ctx);
undefined SpriteMenuSetSliderValueByHashStr(RecompContext* ctx);
undefined SpriteMenuSetCheckBoxByPartsId(RecompContext* ctx);
undefined SpriteMenuSetCheckBoxByHash(RecompContext* ctx);
undefined SpriteMenuSetNumPartsFormatByHash(RecompContext* ctx);
undefined SpriteMenuSetNumPartsFormatByHashStr(RecompContext* ctx);
undefined SpriteMenuSetNumPartsFormatByPartsParam(RecompContext* ctx);
undefined SpriteMenuSetAnimParam(RecompContext* ctx);
undefined SpriteMenuIsFadeCheckAllLayer(RecompContext* ctx);
undefined SpriteMenuIsFadeCheckLayer(RecompContext* ctx);
undefined SpriteMenuGetFadeByLayer(RecompContext* ctx);
undefined DeleteScriptSpriteMenuObj(RecompContext* ctx);
undefined CreateScriptSpriteMenuObj(RecompContext* ctx);
undefined setDefaultMenuControlButton(RecompContext* ctx);
undefined spriteMenuCheckSelectPushPad(RecompContext* ctx);
undefined spriteMenuObjPadChangeHorse(RecompContext* ctx);
undefined Undefined_Gap_0x98910_0x98D50(RecompContext* ctx);
undefined InitSpriteObj(RecompContext* ctx);
undefined GetSpriteClass(RecompContext* ctx);
undefined FlushSpriteObj(RecompContext* ctx);
undefined DeleteScriptSpriteObj(RecompContext* ctx);
undefined GetScriptSpriteClass(RecompContext* ctx);
undefined GetSpriteObjWorkSize(RecompContext* ctx);
undefined GetScriptSpriteObjWorkSize(RecompContext* ctx);
undefined CreateScriptSpriteObj(RecompContext* ctx);
undefined ExecScriptSpriteObj(RecompContext* ctx);
undefined Undefined_Gap_0x990E0_0x991C8(RecompContext* ctx);
undefined GetSubLinkClass(RecompContext* ctx);
undefined CreateSubLinkObj(RecompContext* ctx);
undefined SetSubLinkObjDeleteFuncInfo(RecompContext* ctx);
undefined DeleteSubLinkObjLink(RecompContext* ctx);
undefined CreateSubLinkObjByGeometryPointer(RecompContext* ctx);
undefined Undefined_Gap_0x99438_0x994B0(RecompContext* ctx);
undefined InitSubLinkObj(RecompContext* ctx);
undefined ViewIntervalClip(RecompContext* ctx);
undefined InitViewIntervalClip(RecompContext* ctx);
undefined FlushRequestViewIntervalClip(RecompContext* ctx);
undefined getMicroCodeAddress(RecompContext* ctx);
undefined transMicroCode(RecompContext* ctx);
undefined transMicroCodeWithFlush(RecompContext* ctx);
undefined resetMicroCodeManager(RecompContext* ctx);
undefined Undefined_Gap_0x999A4_0x9D3E0(RecompContext* ctx);
undefined AddCollisionDB(RecompContext* ctx);
undefined GetCollisionDB(RecompContext* ctx);
undefined Undefined_Gap_0x9D8BC_0x9DC80(RecompContext* ctx);
undefined GetLayoutObjCollisionDBWithTargetAttributeJudgeFunc(RecompContext* ctx);
undefined getLayoutClassCollisionIndepSurfBoundary(RecompContext* ctx);
undefined GetCollisionDBSurfBoundary(RecompContext* ctx);
undefined Undefined_Gap_0x9E2A0_0x9E538(RecompContext* ctx);
undefined GetCollisionDBPlaneNormalZQuaternion(RecompContext* ctx);
undefined GetCollisionEdgeHangQuaternion(RecompContext* ctx);
undefined GetCollisionEdgePointerGlobalVerticalPlane(RecompContext* ctx);
undefined GetCollisionEdgePointerHVPlane(RecompContext* ctx);
undefined GetCollisionEdgePointerOtherSideDBData(RecompContext* ctx);
undefined GetCollisionDBEdgeInfoNext3(RecompContext* ctx);
undefined GetCollisionDBNext3(RecompContext* ctx);
undefined GetCollisionDBNext3Direct(RecompContext* ctx);
undefined GetCollisionDBEdgeInfo(RecompContext* ctx);
undefined GetGeometryPointerWithCollisionDBDataGlobalPoint(RecompContext* ctx);
undefined GetGeometryPointerWithCollisionEdgeGlobalPoint(RecompContext* ctx);
undefined ClipCollisionDB(RecompContext* ctx);
undefined Undefined_Gap_0xA0DAC_0xA3A28(RecompContext* ctx);
undefined ClipCollisionFinderWithKeep4DSlopeLimit(RecompContext* ctx);
undefined ClipCollisionFinderWithKeep4DSlopeLimitCB(RecompContext* ctx);
undefined Undefined_Gap_0xA3EC8_0xA5118(RecompContext* ctx);
undefined RelocateCollisionWork(RecompContext* ctx);
undefined InitCollisionWork(RecompContext* ctx);
undefined GetCollisionWorkSize(RecompContext* ctx);
undefined GetCollisionCameraAttributeShareArrayNumber(RecompContext* ctx);
undefined GetCollisionCameraAttributeShareArray(RecompContext* ctx);
undefined Undefined_Gap_0xA59F0_0xA6570(RecompContext* ctx);
undefined DebugDispCollisionDBEdge(RecompContext* ctx);
undefined DebugDispCollisionDBEdgeAngle(RecompContext* ctx);
undefined DebugDispCollisionEdge(RecompContext* ctx);
undefined DebugDispCollisionFinder(RecompContext* ctx);
undefined DebugDispManualEdgeCollisionDB(RecompContext* ctx);
undefined DebugDispCollisionFinderKeep(RecompContext* ctx);
undefined GetRayVolumeUncollisionPoint(RecompContext* ctx);
undefined Undefined_Gap_0xA80B8_0xA8258(RecompContext* ctx);
undefined CollisionPlaneJudgeCallbackParticle(RecompContext* ctx);
undefined CollisionPlaneJudgeCallbackArrow(RecompContext* ctx);
undefined CollisionPlaneJudgeCallbackCameraMove(RecompContext* ctx);
undefined CollisionPlaneJudgeCallbackCameraVisibility(RecompContext* ctx);
undefined CollisionPlaneJudgeCallbackCameraLeave(RecompContext* ctx);
undefined ClipEdgeLinkDBFinder(RecompContext* ctx);
undefined ConstructorCollisionPoint(RecompContext* ctx);
undefined ConstructorCollisionDynamics(RecompContext* ctx);
undefined CopyCollisionPoint(RecompContext* ctx);
undefined CopyCollisionDynamics(RecompContext* ctx);
undefined FilterCopyCollisionDynamics(RecompContext* ctx);
undefined ConvertFromCollisionPointToDynamics(RecompContext* ctx);
undefined ResetCollisionDebug(RecompContext* ctx);
undefined DebugDispCollisionDB(RecompContext* ctx);
undefined DebugDispCollisionDBShine(RecompContext* ctx);
undefined dispVuCollisionDB(RecompContext* ctx);
undefined DebugDispManualEdgeCollisionFinder(RecompContext* ctx);
undefined _CalcCollisionMultiDepSurfBoundary(RecompContext* ctx);
undefined FlushCollisionWorkByWorkStruct(RecompContext* ctx);
undefined ReleaseCollisionWork(RecompContext* ctx);
undefined FlushCollisionWorkImmediate(RecompContext* ctx);
undefined Check_InVariableXZSurfJudgeFunc_LowerSurface(RecompContext* ctx);
undefined ClipCollisionVariableXZSurfaceCB(RecompContext* ctx);
undefined ClipCollisionFinderWithVariableKeepCB(RecompContext* ctx);
undefined ClipCollisionFinderWithVariableKeep4DCB(RecompContext* ctx);
undefined GetCollisionDBCallBack(RecompContext* ctx);
undefined AddCollisionDBCallBack(RecompContext* ctx);
undefined GetCollisionDBCurrentPointOnLastPlane(RecompContext* ctx);
undefined GetCollisionDBVertexPoint(RecompContext* ctx);
undefined GetCollisionDBRegion(RecompContext* ctx);
undefined GetCollisionDBPositionWithST(RecompContext* ctx);
undefined GetCollisionDBPositionWithNodeLocalPos(RecompContext* ctx);
undefined GetCollisionDBQuaternion(RecompContext* ctx);
undefined GetCollisionDBOriginQuatPos(RecompContext* ctx);
undefined GetCollisionDBVectorPlane(RecompContext* ctx);
undefined GetCollisionDBPlane(RecompContext* ctx);
undefined GetCollisionDBAttribute(RecompContext* ctx);
undefined GetCollisionDBAttributeAdr(RecompContext* ctx);
undefined ClipCollisionDBDoubleSide(RecompContext* ctx);
undefined ClipCollisionFinderCallBack(RecompContext* ctx);
undefined ClipCollisionFinder(RecompContext* ctx);
undefined ClipCollisionFinder4D(RecompContext* ctx);
undefined ClipCollisionFinderWithKeep(RecompContext* ctx);
undefined ClipCollisionFinderWithKeep4D(RecompContext* ctx);
undefined NippingCheckCollisionFindetWithKeep4D(RecompContext* ctx);
undefined ClipCollisionFinderWithKeep_VWallOnly(RecompContext* ctx);
undefined ClipCollisionFinderWithKeepSlopeLimit(RecompContext* ctx);
undefined ClipCollisionFinderWithKeepSlopeLimitCB(RecompContext* ctx);
undefined ClipCollisionFinderFarPlane(RecompContext* ctx);
undefined ClipCollisionFinderFarPlane4D(RecompContext* ctx);
undefined ClipCollisionFinderFarPlaneWithKeep(RecompContext* ctx);
undefined ClipCollisionFinderFarPlaneWithKeep4D(RecompContext* ctx);
undefined SlideCollisionFinder4D(RecompContext* ctx);
undefined SlideCollisionFinder4DCB(RecompContext* ctx);
undefined ClipCollisionVariableXZSurface(RecompContext* ctx);
undefined ClipCollisionVariableXZSurfaceNoBottomCheck(RecompContext* ctx);
undefined CheckUnderVariableXZSurface(RecompContext* ctx);
undefined GetWaterSurfacePositionY(RecompContext* ctx);
undefined GetWaterSurfacePositionYExtend(RecompContext* ctx);
undefined IsWaterSurfaceExistAround(RecompContext* ctx);
undefined GetCollisionEdgePointerVertexPoint(RecompContext* ctx);
undefined GetCollisionEdgePointerVertexPoint3(RecompContext* ctx);
undefined GetCollisionEdgePointerOtherSideCollisionEdge(RecompContext* ctx);
undefined GetCollisionDBEdgeVertexPoint(RecompContext* ctx);
undefined GetCollisionDBEdgeVertexPoint3(RecompContext* ctx);
undefined CopyCollisionEdgePointer(RecompContext* ctx);
undefined CopyCollisionEdge(RecompContext* ctx);
undefined GetCollisionEdgePositionWithS(RecompContext* ctx);
undefined MakeCollisionEdgePointer(RecompContext* ctx);
undefined GetCollisionVariableXZSurfPosition(RecompContext* ctx);
undefined IsClusterCollision(RecompContext* ctx);
undefined MakeGeometryPointerCollisionInfo(RecompContext* ctx);
undefined MakeGeometryPointerCollisionEdgeInfo(RecompContext* ctx);
undefined GetGeometryPointerCollisionSurfSTPosition(RecompContext* ctx);
undefined GetCollisionDBOneObjCallBack(RecompContext* ctx);
undefined GetCollisionDBGroupCallBack(RecompContext* ctx);
undefined GetCollisionDBLastPointOnCurrentPlane(RecompContext* ctx);
undefined ChangeCollisionResourceAttribute(RecompContext* ctx);
undefined GetCollisionResource(RecompContext* ctx);
undefined GetRayVolumeUncollisionPointForCamera(RecompContext* ctx);
undefined CollisionObjectJudgeCallbackExceptOneObj(RecompContext* ctx);
undefined CollisionObjectJudgeCallbackExceptDescendOneObj(RecompContext* ctx);
undefined ConstructorCollisionObjectJudgeCallbackData(RecompContext* ctx);
undefined CollisionObjectJudgeCallbackExceptPluralObj(RecompContext* ctx);
undefined CollisionObjectJudgeCallbackExceptDescendPluralObj(RecompContext* ctx);
undefined DebugDispCollisionDBColor(RecompContext* ctx);
undefined CheckCollisionInsideOfObjectBoundary(RecompContext* ctx);
undefined getBossDBInfo(RecompContext* ctx);
undefined getVolumeCollisionDebugMode(RecompContext* ctx);
undefined getCollisionDebugGraphMode(RecompContext* ctx);
undefined getCollisionVirtualWallDispFlag(RecompContext* ctx);
undefined Undefined_Gap_0xADA14_0xADDA0(RecompContext* ctx);
undefined GetColMultiDepVtxInfoVertexNormal(RecompContext* ctx);
undefined GetColMultiDepVtxInfoVertexNormalWork(RecompContext* ctx);
undefined iasmCalcCollisionMultiDepSurfBoundarySub(RecompContext* ctx);
undefined CalcCollisionMultiDepSurfBoundary(RecompContext* ctx);
undefined SetColDebug(RecompContext* ctx);
undefined Undefined_Gap_0xADF8C_0xAE148(RecompContext* ctx);
undefined GetCollisionDBNextSurfLinkComp(RecompContext* ctx);
undefined GetCollisionDBNextSurfLink(RecompContext* ctx);
undefined MakeCollisionPointCollisionInfo(RecompContext* ctx);
undefined MakeGeometryPointerGlobalInfo(RecompContext* ctx);
undefined GetSTPositionOfCollisionDB(RecompContext* ctx);
undefined MakeCollisionPointGlobalInfo(RecompContext* ctx);
undefined Undefined_Gap_0xAE5E0_0xAE770(RecompContext* ctx);
undefined GetCollisionDynamicsProjectionFloatPosition(RecompContext* ctx);
undefined Undefined_Gap_0xAE800_0xAE828(RecompContext* ctx);
undefined objfilter(RecompContext* ctx);
undefined FlushCollisionEdgeLinkDBVWallFinder(RecompContext* ctx);
undefined GetCollisionEdgeLinkDBWorkSize(RecompContext* ctx);
undefined InitCollisionEdgeLinkDB(RecompContext* ctx);
undefined ReleaseCollisionEdgeLinkDB(RecompContext* ctx);
undefined GetCollisionEdgeLinkDBVWallFinder(RecompContext* ctx);
undefined ReconstructCollisionEdgeLinkDBVWallFinder(RecompContext* ctx);
undefined SetCollisionEdgeLinkDBFinderVWallDirectionStatus(RecompContext* ctx);
undefined SetCollisionEdgeLinkDBFinderCollectStatus(RecompContext* ctx);
undefined InitializeCollisionFinder(RecompContext* ctx);
undefined FlushCollisionFinder(RecompContext* ctx);
undefined InitCollisionFinder(RecompContext* ctx);
undefined InitCollisionFinderWithRelyNumber(RecompContext* ctx);
undefined EntryCollisionFinder(RecompContext* ctx);
undefined DeleteCollisionFinder(RecompContext* ctx);
undefined GetCollisionFinderWorkSize(RecompContext* ctx);
undefined CopyCollisionFinder(RecompContext* ctx);
undefined ReleaseCollisionFinder(RecompContext* ctx);
undefined CheckCollisionFinderAlive(RecompContext* ctx);
undefined CheckCollisionFinderExistData(RecompContext* ctx);
undefined DebugSetCollisionWideAreaSearchGroup(RecompContext* ctx);
undefined InitCollisionWideAreaSearchInfo(RecompContext* ctx);
undefined GetCollisionWideAreaSearch(RecompContext* ctx);
undefined RequestCollisionWideAreaSearch(RecompContext* ctx);
undefined CancelRequestCollisionWideAreaSearch(RecompContext* ctx);
undefined DebugTestWideAreaSearch(RecompContext* ctx);
undefined Undefined_Gap_0xAF3C4_0xB14B8(RecompContext* ctx);
undefined CheckCollisionInsideOfSurfaceXZ(RecompContext* ctx);
undefined ClipCollisionDirectCallBackOneObj(RecompContext* ctx);
undefined ClipCollisionDirectCallBack(RecompContext* ctx);
undefined ClipCollisionDirectCallBackObjAry(RecompContext* ctx);
undefined ClipCollisionDirect(RecompContext* ctx);
undefined ClipCollisionDirectCallBackObjAryDoubleSide(RecompContext* ctx);
undefined ClipCollisionDirectCallBackDoubleSide(RecompContext* ctx);
undefined ClipCollisionDirectCallBackOneObjDoubleSide(RecompContext* ctx);
undefined ClipCollisionDirectExceptObj(RecompContext* ctx);
undefined Undefined_Gap_0xB69B8_0xB6AB8(RecompContext* ctx);
undefined GetGeometryPointerPosition(RecompContext* ctx);
undefined GetGeometryPointerQuaternion(RecompContext* ctx);
undefined GetGeometryPointerQuatPos(RecompContext* ctx);
undefined GetGeometryPointerVirtualSurfacePlane(RecompContext* ctx);
undefined CopyGeometryPointer(RecompContext* ctx);
undefined GetGeometryPointerSurfaceSlopeDegree(RecompContext* ctx);
undefined GetGeometryPointerSurfacePlane(RecompContext* ctx);
undefined InitGeometryPointer(RecompContext* ctx);
undefined SetGeometryPointerGlobalState(RecompContext* ctx);
undefined GetGeometryPointerScale(RecompContext* ctx);
undefined SetGeometryPointerGlobalStatePointer(RecompContext* ctx);
undefined SetGeometryPointerGlobalStatePosPointer(RecompContext* ctx);
undefined GetGeometryPointerObject(RecompContext* ctx);
undefined GetGeometryPointerObjectParentNodeId(RecompContext* ctx);
undefined ConvertGeometryPointerZNormalMode(RecompContext* ctx);
undefined GetGeometryPointerSurfaceAttribute(RecompContext* ctx);
undefined GetGeometryPointerSurfaceZTopYPlaneCoordQuaternion(RecompContext* ctx);
undefined GetGeometryPointerSurfaceYTopZMinusPlaneCoordQuaternion(RecompContext* ctx);
undefined SetGeometryPointerNodePosState(RecompContext* ctx);
undefined SetGeometryPointerNodePosStateGlobalRot(RecompContext* ctx);
undefined SetGeometryPointerChainPos(RecompContext* ctx);
undefined GetGeometryPointerCollisionDB(RecompContext* ctx);
undefined GetGeometryPointerWithCollisionAttributeJudgeFunc(RecompContext* ctx);
undefined CheckLegalCollisionGP(RecompContext* ctx);
undefined ExchangeGeometryPointerCollisionEdgeOtherSideInfo(RecompContext* ctx);
undefined GetMultiLocalizeMatrix(RecompContext* ctx);
undefined CopyMultiMatrix(RecompContext* ctx);
undefined GetMoveVectorOnWV(RecompContext* ctx);
undefined GetXZVectorOnWV(RecompContext* ctx);
undefined ClipPoint(RecompContext* ctx);
undefined GetArbitraryDirectionMatrix(RecompContext* ctx);
undefined GetArbitraryDirectionInverseMatrix(RecompContext* ctx);
undefined iosRotMatrixAxis(RecompContext* ctx);
undefined iosRotMatrixFromDirection(RecompContext* ctx);
undefined iosGetMatrixFromDirPosi(RecompContext* ctx);
undefined GetSpaceTransformMatrix(RecompContext* ctx);
undefined GetSpaceTransformRotMatrix(RecompContext* ctx);
undefined GetVirtualVerticalPlane(RecompContext* ctx);
undefined GetPlaneGlobalYFittingPoint(RecompContext* ctx);
undefined GetPointDistanceSquareFromUnnormalizedPlane(RecompContext* ctx);
undefined GetPointDistanceFromPlane(RecompContext* ctx);
undefined MultiMatrixByPlane(RecompContext* ctx);
undefined CompletePlaneD(RecompContext* ctx);
undefined GetSTPositionOfVectorPlane(RecompContext* ctx);
undefined GetYHeightOfPlaneXZProjection(RecompContext* ctx);
undefined GetYDifferenceOfPlaneXZProjection(RecompContext* ctx);
undefined GetPlaneFittingDiffVector(RecompContext* ctx);
undefined GetPlaneFittingPoint(RecompContext* ctx);
undefined GetPlaneFittingPointForUnnormalizedPlane(RecompContext* ctx);
undefined GetPlaneSlopeDegree(RecompContext* ctx);
undefined GetPlaneTopDir(RecompContext* ctx);
undefined GetPlaneFittingVector(RecompContext* ctx);
undefined GetPlaneZTopYPlaneCoordQuaternion(RecompContext* ctx);
undefined GetPlaneReflectionVector(RecompContext* ctx);
undefined GetNormalPlane(RecompContext* ctx);
undefined GetPlaneCrossPos(RecompContext* ctx);
undefined GetCrossPositionPlaneLine(RecompContext* ctx);
undefined IsOppositePlaneLine(RecompContext* ctx);
undefined GetPlaneFrom3Position(RecompContext* ctx);
undefined GetCrossPositionOf3Plane(RecompContext* ctx);
undefined GetTargetLookAtQuaternionOnBase(RecompContext* ctx);
undefined CopyMultiQuatPos(RecompContext* ctx);
undefined GetYRotLimitQuaternionFromDir(RecompContext* ctx);
undefined GetTurnYAngleFromGlobalDir(RecompContext* ctx);
undefined GetTurnYLimitAngleFromGlobalDir(RecompContext* ctx);
undefined GetMatrixFromQuatPos(RecompContext* ctx);
undefined ExchangeLWQuaternion(RecompContext* ctx);
undefined GetQuaternionAxisRot(RecompContext* ctx);
undefined GetQuaternionFromDir(RecompContext* ctx);
undefined GetTargetLocalDir(RecompContext* ctx);
undefined CopyQuatPos(RecompContext* ctx);
undefined GetPlaneDistance(RecompContext* ctx);
undefined GetDistanceSquare(RecompContext* ctx);
undefined GetDistanceSquareXZ(RecompContext* ctx);
undefined ExchangeLWVector(RecompContext* ctx);
undefined GetOffsetPositionAxis(RecompContext* ctx);
undefined GetOffsetPositionQuaternion(RecompContext* ctx);
undefined IsInsideOfRegion(RecompContext* ctx);
undefined CheckCubeVolumeWithInverseMatrix(RecompContext* ctx);
undefined CheckCubeVolume(RecompContext* ctx);
undefined CheckEllipticalSphereVolumeWithInverseMatrix(RecompContext* ctx);
undefined CheckEllipticalSphereVolume(RecompContext* ctx);
undefined CheckEllipticalSphereVolumeShapeWithInverseMatrix(RecompContext* ctx);
undefined CheckEllipticalSphereVolumeShape(RecompContext* ctx);
undefined CheckEllipticalCylinderVolumeShapeWithInverseMatrix(RecompContext* ctx);
undefined CheckEllipticalCylinderVolumeShape(RecompContext* ctx);
undefined CheckCylinderVolumeWithInverseMatrix(RecompContext* ctx);
undefined CheckCylinderVolume(RecompContext* ctx);
undefined GetRateInOutEllipticalSphereVolume(RecompContext* ctx);
undefined GetRateInOutEllipticalSphereVolumeWithInverseMatrix(RecompContext* ctx);
undefined GetRateInOutCubeVolume(RecompContext* ctx);
undefined GetRateInOutCubeVolumeWithInverseMatrix(RecompContext* ctx);
undefined Undefined_Gap_0xBBE20_0xBC7A0(RecompContext* ctx);
undefined GetClothDynamics(RecompContext* ctx);
undefined Undefined_Gap_0xBCA60_0xBD5E0(RecompContext* ctx);
undefined CreateClothChildLayoutObj(RecompContext* ctx);
undefined InitClothWork(RecompContext* ctx);
undefined CheckClothChainDetect(RecompContext* ctx);
undefined GetClothQuaternion(RecompContext* ctx);
undefined GetClothWorkSize(RecompContext* ctx);
undefined DebugDumpClothResources(RecompContext* ctx);
undefined DispCloth(RecompContext* ctx);
undefined DebugDispCloth(RecompContext* ctx);
undefined FlushClothWork(RecompContext* ctx);
undefined SetClothAccessSwitch(RecompContext* ctx);
undefined SetClothAccessSwitch_SystemSetting(RecompContext* ctx);
undefined SetClothWorkDispFlag(RecompContext* ctx);
undefined GetClothPosition(RecompContext* ctx);
undefined CheckClothChainExist(RecompContext* ctx);
undefined ResetClothDynamics(RecompContext* ctx);
undefined SetClothSingleFixedChainLeafFixGeometryPointer(RecompContext* ctx);
undefined SetClothSingleFixedChainLeafFixNodeOffset(RecompContext* ctx);
undefined getClothDynamics(RecompContext* ctx);
undefined clothmath_doubleTensionMove(RecompContext* ctx);
undefined create_particle_texture_and_get_id(RecompContext* ctx);
undefined add_particle_segment(RecompContext* ctx);
undefined Undefined_Gap_0xBEC44_0xBEF20(RecompContext* ctx);
undefined init_particle_manager(RecompContext* ctx);
undefined doit_particle_manager(RecompContext* ctx);
undefined Undefined_Gap_0xBF2DC_0xC26C0(RecompContext* ctx);
undefined disp_particle_emitter(RecompContext* ctx);
undefined Undefined_Gap_0xC292C_0xC3F58(RecompContext* ctx);
undefined disp_particle_manager(RecompContext* ctx);
undefined free_all_emitter_and_particle_particle_manager(RecompContext* ctx);
undefined get_top_emitter_list_from_particle_geodisp(RecompContext* ctx);
undefined create_and_boot_particle_geodisp(RecompContext* ctx);
undefined check_free_particle_geodisp(RecompContext* ctx);
undefined auto_end_check_and_check_free_particle_geodisp(RecompContext* ctx);
undefined doit_particle_geodisp(RecompContext* ctx);
undefined clip_particle_geodisp(RecompContext* ctx);
undefined calc_light_particle_geodisp(RecompContext* ctx);
undefined disp_particle_geodisp(RecompContext* ctx);
undefined is_loop_particle(RecompContext* ctx);
undefined boot_particle_emitter(RecompContext* ctx);
undefined boot_particle_emitter_extend(RecompContext* ctx);
undefined stop_particle_emitter_geometry_pointer_reference(RecompContext* ctx);
undefined stop_particle_emitter_callback(RecompContext* ctx);
undefined set_generate_particle_flag(RecompContext* ctx);
undefined set_npe_blend_ratio_particle_emitter(RecompContext* ctx);
undefined end_particle_emitter(RecompContext* ctx);
undefined get_particle_effect_id_by_name(RecompContext* ctx);
undefined get_particle_effect_id_from_sheet(RecompContext* ctx);
undefined get_particle_name_from_effect_id(RecompContext* ctx);
undefined get_particle_camera_follow_attr_from_effect_id(RecompContext* ctx);
undefined get_particle_emitter_from_emitter_id(RecompContext* ctx);
undefined get_main_particle_effect_lod_from_sheet(RecompContext* ctx);
undefined get_sub_particle_effect_lod_from_sheet(RecompContext* ctx);
undefined get_top_particle_effect_from_lod(RecompContext* ctx);
undefined get_particle_effect_from_lod(RecompContext* ctx);
undefined reinit_particle_effect_lod(RecompContext* ctx);
undefined quit_particle_texture_user_by_id(RecompContext* ctx);
undefined set_particle_texture_by_id(RecompContext* ctx);
undefined getPtclDisp(RecompContext* ctx);
undefined get_particle_printf_disp_level(RecompContext* ctx);
undefined get_particle_camera_data(RecompContext* ctx);
undefined is_proper_particle_texture_id(RecompContext* ctx);
undefined create_particle_effect_lod(RecompContext* ctx);
undefined set_except_npe_file_data_to_particle_effect_lod(RecompContext* ctx);
undefined init_particle_effect_lod(RecompContext* ctx);
undefined is_emitter_need_disp(RecompContext* ctx);
undefined check_free_particle_effect_lod(RecompContext* ctx);
undefined recreate_particle_effects(RecompContext* ctx);
undefined particleGWorkPut(RecompContext* ctx);
undefined get_polygon_scale_rotation_matrix(RecompContext* ctx);
undefined get_radiate_range_coefficient(RecompContext* ctx);
undefined constructor_particle_effect_lod_except_npe(RecompContext* ctx);
undefined add_particle_texture_user(RecompContext* ctx);
undefined create_and_init_particle_effect_lod(RecompContext* ctx);
undefined get_particle_lod_base_size(RecompContext* ctx);
undefined set_act_particle_lod_select_flag(RecompContext* ctx);
undefined set_disp_particle_collisin_debug_flag(RecompContext* ctx);
undefined get_world_matrixSR(RecompContext* ctx);
undefined radiate_particle_collision_check_ray(RecompContext* ctx);
undefined init_texture_animation_parameter(RecompContext* ctx);
undefined get_particle_geodispobj_group(RecompContext* ctx);
undefined get_set_limit_gl_draw_particle_flag(RecompContext* ctx);
undefined create_particle_texture(RecompContext* ctx);
undefined Undefined_Gap_0xC52F0_0xC53B0(RecompContext* ctx);
undefined free_particle_segment(RecompContext* ctx);
undefined load_npe_file_main(RecompContext* ctx);
undefined load_npe_file_sub(RecompContext* ctx);
undefined unload_npe_file_main(RecompContext* ctx);
undefined unload_npe_file_sub(RecompContext* ctx);
undefined Undefined_Gap_0xC5478_0xC6220(RecompContext* ctx);
undefined ClipCollisionDirectForParticle(RecompContext* ctx);
undefined Undefined_Gap_0xC6250_0xC73E0(RecompContext* ctx);
undefined set_npe_file_data_to_particle_effect_lod(RecompContext* ctx);
undefined Undefined_Gap_0xC9B38_0xC9CA0(RecompContext* ctx);
undefined get_particle_parameter_blend_doit(RecompContext* ctx);
undefined get_particle_parameter_blend_disp(RecompContext* ctx);
undefined Undefined_Gap_0xCA9A4_0xCAEF8(RecompContext* ctx);
undefined dynamic_cast_to_wind_emitter_sphere(RecompContext* ctx);
undefined dynamic_cast_to_wind_emitter_box(RecompContext* ctx);
undefined dynamic_cast_to_wind_emitter_judge_volume(RecompContext* ctx);
undefined init_wind_manager(RecompContext* ctx);
undefined doit_wind_manager(RecompContext* ctx);
undefined get_wind_effect_data(RecompContext* ctx);
undefined is_eternal_wind(RecompContext* ctx);
undefined boot_wind_emitter(RecompContext* ctx);
undefined boot_wind_emitter_by_box(RecompContext* ctx);
undefined boot_wind_emitter_by_judge_volume(RecompContext* ctx);
undefined stop_wind_emitter_geometry_pointer_reference(RecompContext* ctx);
undefined stop_wind_emitter_callback(RecompContext* ctx);
undefined end_wind_emitter(RecompContext* ctx);
undefined GetWindVector(RecompContext* ctx);
undefined constructor_wind_effect_data(RecompContext* ctx);
undefined is_ambient_directional_wind_emitter(RecompContext* ctx);
undefined get_wind_emitter_direct(RecompContext* ctx);
undefined get_wind_effect_data_direct(RecompContext* ctx);
undefined Undefined_Gap_0xCB9A8_0xCC168(RecompContext* ctx);
undefined add_wind_segment(RecompContext* ctx);
undefined free_wind_segment(RecompContext* ctx);
undefined FlushModifiedManagerCB(RecompContext* ctx);
undefined FlushModifiedManager(RecompContext* ctx);
undefined EntryModifiedManager(RecompContext* ctx);
undefined RelocateModifiedManager(RecompContext* ctx);
undefined InitModifiedManager(RecompContext* ctx);
undefined DeleteModifiedManager(RecompContext* ctx);
undefined GetSizeOfModifiedManagerWork(RecompContext* ctx);
undefined InitTwoWayLink(RecompContext* ctx);
undefined AddTwoWayLinkNext(RecompContext* ctx);
undefined DeleteTwoWayLink(RecompContext* ctx);
undefined DeleteAllTwoWayLink(RecompContext* ctx);
undefined ScanAllTwoWayLink(RecompContext* ctx);
undefined GetTwoWayLinkNext(RecompContext* ctx);
undefined RelocateTwoWayLinkHeader(RecompContext* ctx);
undefined GetTwoWayLinkData(RecompContext* ctx);
undefined kbGetStatus(RecompContext* ctx);
undefined Undefined_Gap_0xCCAAC_0xCCBC0(RecompContext* ctx);
undefined kbInit(RecompContext* ctx);
undefined Undefined_Gap_0xCCCB4_0xCDE30(RecompContext* ctx);
undefined mcManager(RecompContext* ctx);
undefined mcWrite(RecompContext* ctx);
undefined mcRead(RecompContext* ctx);
undefined mcReqSetWaitFunc(RecompContext* ctx);
undefined mcGetInfo(RecompContext* ctx);
undefined mcGetMainDataInfo(RecompContext* ctx);
undefined mcSaveGameData(RecompContext* ctx);
undefined mcLoadGameData(RecompContext* ctx);
undefined mcDeleteGameData(RecompContext* ctx);
undefined mcLoadOptionData(RecompContext* ctx);
undefined mcFormat(RecompContext* ctx);
undefined mcUnformat(RecompContext* ctx);
undefined mcGetProcessPer(RecompContext* ctx);
undefined mcDirectFileCreate(RecompContext* ctx);
undefined mcDirectFileDelete(RecompContext* ctx);
undefined mcDirectFileWrite(RecompContext* ctx);
undefined mcDirectFileRead(RecompContext* ctx);
undefined mcReqGetDir(RecompContext* ctx);
undefined mcGetLastSaveGameDataIndex(RecompContext* ctx);
undefined mcGetGameClearFlag(RecompContext* ctx);
undefined mcSetGameClearFlag(RecompContext* ctx);
undefined mcGetCompleteTimeAttack(RecompContext* ctx);
undefined mcSetCompleteTimeAttack(RecompContext* ctx);
undefined initMcManager(RecompContext* ctx);
undefined Undefined_Gap_0xCF1E8_0xCF310(RecompContext* ctx);
undefined mcReqSync(RecompContext* ctx);
undefined mouseDrawCursor(RecompContext* ctx);
undefined Undefined_Gap_0xCF4D4_0xCF788(RecompContext* ctx);
undefined mouseGetStatus(RecompContext* ctx);
undefined mouseSetCursorPosition(RecompContext* ctx);
undefined mouseClearStatus(RecompContext* ctx);
undefined mouseDispCursor(RecompContext* ctx);
undefined mouseInit(RecompContext* ctx);
undefined mouseMoveCursorPosition(RecompContext* ctx);
undefined EntryPadHistory(RecompContext* ctx);
undefined FlushPadHistory(RecompContext* ctx);
undefined InitPadHistory(RecompContext* ctx);
undefined shockRequestCalcVol(RecompContext* ctx);
undefined setVibrationEnableWorkAdrs(RecompContext* ctx);
undefined shockRequest(RecompContext* ctx);
undefined svdLoadFile(RecompContext* ctx);
undefined usbdevMouseGetStatus(RecompContext* ctx);
undefined usbdevKeybdGetStatus(RecompContext* ctx);
undefined usbdevAddCallbackFunc(RecompContext* ctx);
undefined usbdevInit(RecompContext* ctx);
undefined usbdevFrameInit(RecompContext* ctx);
undefined Undefined_Gap_0xD05EC_0xD0EF0(RecompContext* ctx);
undefined createMenu(RecompContext* ctx);
undefined Undefined_Gap_0xD143C_0xD28B0(RecompContext* ctx);
undefined createParamMenu(RecompContext* ctx);
undefined Undefined_Gap_0xD2AF8_0xD3168(RecompContext* ctx);
undefined createNumDialog(RecompContext* ctx);
undefined Undefined_Gap_0xD3504_0xD3E90(RecompContext* ctx);
undefined createSheetMenu(RecompContext* ctx);
undefined cursorLockParamMenu(RecompContext* ctx);
undefined createYesNoDialog(RecompContext* ctx);
undefined createStringInputDialog(RecompContext* ctx);
undefined Undefined_Gap_0xD4268_0xD4A38(RecompContext* ctx);
undefined spriteDraw(RecompContext* ctx);
undefined spriteDrawUVSensitive(RecompContext* ctx);
undefined spriteDrawNoTex(RecompContext* ctx);
undefined windowPrintf(RecompContext* ctx);
undefined windowPrintfScale(RecompContext* ctx);
undefined windowPrintfBackBoard(RecompContext* ctx);
undefined windowSpriteMenuArrow(RecompContext* ctx);
undefined Undefined_Gap_0xD59B0_0xD7970(RecompContext* ctx);
undefined windowAddControl(RecompContext* ctx);
undefined Undefined_Gap_0xD7AB4_0xD7E40(RecompContext* ctx);
undefined windowCursorBlink(RecompContext* ctx);
undefined windowSetMouseStatus(RecompContext* ctx);
undefined Undefined_Gap_0xD8348_0xD8878(RecompContext* ctx);
undefined windowDraw(RecompContext* ctx);
undefined Undefined_Gap_0xD8DB8_0xDA1A8(RecompContext* ctx);
undefined windowCreate(RecompContext* ctx);
undefined windowReInit(RecompContext* ctx);
undefined windowSemiTransRate(RecompContext* ctx);
undefined windowDisplayMode(RecompContext* ctx);
undefined windowFontColor(RecompContext* ctx);
undefined windowSpriteNoTex(RecompContext* ctx);
undefined windowSprite(RecompContext* ctx);
undefined windowCheckCursorInRect(RecompContext* ctx);
undefined windowGetCursorPos(RecompContext* ctx);
undefined windowSetCursorPos(RecompContext* ctx);
undefined windowGetCursorPosOnWindow(RecompContext* ctx);
undefined windowSetCursorPosOnWindow(RecompContext* ctx);
undefined windowGetMouseStatus(RecompContext* ctx);
undefined windowGetCurrentWindowHandle(RecompContext* ctx);
undefined windowGetTargetWindowHandle(RecompContext* ctx);
undefined windowDelete(RecompContext* ctx);
undefined windowCloseRequest(RecompContext* ctx);
undefined windowDeleteAllObjByGroup(RecompContext* ctx);
undefined windowDeleteControl(RecompContext* ctx);
undefined windowInit(RecompContext* ctx);
undefined windowSetTex(RecompContext* ctx);
undefined Undefined_Gap_0xDB07C_0xDB360(RecompContext* ctx);
undefined GetWindowClass(RecompContext* ctx);
undefined CreateWindowObj(RecompContext* ctx);
undefined RequestDeleteWindowObj(RecompContext* ctx);
undefined Undefined_Gap_0xDB454_0xDB938(RecompContext* ctx);
undefined _adpcmOpenReq(RecompContext* ctx);
undefined Undefined_Gap_0xDBC50_0xDC5A8(RecompContext* ctx);
undefined adpcmOpenChkComplete(RecompContext* ctx);
undefined adpcmPlay(RecompContext* ctx);
undefined adpcmCloseReq(RecompContext* ctx);
undefined adpcmCloseFadeReq(RecompContext* ctx);
undefined adpcmCloseFadeSetVol(RecompContext* ctx);
undefined adpcmCloseChkComplete(RecompContext* ctx);
undefined adpcmDeleteAdpcmSeq(RecompContext* ctx);
undefined adpcmSetVol(RecompContext* ctx);
undefined adpcmSetPitch(RecompContext* ctx);
undefined adpcmSetPan(RecompContext* ctx);
undefined adpcmMgrInit(RecompContext* ctx);
undefined adpcmGamePause(RecompContext* ctx);
undefined Undefined_Gap_0xDC8BC_0xDC980(RecompContext* ctx);
undefined adpcmLoadStsFile(RecompContext* ctx);
undefined Undefined_Gap_0xDC9F8_0xDCC18(RecompContext* ctx);
undefined createAdpcmTest(RecompContext* ctx);
undefined Undefined_Gap_0xDCC70_0xDCCD0(RecompContext* ctx);
undefined sound3DCalc(RecompContext* ctx);
undefined Undefined_Gap_0xDCEB8_0xDD120(RecompContext* ctx);
undefined sePlay3D(RecompContext* ctx);
undefined sePlayStageEnv(RecompContext* ctx);
undefined initSoundManager(RecompContext* ctx);
undefined sePlay(RecompContext* ctx);
undefined sePlaySystemSound(RecompContext* ctx);
undefined seSetVol(RecompContext* ctx);
undefined seStop(RecompContext* ctx);
undefined seStopLoopType(RecompContext* ctx);
undefined seSopStageTypeAll(RecompContext* ctx);
undefined seSetDebugTrigFunc(RecompContext* ctx);
undefined seLoadHDFile(RecompContext* ctx);
undefined Undefined_Gap_0xDD684_0xDD7E8(RecompContext* ctx);
undefined seLoadBDFile(RecompContext* ctx);
undefined seUnloadBDFile(RecompContext* ctx);
undefined Undefined_Gap_0xDD8FC_0xDDDE8(RecompContext* ctx);
undefined seDelayPlay3DTest(RecompContext* ctx);
undefined dsysInit(RecompContext* ctx);
undefined Undefined_Gap_0xDDE0C_0xDDF38(RecompContext* ctx);
undefined dsysExistFileOpen(RecompContext* ctx);
undefined InitExcelAutoModFile(RecompContext* ctx);
undefined OpenCsvModChkTempFile(RecompContext* ctx);
undefined WriteMemberCsvModChkTempFile(RecompContext* ctx);
undefined AddSegmentCsvModChkTempFile(RecompContext* ctx);
undefined CloseCsvModChkTempFile(RecompContext* ctx);
undefined CreateCsvModChkTempFileIppatu(RecompContext* ctx);
undefined _dsysOpen(RecompContext* ctx);
undefined dsysClose(RecompContext* ctx);
undefined dsysRead(RecompContext* ctx);
undefined dsysWrite(RecompContext* ctx);
undefined dsysFileInit(RecompContext* ctx);
undefined CreateEndAutoModFile(RecompContext* ctx);
undefined Undefined_Gap_0xDEDF8_0xDF320(RecompContext* ctx);
undefined nicosysdRebootRequest(RecompContext* ctx);
undefined nicosysdSendDataStart(RecompContext* ctx);
undefined nicosysdSendDataWrite(RecompContext* ctx);
undefined nicosysdRecvDataRead(RecompContext* ctx);
undefined nicosysdExec(RecompContext* ctx);
undefined nicosysdDummyReadCallBack(RecompContext* ctx);
undefined nicosysdEchoReadCallBack(RecompContext* ctx);
undefined nicosysdForceEchoReadCallBack(RecompContext* ctx);
undefined nicosysdEchoDdebugPrintReadCallBack(RecompContext* ctx);
undefined nicosysdInit(RecompContext* ctx);
undefined Undefined_Gap_0xDFA60_0xDFAB0(RecompContext* ctx);
undefined csvMakeOpen(RecompContext* ctx);
undefined csvMakeBlockWriteData(RecompContext* ctx);
undefined csvMakeClose(RecompContext* ctx);
undefined csvMakeDeleteSegment(RecompContext* ctx);
undefined csvMakeCreateNewSegment(RecompContext* ctx);
undefined Undefined_Gap_0xDFE74_0xE06B0(RecompContext* ctx);
undefined sheetFsLoadDirectFile(RecompContext* ctx);
undefined sheetFsInit(RecompContext* ctx);
undefined sheetFsGetStageTexSegIndex(RecompContext* ctx);
undefined sheetFsAddStageTexSegIndex(RecompContext* ctx);
undefined sheetFsDecStageTexSegIndex(RecompContext* ctx);
undefined sheetFsExistTexSegIndexCallBack(RecompContext* ctx);
undefined sheetFsSetStageTexSegTexSegDef(RecompContext* ctx);
undefined sheetFsGetStageTexSegTexSegDef(RecompContext* ctx);
undefined sheetFsDataRead(RecompContext* ctx);
undefined sheetFsSkipRead(RecompContext* ctx);
undefined sheetFsSectorAlignSkip(RecompContext* ctx);
undefined sheetFsLoadBootData(RecompContext* ctx);
undefined sheetFsLoadRootSegment(RecompContext* ctx);
undefined sheetFsLoadSegmentIndex(RecompContext* ctx);
undefined sheetFsLoadMap(RecompContext* ctx);
undefined sheetFsLoadStageTex(RecompContext* ctx);
undefined sheetFsLoadAdpcmInt(RecompContext* ctx);
undefined sheetFsGetDirectFileSize(RecompContext* ctx);
undefined sheetFsSrhSpecialFs(RecompContext* ctx);
undefined sheetFsSetSpecialFs(RecompContext* ctx);
undefined Undefined_Gap_0xE0FF8_0xE1100(RecompContext* ctx);
undefined sheetFileUnloadCallBack(RecompContext* ctx);
undefined Undefined_Gap_0xE1234_0xE1C58(RecompContext* ctx);
undefined sheetFileRead(RecompContext* ctx);
undefined sheetFileGetDataAdrs(RecompContext* ctx);
undefined sheetFileGetSize(RecompContext* ctx);
undefined sheetFileLoadSegmentIndex(RecompContext* ctx);
undefined sheetFileLoadRootSegment(RecompContext* ctx);
undefined sheetFileLoadBootData(RecompContext* ctx);
undefined sheetFileLoadMap(RecompContext* ctx);
undefined sheetFileLoadStageTex(RecompContext* ctx);
undefined sheetfileInit(RecompContext* ctx);
undefined Undefined_Gap_0xE1E5C_0xE1EA8(RecompContext* ctx);
undefined sheetMgrResolve(RecompContext* ctx);
undefined Undefined_Gap_0xE2194_0xE3860(RecompContext* ctx);
undefined sheetMgrInit(RecompContext* ctx);
undefined sheetWait(RecompContext* ctx);
undefined sheetIdToName(RecompContext* ctx);
undefined sheetHeaderObjSearchSheetId(RecompContext* ctx);
undefined sheetMgrSheetHeaderSearchSheetDataObj(RecompContext* ctx);
undefined sheetMgrSearchSheetDataObj(RecompContext* ctx);
undefined sheetMgrAddSegLoadList(RecompContext* ctx);
undefined sheetMgrGetSegLoadHeader(RecompContext* ctx);
undefined sheetMgrAddSegInitList(RecompContext* ctx);
undefined sheetMgrCheckSegInitList(RecompContext* ctx);
undefined sheetMgrGetSegInitHeader(RecompContext* ctx);
undefined sheetMgrCreateStageIndexSkipInfo(RecompContext* ctx);
undefined sheetMgrChkStageIndexResolve(RecompContext* ctx);
undefined sheetMgrLoadSegmentIndex(RecompContext* ctx);
undefined sheetMgrUnloadSegmentIndex(RecompContext* ctx);
undefined sheetMgrNopSegmentIndex(RecompContext* ctx);
undefined sheetMgrMapDataLoad(RecompContext* ctx);
undefined sheetMgrMapDataUnloadOneBlock(RecompContext* ctx);
undefined sheetMgrStageTexLoad(RecompContext* ctx);
undefined sheetMgrStageTexUnload(RecompContext* ctx);
undefined sheetMgrAdpcmIntLoad(RecompContext* ctx);
undefined sheetMgrDirectFileLoad(RecompContext* ctx);
undefined sheetMgrAllReqWait(RecompContext* ctx);
undefined sheetMgrSpecialFsStart(RecompContext* ctx);
undefined sheetMgrSpecialFsEnd(RecompContext* ctx);
undefined sheetMgrSetNoWaitMode(RecompContext* ctx);
undefined Undefined_Gap_0xE4764_0xE4B68(RecompContext* ctx);
undefined getSheetDebugNoLoadMode(RecompContext* ctx);
undefined Undefined_Gap_0xE4B74_0xE4BF8(RecompContext* ctx);
undefined sheetExecMake(RecompContext* ctx);
undefined sheetExecCommit(RecompContext* ctx);
undefined sheetExecUpdate(RecompContext* ctx);
undefined sheetExecClean(RecompContext* ctx);
undefined getDebPcWinSw(RecompContext* ctx);
undefined GetDebPcWinSw(RecompContext* ctx);
undefined getDebPcWinType(RecompContext* ctx);
undefined GetDebPcWinType(RecompContext* ctx);
undefined getDebPcWinCategory(RecompContext* ctx);
undefined GetDebPcWinCategory(RecompContext* ctx);
undefined toggleDebPcWinWindow(RecompContext* ctx);
undefined Undefined_Gap_0xE4F00_0xE52A8(RecompContext* ctx);
undefined update_camera_context(RecompContext* ctx);
undefined GetScreenRadius(RecompContext* ctx);
undefined SetVSMatrix(RecompContext* ctx);
undefined SetDefaultViewContext(RecompContext* ctx);
undefined SetViewContext(RecompContext* ctx);
undefined create_camera_context(RecompContext* ctx);
undefined release_camera_context(RecompContext* ctx);
undefined constructor_camera_context(RecompContext* ctx);
undefined GetScreenRadiusParticle(RecompContext* ctx);
undefined init_camera_context_manager(RecompContext* ctx);
undefined push_camera_context(RecompContext* ctx);
undefined pop_camera_context(RecompContext* ctx);
undefined get_cur_camera_context(RecompContext* ctx);
undefined Undefined_Gap_0xE5CC0_0xE6290(RecompContext* ctx);
undefined get_blend_sub_camera_lws_animation(RecompContext* ctx);
undefined boot_camera_lws_animation(RecompContext* ctx);
undefined disp_camera_lws_animation_debug_info(RecompContext* ctx);
undefined constructor_camera_lws_anime_data(RecompContext* ctx);
undefined get_camera_lws_animation_param(RecompContext* ctx);
undefined is_camera_lws_animation_using(RecompContext* ctx);
undefined get_camera_lws_animation_data(RecompContext* ctx);
undefined get_interest_type_camera_lws_animation_data(RecompContext* ctx);
undefined get_motion_data_camera_lws_animation(RecompContext* ctx);
undefined get_animation_class_camera_lws_animation(RecompContext* ctx);
undefined get_boot_obj_camera_lws_animation(RecompContext* ctx);
undefined is_loop_camera_lws_animation(RecompContext* ctx);
undefined is_main_type_camera_lws_animation(RecompContext* ctx);
undefined is_sub_type_camera_lws_animation(RecompContext* ctx);
undefined is_interest_type_camera_lws_animation(RecompContext* ctx);
undefined is_fixed_point_type_camera_lws_animation(RecompContext* ctx);
undefined is_main_type_camera_lws_animation_update(RecompContext* ctx);
undefined reset_main_type_camera_lws_animation_update_flag(RecompContext* ctx);
undefined get_camera_lws_animation_parameter_by_name(RecompContext* ctx);
undefined is_same_camera_lws_animation(RecompContext* ctx);
undefined get_main_type_camera_lws_animation(RecompContext* ctx);
undefined get_interest_type_camera_lws_animation(RecompContext* ctx);
undefined get_fixed_point_type_camera_lws_animation(RecompContext* ctx);
undefined boot_camera_lws_animation_by_script(RecompContext* ctx);
undefined stop_camera_lws_animation_geometry_pointer_reference(RecompContext* ctx);
undefined stop_camera_lws_animation_callback(RecompContext* ctx);
undefined end_camera_lws_animation(RecompContext* ctx);
undefined end_camera_lws_animation_by_paramID(RecompContext* ctx);
undefined init_camera_lws_animation_manager(RecompContext* ctx);
undefined doit_camera_lws_animation_manager(RecompContext* ctx);
undefined add_camera_lws_animation_segment(RecompContext* ctx);
undefined free_camera_lws_animation_segment(RecompContext* ctx);
undefined Undefined_Gap_0xE72A8_0xE77A8(RecompContext* ctx);
undefined create_camera_obj(RecompContext* ctx);
undefined Undefined_Gap_0xE78F8_0xE7B28(RecompContext* ctx);
undefined set_camera_obj_screen_size(RecompContext* ctx);
undefined dynamic_cast_to_camera_obj(RecompContext* ctx);
undefined update_camera_obj(RecompContext* ctx);
undefined set_camera_position(RecompContext* ctx);
undefined set_camera_direction(RecompContext* ctx);
undefined set_camera_up_direction(RecompContext* ctx);
undefined get_camera_position(RecompContext* ctx);
undefined get_camera_direction(RecompContext* ctx);
undefined get_camera_up_direction(RecompContext* ctx);
undefined get_camera_obj_layout_class(RecompContext* ctx);
undefined get_clip_screen(RecompContext* ctx);
undefined get_transform_matrix_set(RecompContext* ctx);
undefined create_original_view_matrix(RecompContext* ctx);
undefined Undefined_Gap_0xE7C6C_0xE7D08(RecompContext* ctx);
undefined get_view_matrix(RecompContext* ctx);
undefined Undefined_Gap_0xE7D10_0xE7EA8(RecompContext* ctx);
undefined disp_camera_region(RecompContext* ctx);
undefined constructor_camera_region(RecompContext* ctx);
undefined create_and_init_camera_region(RecompContext* ctx);
undefined check_free_camera_region(RecompContext* ctx);
undefined doit_camera_region(RecompContext* ctx);
undefined is_clear_camera_region_condition(RecompContext* ctx);
undefined get_manage_object_id_camera_region(RecompContext* ctx);
undefined is_parent_obj_boss_camera_region(RecompContext* ctx);
undefined get_priority_camera_region(RecompContext* ctx);
undefined get_change_grace_time_camera_region(RecompContext* ctx);
undefined get_hit_region_ofst_camera_region(RecompContext* ctx);
undefined get_region_type_camera_region(RecompContext* ctx);
undefined is_have_region_camera_region(RecompContext* ctx);
undefined Undefined_Gap_0xE8690_0xE86A8(RecompContext* ctx);
undefined init_col_attr_table_segment(RecompContext* ctx);
undefined is_this_camera_region_alive(RecompContext* ctx);
undefined init_camera_region_manager(RecompContext* ctx);
undefined doit_camera_region_manager(RecompContext* ctx);
undefined get_camera_region_resource_id_by_name(RecompContext* ctx);
undefined add_object_animation_camera_region(RecompContext* ctx);
undefined delete_object_animation_camera_region(RecompContext* ctx);
undefined get_apply_camera_region(RecompContext* ctx);
undefined disp_object_animation_camera_region_group(RecompContext* ctx);
undefined get_max_object_animation_camera_region(RecompContext* ctx);
undefined get_cur_total_object_animation_camera_region(RecompContext* ctx);
undefined get_col_attr_cam_region_select_flag(RecompContext* ctx);
undefined get_col_attr_cam_region_select_index(RecompContext* ctx);
undefined Undefined_Gap_0xE8F14_0xE8FB8(RecompContext* ctx);
undefined create_clip_screen(RecompContext* ctx);
undefined check_free_clip_screen(RecompContext* ctx);
undefined set_screen_size(RecompContext* ctx);
undefined set_screen_wide_and_progressive(RecompContext* ctx);
undefined set_view_angle(RecompContext* ctx);
undefined set_scissor_screen_size(RecompContext* ctx);
undefined get_screen_width(RecompContext* ctx);
undefined get_screen_height(RecompContext* ctx);
undefined get_aspect_ratio(RecompContext* ctx);
undefined get_view_angle(RecompContext* ctx);
undefined get_dist_from_eye_to_screen(RecompContext* ctx);
undefined get_near_clip_z_clip_screen(RecompContext* ctx);
undefined get_far_clip_z_clip_screen(RecompContext* ctx);
undefined get_z_buf_min_clip_screen(RecompContext* ctx);
undefined get_z_buf_max_clip_screen(RecompContext* ctx);
undefined create_original_clip_matrix(RecompContext* ctx);
undefined update_clip_screen(RecompContext* ctx);
undefined create_directX_projection_matrix(RecompContext* ctx);
undefined get_screen_size_scale_screen_matrix(RecompContext* ctx);
undefined Undefined_Gap_0xE958C_0xE99A8(RecompContext* ctx);
undefined get_clip_matrix(RecompContext* ctx);
undefined get_clip_matrix128(RecompContext* ctx);
undefined get_clip_matrix256(RecompContext* ctx);
undefined get_clip_matrix_fovignore(RecompContext* ctx);
undefined get_screen_matrix(RecompContext* ctx);
undefined get_screen_matrix128(RecompContext* ctx);
undefined get_screen_matrix256(RecompContext* ctx);
undefined get_scissor_clip_matrix(RecompContext* ctx);
undefined get_WV_matrix(RecompContext* ctx);
undefined get_VC_matrix(RecompContext* ctx);
undefined get_CS_matrix(RecompContext* ctx);
undefined get_WVC_matrix(RecompContext* ctx);
undefined get_VCS_matrix(RecompContext* ctx);
undefined get_WVCS_matrix(RecompContext* ctx);
undefined get_scissor_VC_matrix(RecompContext* ctx);
undefined get_scissor_WVC_matrix(RecompContext* ctx);
undefined create_transform_matrix_set(RecompContext* ctx);
undefined check_free_transform_matrix_set(RecompContext* ctx);
undefined update_transform_matrix_set(RecompContext* ctx);
undefined Undefined_Gap_0xE9E14_0xEB150(RecompContext* ctx);
undefined SendDamageLetter(RecompContext* ctx);
undefined SendDamageCylinderLetter(RecompContext* ctx);
undefined SendDamageBoxLetter(RecompContext* ctx);
undefined SendDirectDamageLetter(RecompContext* ctx);
undefined SendVolumeShapeDamageLetter(RecompContext* ctx);
undefined CheckLetter(RecompContext* ctx);
undefined GetDamageClass(RecompContext* ctx);
undefined CheckDamageLetter(RecompContext* ctx);
undefined InitDamageClass(RecompContext* ctx);
undefined ResetDamageClass(RecompContext* ctx);
undefined SetDamageOffsetStatus(RecompContext* ctx);
undefined SetDamageClassJudgeExternalFunc(RecompContext* ctx);
undefined DecreaseDamageLockTime(RecompContext* ctx);
undefined GetDamagerClassDamageSheetType(RecompContext* ctx);
undefined SetDamageClassDamageTableType(RecompContext* ctx);
undefined InitDamageLetter(RecompContext* ctx);
undefined Undefined_Gap_0xEBC3C_0xEBD70(RecompContext* ctx);
undefined _SetMultiCastLetterReceiverInfo(RecompContext* ctx);
undefined Undefined_Gap_0xEBD94_0xEBDB8(RecompContext* ctx);
undefined _SetLetterKindVariable(RecompContext* ctx);
undefined GetLetterKindVariableData(RecompContext* ctx);
undefined getDamageEnableTargetLayoutClass(RecompContext* ctx);
undefined Undefined_Gap_0xEBE3C_0xEBE70(RecompContext* ctx);
undefined GetDamageDefByName(RecompContext* ctx);
undefined GetAttributeRelationEffectDefByName(RecompContext* ctx);
undefined GetAnimationEffectDefByName(RecompContext* ctx);
undefined GetCollisionDetectEffectWaterOnlyDefByName(RecompContext* ctx);
undefined GetAnimationFogDefByName(RecompContext* ctx);
undefined Undefined_Gap_0xEC3D8_0xEDD58(RecompContext* ctx);
undefined ExecAnimeTableInfo(RecompContext* ctx);
undefined ResetAnimeFrameTableInfo(RecompContext* ctx);
undefined ExecEff(RecompContext* ctx);
undefined getSETriggerTestMode(RecompContext* ctx);
undefined AnimeTableInfoDebugMode(RecompContext* ctx);
undefined SequenceKickCameraVibration(RecompContext* ctx);
undefined Undefined_Gap_0xEE330_0xEE380(RecompContext* ctx);
undefined getBootParent(RecompContext* ctx);
undefined SequenceKickParticle(RecompContext* ctx);
undefined KickParticleGetResourceId(RecompContext* ctx);
undefined Undefined_Gap_0xEE4D4_0xEE538(RecompContext* ctx);
undefined SequenceKickSE(RecompContext* ctx);
undefined seSetKeyOnOff(RecompContext* ctx);
undefined Undefined_Gap_0xEE610_0xEE640(RecompContext* ctx);
undefined SequenceKickWind(RecompContext* ctx);
undefined SequenceKickWindBox(RecompContext* ctx);
undefined SequenceKickWindVolumeShape(RecompContext* ctx);
undefined Undefined_Gap_0xEE854_0xEE8A8(RecompContext* ctx);
undefined initLoadObjEditWork(RecompContext* ctx);
undefined delLoadObjEditWork(RecompContext* ctx);
undefined getEditWorkSize(RecompContext* ctx);
undefined getEditWorkInitData(RecompContext* ctx);
undefined getEditWorkDebugHeader(RecompContext* ctx);
undefined getEditWorkDebugData(RecompContext* ctx);
undefined loadPathData(RecompContext* ctx);
undefined delPathData(RecompContext* ctx);
undefined getPointDataHeader(RecompContext* ctx);
undefined getLineDataHeader(RecompContext* ctx);
undefined getPointData(RecompContext* ctx);
undefined getConnectLineArray(RecompContext* ctx);
undefined getLineData(RecompContext* ctx);
undefined getRootDataHeader(RecompContext* ctx);
undefined getGoalDataHeader(RecompContext* ctx);
undefined getSubDataHeader(RecompContext* ctx);
undefined getRootPointData(RecompContext* ctx);
undefined getGoalPointData(RecompContext* ctx);
undefined getSubPointData(RecompContext* ctx);
undefined getChildGoalPointIdxArray(RecompContext* ctx);
undefined getChildSubPointIdxArray(RecompContext* ctx);
undefined getInterestDataHeader(RecompContext* ctx);
undefined getInterestPointData(RecompContext* ctx);
undefined getDeadDataHeader(RecompContext* ctx);
undefined getDeadPointData(RecompContext* ctx);
undefined getLayoutDataHeader(RecompContext* ctx);
undefined getLayoutPointData(RecompContext* ctx);
undefined clipVectorPlaneVolume(RecompContext* ctx);
undefined Undefined_Gap_0xEEE0C_0xEF048(RecompContext* ctx);
undefined qsort(RecompContext* ctx);
undefined srand(RecompContext* ctx);
undefined rand(RecompContext* ctx);
undefined rintf(RecompContext* ctx);

// ----------- GAMECORE -------------

undefined ResetCharacterObj(RecompContext* ctx);
undefined Undefined_Gap_0x1E0_0x1E68(RecompContext* ctx);
undefined DebugGetGlobalDiffWith2ndController(RecompContext* ctx);
undefined DebugGlobalMoveWith1stController(RecompContext* ctx);
undefined DebugPrintf3D_Context(RecompContext* ctx);
undefined DebugPrintf3D(RecompContext* ctx);
undefined disphalfarc(RecompContext* ctx);
undefined disphalfarcpillar(RecompContext* ctx);
undefined Undefined_Gap_0x2D7C_0x4A40(RecompContext* ctx);
undefined DebugSnapShot(RecompContext* ctx);
undefined Undefined_Gap_0x4E14_0x5998(RecompContext* ctx);
undefined DebugSetHorsePositionWithTargetOfs(RecompContext* ctx);
undefined Undefined_Gap_0x5B2C_0x7080(RecompContext* ctx);
undefined DebugControl(RecompContext* ctx);
undefined DebugGlobalMoveWith2ndController(RecompContext* ctx);
undefined DebugDispItem(RecompContext* ctx);
undefined DebugDispPosition(RecompContext* ctx);
undefined DebugDispPositionColor(RecompContext* ctx);
undefined DebugDispTargetStatusForce(RecompContext* ctx);
undefined DebugPrintf3D_InitContext(RecompContext* ctx);
undefined DebugSetObjectGeometry(RecompContext* ctx);
undefined DebugGetMutekiMode(RecompContext* ctx);
undefined SetObjectGeo(RecompContext* ctx);
undefined SetObjectGeoAndUnparent(RecompContext* ctx);
undefined DebugIsPlayer(RecompContext* ctx);
undefined DebugFindPlayer(RecompContext* ctx);
undefined getForceMemoryAllocSize(RecompContext* ctx);
undefined forceMemoryAlloc(RecompContext* ctx);
undefined getStatusMode(RecompContext* ctx);
undefined getDispCollisionPerfFlag(RecompContext* ctx);
undefined getPrintfPerfWarning(RecompContext* ctx);
undefined ResetObject(RecompContext* ctx);
undefined is_disp_debug_object_info(RecompContext* ctx);
undefined getCollisionDispMode(RecompContext* ctx);
undefined getGetMutekiMode(RecompContext* ctx);
undefined getPlayerPowerDisp(RecompContext* ctx);
undefined getPlayerPowerMax(RecompContext* ctx);
undefined getGripCalcCancelMode(RecompContext* ctx);
undefined Undefined_Gap_0x794C_0x79A0(RecompContext* ctx);
undefined dispgpinfo(RecompContext* ctx);
undefined getSnapShotSize(RecompContext* ctx);
undefined getSnapShotFormat(RecompContext* ctx);
undefined getSnapShotNum(RecompContext* ctx);
undefined getSnapShotRotation(RecompContext* ctx);
undefined getSnapShotAspect(RecompContext* ctx);
undefined getDebugSnapShotSizeX(RecompContext* ctx);
undefined DebugDispMotionTurnRequest(RecompContext* ctx);
undefined getFreezeBossFlag(RecompContext* ctx);
undefined setFreezeBossFlag(RecompContext* ctx);
undefined Undefined_Gap_0x7C90_0x7D00(RecompContext* ctx);
undefined camdebug_for_new_camera(RecompContext* ctx);
undefined camdebug_for_monitortest(RecompContext* ctx);
undefined getDispGpsMarker(RecompContext* ctx);
undefined getGpsGridWidth(RecompContext* ctx);
undefined createDebugSubThreads(RecompContext* ctx);
undefined Undefined_Gap_0x7E3C_0x7EF8(RecompContext* ctx);
undefined DebugGetCameraWithPursue2(RecompContext* ctx);
undefined Undefined_Gap_0x8018_0x8080(RecompContext* ctx);
undefined GAMEUTIL_get_boss_interest_position(RecompContext* ctx);
undefined GAMEUTIL_doit_look_at_vs_offset_vec(RecompContext* ctx);
undefined GAMEUTIL_set_col_plane_info(RecompContext* ctx);
undefined GAMEUTIL_disp_col_plane_info_debug(RecompContext* ctx);
undefined GAMEUTIL_doit_col_plane_info_filter(RecompContext* ctx);
undefined convert_from_button_value_to_bool(RecompContext* ctx);
undefined convert_from_slide_bar_value_to_ratio(RecompContext* ctx);
undefined GAMEUTIL_set_sight_on_reverse_cntrlLR(RecompContext* ctx);
undefined GAMEUTIL_get_sight_on_reverse_cntrlLR_int(RecompContext* ctx);
undefined GAMEUTIL_get_sight_on_reverse_cntrlLR_bool(RecompContext* ctx);
undefined GAMEUTIL_set_sight_on_reverse_cntrlUD(RecompContext* ctx);
undefined GAMEUTIL_get_sight_on_reverse_cntrlUD_int(RecompContext* ctx);
undefined GAMEUTIL_get_sight_on_reverse_cntrlUD_bool(RecompContext* ctx);
undefined GAMEUTIL_set_sight_on_angle_vel_ratio(RecompContext* ctx);
undefined GAMEUTIL_get_sight_on_angle_vel_ratio_int(RecompContext* ctx);
undefined GAMEUTIL_get_sight_on_angle_vel_ratio_float(RecompContext* ctx);
undefined GAMEUTIL_set_game_camera_free_mode_reverse_cntrlLR(RecompContext* ctx);
undefined GAMEUTIL_get_game_camera_free_mode_reverse_cntrlLR_int(RecompContext* ctx);
undefined GAMEUTIL_get_game_camera_free_mode_reverse_cntrlLR_bool(RecompContext* ctx);
undefined GAMEUTIL_set_game_camera_free_mode_reverse_cntrlUD(RecompContext* ctx);
undefined GAMEUTIL_get_game_camera_free_mode_reverse_cntrlUD_int(RecompContext* ctx);
undefined GAMEUTIL_get_game_camera_free_mode_reverse_cntrlUD_bool(RecompContext* ctx);
undefined GAMEUTIL_set_game_camera_free_mode_angle_vel_ratio(RecompContext* ctx);
undefined GAMEUTIL_get_game_camera_free_mode_angle_vel_ratio_int(RecompContext* ctx);
undefined GAMEUTIL_get_game_camera_free_mode_angle_vel_ratio_float(RecompContext* ctx);
undefined GAMEUTIL_get_first_obj(RecompContext* ctx);
undefined GAMEUTIL_get_camera_target_look_at_position(RecompContext* ctx);
undefined GAMEUTIL_get_obj_from_stagelayout_sheet(RecompContext* ctx);
undefined GAMEUTIL_get_object_scale(RecompContext* ctx);
undefined GAMEUTIL_is_push_or_down_1p_button(RecompContext* ctx);
undefined GAMEUTIL_get_1p_left_analog_input(RecompContext* ctx);
undefined GAMEUTIL_get_1p_left_analog_input_extend(RecompContext* ctx);
undefined GAMEUTIL_get_1p_right_analog_input(RecompContext* ctx);
undefined GAMEUTIL_is_overtake_aim_position(RecompContext* ctx);
undefined GAMEUTIL_is_advance_near_dir_to_aim_position(RecompContext* ctx);
undefined GAMEUTIL_get_character_type(RecompContext* ctx);
undefined GAMEUTIL_get_object_move_noise(RecompContext* ctx);
undefined GAMEUTIL_get_object_move_noise_square(RecompContext* ctx);
undefined GAMEUTIL_is_swimming_now(RecompContext* ctx);
undefined GAMEUTIL_is_floating_now(RecompContext* ctx);
undefined GAMEUTIL_is_sign_change(RecompContext* ctx);
undefined GAMEUTIL_get_add_cur_stage_ofst_position(RecompContext* ctx);
undefined GAMEUTIL_get_player_obj(RecompContext* ctx);
undefined GAMEUTIL_is_player_obj(RecompContext* ctx);
undefined GAMEUTIL_is_player_obj_standing_on_horse(RecompContext* ctx);
undefined GAMEUTIL_get_weapon_release_position_of_player_obj(RecompContext* ctx);
undefined GAMEUTIL_get_player_look_around_direction(RecompContext* ctx);
undefined GAMEUTIL_get_horse_obj(RecompContext* ctx);
undefined GAMEUTIL_is_horse_obj(RecompContext* ctx);
undefined GAMEUTIL_get_riding_horse_object(RecompContext* ctx);
undefined GAMEUTIL_is_horse_obj_contact_ground(RecompContext* ctx);
undefined GAMEUTIL_get_horse_move_status(RecompContext* ctx);
undefined GAMEUTIL_get_boss_obj(RecompContext* ctx);
undefined GAMEUTIL_is_boss_obj(RecompContext* ctx);
undefined GAMEUTIL_is_parent_collision_attribute_boss(RecompContext* ctx);
undefined GAMEUTIL_is_boss_booting(RecompContext* ctx);
undefined GAMEUTIL_set_auto_get_flag_boss_interest_position(RecompContext* ctx);
undefined GAMEUTIL_set_custom_boss_interest_position(RecompContext* ctx);
undefined GAMEUTIL_is_boss_battle_area(RecompContext* ctx);
undefined GAMEUTIL_constructor_move_angle(RecompContext* ctx);
undefined GAMEUTIL_reset_move_angle(RecompContext* ctx);
undefined GAMEUTIL_set_parameter_move_angle(RecompContext* ctx);
undefined GAMEUTIL_begin_move_angle(RecompContext* ctx);
undefined GAMEUTIL_update_and_get_move_angle(RecompContext* ctx);
undefined GAMEUTIL_get_cur_velocity_move_angle(RecompContext* ctx);
undefined GAMEUTIL_constructor_look_at_vs_offset(RecompContext* ctx);
undefined GAMEUTIL_set_parameter_look_at_vs_offset(RecompContext* ctx);
undefined GAMEUTIL_set_need_dir_ratio_flag_look_at_vs_offset(RecompContext* ctx);
undefined GAMEUTIL_set_enable_side_change_angle_look_at_vs_offset(RecompContext* ctx);
undefined GAMEUTIL_reset_look_at_vs_offset(RecompContext* ctx);
undefined GAMEUTIL_doit_look_at_vs_offset(RecompContext* ctx);
undefined GAMEUTIL_constructor_col_plane_info(RecompContext* ctx);
undefined GAMEUTIL_constructor_col_plane_info_filter(RecompContext* ctx);
undefined GAMEUTIL_init_col_plane_info_filter(RecompContext* ctx);
undefined GAMEUTIL_set_parameter_col_plane_info_filter(RecompContext* ctx);
undefined GAMEUTIL_disp_col_plane_info_filter_debug(RecompContext* ctx);
undefined GAMEUTIL_constructor_position_filter(RecompContext* ctx);
undefined GAMEUTIL_reset_position_filter(RecompContext* ctx);
undefined GAMEUTIL_set_parameter_position_filter(RecompContext* ctx);
undefined GAMEUTIL_doit_position_filter(RecompContext* ctx);
undefined GAMEUTIL_reset_collision_info(RecompContext* ctx);
undefined GAMEUTIL_set_data_by_point_collision_info(RecompContext* ctx);
undefined GAMEUTIL_set_data_by_dynamics_collision_info(RecompContext* ctx);
undefined GAMEUTIL_constructor_record_info(RecompContext* ctx);
undefined GAMEUTIL_destructor_record_info(RecompContext* ctx);
undefined GAMEUTIL_init_record_info(RecompContext* ctx);
undefined GAMEUTIL_reset_record_info(RecompContext* ctx);
undefined GAMEUTIL_add_data_record_info(RecompContext* ctx);
undefined GAMEUTIL_get_data_record_info(RecompContext* ctx);
undefined GAMEUTIL_reset_status_manager(RecompContext* ctx);
undefined GAMEUTIL_doit_status_manager(RecompContext* ctx);
undefined GAMEUTIL_reset_status_continue_time_status_manager(RecompContext* ctx);
undefined GAMEUTIL_is_status_change_status_manager(RecompContext* ctx);
undefined GAMEUTIL_get_status_continue_time_status_manager(RecompContext* ctx);
undefined GAMEUTIL_get_cur_status_status_manager(RecompContext* ctx);
undefined GAMEUTIL_get_pre_status_status_manager(RecompContext* ctx);
undefined GAMEUTIL_get_pre_changed_status_status_manager(RecompContext* ctx);
undefined getSightOnRevCntrlLR(RecompContext* ctx);
undefined getSightOnRevCntrlUD(RecompContext* ctx);
undefined getSightOnAngleVelRatio(RecompContext* ctx);
undefined getFreeModeRevControlLR(RecompContext* ctx);
undefined getFreeModeRevControlUD(RecompContext* ctx);
undefined getFreeModeRevAngleVelRatio(RecompContext* ctx);
undefined Undefined_Gap_0xA85C_0xA920(RecompContext* ctx);
undefined gamecore(RecompContext* ctx);
undefined Undefined_Gap_0xA958_0xAF98(RecompContext* ctx);
undefined st_defaultAI(RecompContext* ctx);
undefined testGetCamPos(RecompContext* ctx);
undefined nico_kimurateststart(RecompContext* ctx);
undefined Undefined_Gap_0xB0F8_0xB190(RecompContext* ctx);
undefined nico_clothdrive(RecompContext* ctx);
undefined nico_individualClothOverSurfDetectFunc(RecompContext* ctx);
undefined Undefined_Gap_0xB260_0xB328(RecompContext* ctx);
undefined getCullingScreenSize(RecompContext* ctx);
undefined getScissoringScreenSize(RecompContext* ctx);
undefined getPlayerAliveInPauseFlag(RecompContext* ctx);
undefined Undefined_Gap_0xB354_0xB430(RecompContext* ctx);
undefined nico_defaultAI(RecompContext* ctx);
undefined nico_volatileDefaultAI(RecompContext* ctx);
undefined nico_deleteMyself(RecompContext* ctx);
undefined nico_ResetScriptCtrlAI(RecompContext* ctx);
undefined Undefined_Gap_0xB4A8_0xB568(RecompContext* ctx);
undefined initgcchartest(RecompContext* ctx);
undefined Undefined_Gap_0xB5A4_0xBD08(RecompContext* ctx);
undefined initgc(RecompContext* ctx);
undefined PauseGame(RecompContext* ctx);
undefined ReleaseGame(RecompContext* ctx);
undefined ChangeGameTimeScale(RecompContext* ctx);
undefined ChangeGameTimeScaleRatio(RecompContext* ctx);
undefined GetGameTimeScaleRatio(RecompContext* ctx);
undefined PauseAI(RecompContext* ctx);
undefined ReleaseAI(RecompContext* ctx);
undefined SwitchPadAct(RecompContext* ctx);
undefined gcCreateScriptObj(RecompContext* ctx);
undefined _gcCreateChildScriptObj(RecompContext* ctx);
undefined ChangeGameAnimeTimeScaleRatio(RecompContext* ctx);
undefined GetCurrentGameAnimeTimeScaleRatio(RecompContext* ctx);
undefined GetGameAnimeTimeScaleRatio(RecompContext* ctx);
undefined GetPlayerControlButtonContext(RecompContext* ctx);
undefined getGameAnimeTimeScaleRatio(RecompContext* ctx);
undefined RestoreDefaultGameAnimeTimeScaleRatio(RecompContext* ctx);
undefined SetDefaultGameAnimeTimeScaleRatio(RecompContext* ctx);
undefined setGameAnimeTimeScaleRatio(RecompContext* ctx);
undefined getDummyCount(RecompContext* ctx);
undefined getFrameRateMode(RecompContext* ctx);
undefined setFrameRateMode(RecompContext* ctx);
undefined Undefined_Gap_0xC0AC_0xC1C0(RecompContext* ctx);
undefined setDefaultPlayerControlButton(RecompContext* ctx);
undefined Undefined_Gap_0xC224_0xC298(RecompContext* ctx);
undefined initgcmaingp(RecompContext* ctx);
undefined setLayerFade(RecompContext* ctx);
undefined setFade(RecompContext* ctx);
undefined getFade(RecompContext* ctx);
undefined getFadeValue(RecompContext* ctx);
undefined setFadeValue(RecompContext* ctx);
undefined getDemoBarSw(RecompContext* ctx);
undefined setDemoBar(RecompContext* ctx);
undefined getDemoBar(RecompContext* ctx);
undefined getDemoBarFade(RecompContext* ctx);
undefined Undefined_Gap_0xC4B0_0xC5F0(RecompContext* ctx);
undefined initgcmain(RecompContext* ctx);
undefined Undefined_Gap_0xC62C_0xC658(RecompContext* ctx);
undefined constructor_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined Undefined_Gap_0xC7E4_0xCCB8(RecompContext* ctx);
undefined is_predict_to_acting_base_yaw_rot_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined reset_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_yaw_pitch_input_border_parameter_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_offset_yaw_parameter_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_offset_pitch_parameter_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_base_yaw_parameter_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_base_pitch_parameter_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_max_min_yaw_parameter_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_max_min_yaw_parameter_extend_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_max_min_pitch_parameter_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_reverse_input_yaw_flag_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_reverse_input_pitch_flag_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_yaw_parameter_effective_ratio_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_pitch_parameter_effective_ratio_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_base_vel_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined begin_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined doit_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined end_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined is_doing_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_temp_stop_base_rot_flag_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined update_offset_yaw_pitch_another_factor_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined update_base_yaw_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined update_base_pitch_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_max_min_clip_base_yaw_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_max_min_clip_base_pitch_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_offset_yaw_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_offset_pitch_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined is_enable_base_yaw_rot_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined is_enable_base_pitch_rot_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_base_yaw_move_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_base_pitch_move_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_base_yaw_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined set_base_pitch_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_base_yaw_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_base_pitch_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_merge_yaw_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined get_merge_pitch_nico_yaw_pitch_cntrl(RecompContext* ctx);
undefined Undefined_Gap_0xDAB8_0xE530(RecompContext* ctx);
undefined updateVuColiDispWork(RecompContext* ctx);
undefined dispVuColiDispWork(RecompContext* ctx);
undefined initVuColiDispWork(RecompContext* ctx);
undefined Undefined_Gap_0xE7EC_0xE948(RecompContext* ctx);
undefined activedemoflowDemoEnd(RecompContext* ctx);
undefined getActivedemoStage(RecompContext* ctx);
undefined chkActiveDemoStart(RecompContext* ctx);
undefined st_activedemoflow(RecompContext* ctx);
undefined activeDemoAbort(RecompContext* ctx);
undefined activeDemoStandby(RecompContext* ctx);
undefined activeDemoCancel(RecompContext* ctx);
undefined activeDemoStart(RecompContext* ctx);
undefined backStageGobjSave(RecompContext* ctx);
undefined backStageGobjSaveWithPos(RecompContext* ctx);
undefined backStageGobjCheckEntry(RecompContext* ctx);
undefined backStageGobjLoad(RecompContext* ctx);
undefined backStageCheckLoadSeg(RecompContext* ctx);
undefined backStageCheckPointSave(RecompContext* ctx);
undefined backStageCheckPointLoad(RecompContext* ctx);
undefined backStageGetBossSaveArea(RecompContext* ctx);
undefined backStageInit(RecompContext* ctx);
undefined bossStatSetActiveBoss(RecompContext* ctx);
undefined bossStatGetFromIconGObj(RecompContext* ctx);
undefined Undefined_Gap_0xFA18_0xFC30(RecompContext* ctx);
undefined bossStatStartDemo(RecompContext* ctx);
undefined bossStatInitCloudLayout(RecompContext* ctx);
undefined Undefined_Gap_0xFF24_0x10070(RecompContext* ctx);
undefined bossStatInit(RecompContext* ctx);
undefined Undefined_Gap_0x10198_0x10448(RecompContext* ctx);
undefined bossStatLayoutChk(RecompContext* ctx);
undefined bossStatSetDeadBoss(RecompContext* ctx);
undefined bossStatGetDeadBoss(RecompContext* ctx);
undefined bossStatChkDeadBoss(RecompContext* ctx);
undefined bossStatGetDeadBossNum(RecompContext* ctx);
undefined bossStatBootChk(RecompContext* ctx);
undefined bossStatGetActiveBoss(RecompContext* ctx);
undefined bossStatSrhSheetAliveBoss(RecompContext* ctx);
undefined bossStatSekibanJumpSetHorsePos(RecompContext* ctx);
undefined bossStatGetBossCloudPos(RecompContext* ctx);
undefined bossStatTimeAttackJumpSekiban(RecompContext* ctx);
undefined CheckCamFinalizerReady(RecompContext* ctx);
undefined SetCamFinalizerReady(RecompContext* ctx);
undefined ResetCamFinalizer(RecompContext* ctx);
undefined PauseCamFinalizer(RecompContext* ctx);
undefined SetCamFinalizerGeometry(RecompContext* ctx);
undefined st_camfinalizer(RecompContext* ctx);
undefined Undefined_Gap_0x10A50_0x11278(RecompContext* ctx);
undefined PlayDemoCameraOrient(RecompContext* ctx);
undefined FinishDemoCameraOrient(RecompContext* ctx);
undefined SkipCutDemoCameraOrient(RecompContext* ctx);
undefined CheckDemoCameraOrientFinished(RecompContext* ctx);
undefined getDemoEnableFlag(RecompContext* ctx);
undefined Undefined_Gap_0x1140C_0x11C88(RecompContext* ctx);
undefined SetCaptionPauseFlag(RecompContext* ctx);
undefined DisplayCaptionTable(RecompContext* ctx);
undefined DisplayCaptionTableChild(RecompContext* ctx);
undefined DisplayCaptionTableBlock(RecompContext* ctx);
undefined DisplayCaptionTableBlockWithDlLayer(RecompContext* ctx);
undefined CancelCaptionSubThreadAll(RecompContext* ctx);
undefined QuitCaptionSubThreadAll(RecompContext* ctx);
undefined Undefined_Gap_0x1218C_0x12270(RecompContext* ctx);
undefined nico_ResetCharacterObjFallDownInfo(RecompContext* ctx);
undefined nico_UnparentObject(RecompContext* ctx);
undefined nico_SendAttackMailToVCol(RecompContext* ctx);
undefined nico_SendSuicideMail(RecompContext* ctx);
undefined nico_SendPlayerFallDownDamageMail(RecompContext* ctx);
undefined nico_SendPlayerBoundDamageMail(RecompContext* ctx);
undefined nico_GetCharacterAttackedFlag(RecompContext* ctx);
undefined nico_GetCharacterAttackedGPAttr(RecompContext* ctx);
undefined nico_GetCharacterParentGPAttr(RecompContext* ctx);
undefined nico_GetPlayerCharacterRidingHorseObject(RecompContext* ctx);
undefined nico_InitScriptCharObjDefaultValue(RecompContext* ctx);
undefined nico_CheckCharacterVColPlaneAttribute(RecompContext* ctx);
undefined nico_CheckCharacterGPColPlaneAttribute(RecompContext* ctx);
undefined nico_GetGeometryPointerAttr(RecompContext* ctx);
undefined nico_timeSlow(RecompContext* ctx);
undefined nico_timeResume(RecompContext* ctx);
undefined nico_StabCharacterRootRotationToXZ(RecompContext* ctx);
undefined nico_RotCharacterRootRotationX90(RecompContext* ctx);
undefined deleteSeamlessCommonLayout(RecompContext* ctx);
undefined initSeamlessCommonLayout(RecompContext* ctx);
undefined SetDefaultStageLoad(RecompContext* ctx);
undefined st_changePlayerInspireLevel(RecompContext* ctx);
undefined Undefined_Gap_0x128A4_0x12978(RecompContext* ctx);
undefined _SCRStartLwsDemoOrient(RecompContext* ctx);
undefined demoscrCheckDemoFinish(RecompContext* ctx);
undefined demoscrCheckDemoCutSkip(RecompContext* ctx);
undefined setDefaultFsEffect(RecompContext* ctx);
undefined Undefined_Gap_0x12A04_0x12CF8(RecompContext* ctx);
undefined st_endingflow(RecompContext* ctx);
undefined endingflowStartAdpcmSeq(RecompContext* ctx);
undefined endingflowTickAdpcmSeq(RecompContext* ctx);
undefined endingflowEndAdpcmSeq(RecompContext* ctx);
undefined endingflowDemoEnd(RecompContext* ctx);
undefined endingflow_create_adpcm_tick_proc(RecompContext* ctx);
undefined endingflowDecPlayerHpPersent(RecompContext* ctx);
undefined endingflowSetTimePlayerHpMax(RecompContext* ctx);
undefined Undefined_Gap_0x13AB4_0x13BC8(RecompContext* ctx);
undefined fadeTickProc(RecompContext* ctx);
undefined initFadeParam(RecompContext* ctx);
undefined setFadeParam(RecompContext* ctx);
undefined calcFadeParam(RecompContext* ctx);
undefined checkFadeParam(RecompContext* ctx);
undefined fadeCheck(RecompContext* ctx);
undefined fadeChkStat(RecompContext* ctx);
undefined fadeWait(RecompContext* ctx);
undefined fadeIn(RecompContext* ctx);
undefined fadeOut(RecompContext* ctx);
undefined fadeWhiteOut(RecompContext* ctx);
undefined scrSetFadeColorBlack(RecompContext* ctx);
undefined scrSetFadeColorWhite(RecompContext* ctx);
undefined scrFadeBlackIn(RecompContext* ctx);
undefined scrFadeWhiteIn(RecompContext* ctx);
undefined scrFadeBlackOut(RecompContext* ctx);
undefined scrFadeWhiteOut(RecompContext* ctx);
undefined _fadeOut(RecompContext* ctx);
undefined fadeBlackOut(RecompContext* ctx);
undefined scrFadeIn(RecompContext* ctx);
undefined setTreeId(RecompContext* ctx);
undefined resetTreeId(RecompContext* ctx);
undefined nico_setFruitsFlag(RecompContext* ctx);
undefined setScriptAnimationObjChildStatus(RecompContext* ctx);
undefined nico_checkTreeAllFruitsAlreadyTaken(RecompContext* ctx);
undefined _omakeSelectFlagSet(RecompContext* ctx);
undefined omakeGetAndSelectCls(RecompContext* ctx);
undefined omakeStatInit(RecompContext* ctx);
undefined gameFlagCheckPointSave(RecompContext* ctx);
undefined gameFlagInit(RecompContext* ctx);
undefined _optionWorkSet(RecompContext* ctx);
undefined _optionWorkCls(RecompContext* ctx);
undefined _optionWorkChk(RecompContext* ctx);
undefined _optionWorkPtr(RecompContext* ctx);
undefined _gameFlagSet(RecompContext* ctx);
undefined _gameFlagCls(RecompContext* ctx);
undefined _gameFlagChk(RecompContext* ctx);
undefined _gameFlagXor(RecompContext* ctx);
undefined _gameWorkSet(RecompContext* ctx);
undefined _gameFWorkSet(RecompContext* ctx);
undefined _gameIWorkSet(RecompContext* ctx);
undefined _gameWorkCls(RecompContext* ctx);
undefined _gameWorkChk(RecompContext* ctx);
undefined _gameFWorkChk(RecompContext* ctx);
undefined _gameIWorkChk(RecompContext* ctx);
undefined fruitsFlagSet(RecompContext* ctx);
undefined fruitsFlagChk(RecompContext* ctx);
undefined getGameDataExistIcoData(RecompContext* ctx);
undefined getGameDataExistIcoDataAdrs(RecompContext* ctx);
undefined setBossClearCnt(RecompContext* ctx);
undefined getBossIndexTimeAttackBestTime(RecompContext* ctx);
undefined setBossIndexTimeAttackBestTime(RecompContext* ctx);
undefined getGameClearCnt(RecompContext* ctx);
undefined getGameClearCntAdrs(RecompContext* ctx);
undefined setGmaeClearCnt(RecompContext* ctx);
undefined getGameHardMode(RecompContext* ctx);
undefined getGameHardModeAdrs(RecompContext* ctx);
undefined setGameHardMode(RecompContext* ctx);
undefined getSavedGameTime(RecompContext* ctx);
undefined setSavedGameTime(RecompContext* ctx);
undefined getSavedClock(RecompContext* ctx);
undefined setSavedClock(RecompContext* ctx);
undefined getSavedPlaceId(RecompContext* ctx);
undefined setSavedPlaceId(RecompContext* ctx);
undefined gameFlagCheckPointLoad(RecompContext* ctx);
undefined tailsFlagSet(RecompContext* ctx);
undefined tailsFlagClr(RecompContext* ctx);
undefined tailsFlagsAllClr(RecompContext* ctx);
undefined tailsFlagChk(RecompContext* ctx);
undefined gexsFlagSet(RecompContext* ctx);
undefined gexsFlagClr(RecompContext* ctx);
undefined gexsFlagChk(RecompContext* ctx);
undefined _omakeGetFlagSet(RecompContext* ctx);
undefined _omakeGetFlagCls(RecompContext* ctx);
undefined _omakeGetFlagChk(RecompContext* ctx);
undefined _omakeSelectFlagCls(RecompContext* ctx);
undefined _omakeSelectFlagChk(RecompContext* ctx);
undefined omakeGetAndSelectSet(RecompContext* ctx);
undefined setClearGameHotStartFlag(RecompContext* ctx);
undefined getClearGameHotStartFlag(RecompContext* ctx);
undefined gOptionMcSave(RecompContext* ctx);
undefined gOptionMcLoad(RecompContext* ctx);
undefined optionFlagInit(RecompContext* ctx);
undefined getOptionDataAdrsAndSize(RecompContext* ctx);
undefined st_menupause(RecompContext* ctx);
undefined Undefined_Gap_0x160A8_0x16A18(RecompContext* ctx);
undefined st_gameflow(RecompContext* ctx);
undefined gameflowBossEyeCameraDisable(RecompContext* ctx);
undefined gameflowMpegCancelChk(RecompContext* ctx);
undefined gameflowSheetMgrAllReqWait(RecompContext* ctx);
undefined gameflowSheetMgrSplFsStart(RecompContext* ctx);
undefined gameflowSheetMgrSplFsEnd(RecompContext* ctx);
undefined gameflowSelectGameoverMenu(RecompContext* ctx);
undefined gameflowChangeHorse(RecompContext* ctx);
undefined gameflowSetPos(RecompContext* ctx);
undefined gameflowJumpOp2DemoSkip(RecompContext* ctx);
undefined gameflowSetPauseEnable(RecompContext* ctx);
undefined gameflowSetCaptionPause(RecompContext* ctx);
undefined gameflowGameOver(RecompContext* ctx);
undefined gameflowGetJumpSekiban(RecompContext* ctx);
undefined gameflowSetJumpSekiban(RecompContext* ctx);
undefined Undefined_Gap_0x1866C_0x18990(RecompContext* ctx);
undefined gameflowJumpOp2DemoNoSkip(RecompContext* ctx);
undefined Undefined_Gap_0x18A10_0x18CC8(RecompContext* ctx);
undefined gameModeSet(RecompContext* ctx);
undefined gameModeCls(RecompContext* ctx);
undefined gameModeInit(RecompContext* ctx);
undefined Undefined_Gap_0x18DC4_0x18ED0(RecompContext* ctx);
undefined gStatCheckPointLoad(RecompContext* ctx);
undefined gStatLoadPlayerAccessories(RecompContext* ctx);
undefined gStatRestartPlayerChara(RecompContext* ctx);
undefined gStatReloadHorseChara(RecompContext* ctx);
undefined gStatCheckPointSave(RecompContext* ctx);
undefined gStatChekcPointSaveHookPlayerHorsePos(RecompContext* ctx);
undefined gStatOmakeSave(RecompContext* ctx);
undefined gStatPlaceIdToSavePoint(RecompContext* ctx);
undefined gStatMcSave(RecompContext* ctx);
undefined gStatMcLoad(RecompContext* ctx);
undefined gStatGetOmakeStatAdrs(RecompContext* ctx);
undefined gStatSaveDataGameFlagChk(RecompContext* ctx);
undefined gStatGObjDispOn(RecompContext* ctx);
undefined gStatGObjDispOff(RecompContext* ctx);
undefined gStatGObjDispChk(RecompContext* ctx);
undefined gStatGobjDispGflagChk(RecompContext* ctx);
undefined gStatGobjDispGflagSet(RecompContext* ctx);
undefined gStatGobjDispGflagCls(RecompContext* ctx);
undefined gStatSetGObjAdrs(RecompContext* ctx);
undefined gStatGetGObjAdrs(RecompContext* ctx);
undefined gStatStartTimeAttack(RecompContext* ctx);
undefined gStatStopTimeAttack(RecompContext* ctx);
undefined gStatGetPlayerAccessoriesDamgeRaitoToPlayer(RecompContext* ctx);
undefined gStatGetPlayerAccessoriesDamgeRaitoToBoss(RecompContext* ctx);
undefined gStatLoadPlayerChara(RecompContext* ctx);
undefined gStatUnloadPlayerChara(RecompContext* ctx);
undefined gStatGetHorseDemoStageIndex(RecompContext* ctx);
undefined gStatGetHorseDemoISYSObj(RecompContext* ctx);
undefined gStatLoadHorseChara(RecompContext* ctx);
undefined gStatUnloadHorseChara(RecompContext* ctx);
undefined gStatRestartHorseChara(RecompContext* ctx);
undefined gStatLoadAdvertiseHorseChara(RecompContext* ctx);
undefined gStatUnloadAdvertiseHorseChara(RecompContext* ctx);
undefined gStatInit(RecompContext* ctx);
undefined gStatInitNotOmakeInit(RecompContext* ctx);
undefined gstatBootMcChkExistNicoData(RecompContext* ctx);
undefined gstatBootMcSetExistNicoData(RecompContext* ctx);
undefined gstatBootMcSetLastSaveOmakeStat(RecompContext* ctx);
undefined gstatBootMcCurSetLastSaveOmakeStat(RecompContext* ctx);
undefined gstatBootMcSetExistIcoData(RecompContext* ctx);
undefined gstatBootMcChkExistIcoData(RecompContext* ctx);
undefined st_WaitGPFinish(RecompContext* ctx);
undefined parseHydeObject(RecompContext* ctx);
undefined Undefined_Gap_0x1A3E0_0x1A658(RecompContext* ctx);
undefined st_jumphokoraflow(RecompContext* ctx);
undefined jumphokoraflowDemoStart(RecompContext* ctx);
undefined jumphokoraflowDemoEnd(RecompContext* ctx);
undefined jumphokoraGetDemoInfo(RecompContext* ctx);
undefined Undefined_Gap_0x1AB84_0x1AD10(RecompContext* ctx);
undefined loadObj(RecompContext* ctx);
undefined Undefined_Gap_0x1B970_0x1C038(RecompContext* ctx);
undefined checkReadyPlayerCollision(RecompContext* ctx);
undefined commonDataLoad(RecompContext* ctx);
undefined st_reloadtask(RecompContext* ctx);
undefined gcCheckStageLoadFinish(RecompContext* ctx);
undefined st_collisionalias(RecompContext* ctx);
undefined Undefined_Gap_0x1C794_0x1C7B0(RecompContext* ctx);
undefined unloadObj(RecompContext* ctx);
undefined getStageLayoutGeometryPointer(RecompContext* ctx);
undefined checkBoot(RecompContext* ctx);
undefined reloadStage(RecompContext* ctx);
undefined reloadStageWithPlayerPos(RecompContext* ctx);
undefined forceMoveObjToPos(RecompContext* ctx);
undefined languageMenuLoad(RecompContext* ctx);
undefined languageMenuUnload(RecompContext* ctx);
undefined StartLwsDemoManager(RecompContext* ctx);
undefined Undefined_Gap_0x1CA44_0x1CA60(RecompContext* ctx);
undefined st_opflow(RecompContext* ctx);
undefined opflowOp1End(RecompContext* ctx);
undefined opflowOp2Start(RecompContext* ctx);
undefined opflowOp2End(RecompContext* ctx);
undefined opflowChkTitleDemoStart(RecompContext* ctx);
undefined opflowTitleDmoeEnd(RecompContext* ctx);
undefined opflowSetDemoFrame(RecompContext* ctx);
undefined opflowChkAbort(RecompContext* ctx);
undefined opflowChkLoadStart(RecompContext* ctx);
undefined opflowCompareOptionData(RecompContext* ctx);
undefined Undefined_Gap_0x1D8F0_0x1DA30(RecompContext* ctx);
undefined updatePowerWork(RecompContext* ctx);
undefined chkMotionList(RecompContext* ctx);
undefined getPlayerHp(RecompContext* ctx);
undefined setPlayerHp(RecompContext* ctx);
undefined addPlayerHp(RecompContext* ctx);
undefined _getPlayerHpRatio(RecompContext* ctx);
undefined getPlayerHpRatio(RecompContext* ctx);
undefined getPlayerMaxHp(RecompContext* ctx);
undefined setPlayerMaxHp(RecompContext* ctx);
undefined addPlayerMaxHp(RecompContext* ctx);
undefined getPlayerGrip(RecompContext* ctx);
undefined setPlayerGrip(RecompContext* ctx);
undefined addPlayerGrip(RecompContext* ctx);
undefined getPlayerMaxGrip(RecompContext* ctx);
undefined setPlayerMaxGrip(RecompContext* ctx);
undefined addPlayerMaxGrip(RecompContext* ctx);
undefined getPlayerMaxGripRatio(RecompContext* ctx);
undefined getPlayerO2(RecompContext* ctx);
undefined setPlayerO2(RecompContext* ctx);
undefined addPlayerO2(RecompContext* ctx);
undefined initPowerWork(RecompContext* ctx);
undefined resetAttackPower(RecompContext* ctx);
undefined getAttackPowerRatio(RecompContext* ctx);
undefined getNowPower(RecompContext* ctx);
undefined getNowPowerRatio(RecompContext* ctx);
undefined setFullPower(RecompContext* ctx);
undefined SCRPowerReset(RecompContext* ctx);
undefined Undefined_Gap_0x1EA0C_0x1EA20(RecompContext* ctx);
undefined getStageChipID(RecompContext* ctx);
undefined getStageAreaIndexByPos(RecompContext* ctx);
undefined Undefined_Gap_0x1EBFC_0x1FC28(RecompContext* ctx);
undefined EntrySeamlessStageObject(RecompContext* ctx);
undefined Undefined_Gap_0x1FF38_0x21710(RecompContext* ctx);
undefined SeamlessStageLoadComplete(RecompContext* ctx);
undefined Undefined_Gap_0x218A4_0x22B08(RecompContext* ctx);
undefined DeleteNoUseLoadAreaGroupData(RecompContext* ctx);
undefined Undefined_Gap_0x22C98_0x23068(RecompContext* ctx);
undefined InitSeamlessStageLoad(RecompContext* ctx);
undefined Undefined_Gap_0x23418_0x23540(RecompContext* ctx);
undefined loadCdSeamlessStageFile(RecompContext* ctx);
undefined getAreaSize(RecompContext* ctx);
undefined getStageAreaID(RecompContext* ctx);
undefined getStageAreaName(RecompContext* ctx);
undefined getStageAreaNameUV(RecompContext* ctx);
undefined getPosOnMap(RecompContext* ctx);
undefined SetSeamlessZFogDist(RecompContext* ctx);
undefined getSeamlessStageHighModelDispDist(RecompContext* ctx);
undefined getSeamlessStageMiddleModelDispDist(RecompContext* ctx);
undefined getSeamlessStageHighModelDispDistDefault(RecompContext* ctx);
undefined getSeamlessStageMiddleModelDispDistDefault(RecompContext* ctx);
undefined getStageChipIDReal(RecompContext* ctx);
undefined getStageChipIDWithOffset(RecompContext* ctx);
undefined getStageNormalizePosition(RecompContext* ctx);
undefined getCameraPosOnMap(RecompContext* ctx);
undefined getSeamlessStageCenter(RecompContext* ctx);
undefined getSeamlessStageEnv(RecompContext* ctx);
undefined getStageLayout(RecompContext* ctx);
undefined getStageStat(RecompContext* ctx);
undefined GetLoadAreaGroupData(RecompContext* ctx);
undefined CreateLoadAreaGroupData(RecompContext* ctx);
undefined DeleteLoadAreaGroupData(RecompContext* ctx);
undefined forceLoadSeamlessStage(RecompContext* ctx);
undefined SetSeamlessStageControlObject(RecompContext* ctx);
undefined UpdateSeamlessStageLoad(RecompContext* ctx);
undefined DeleteAllSeamlessStageObject(RecompContext* ctx);
undefined DeleteSeamlessStageLoad(RecompContext* ctx);
undefined GetStageChipNum(RecompContext* ctx);
undefined DeleteSeamlessStageObject(RecompContext* ctx);
undefined GetSeamlessStageObjectGroup(RecompContext* ctx);
undefined PauseSeamlessStageManager(RecompContext* ctx);
undefined UnloadAllSeamlessStageObject(RecompContext* ctx);
undefined getChipNo(RecompContext* ctx);
undefined getStageIDWithOffset(RecompContext* ctx);
undefined getStageStatByChipNo(RecompContext* ctx);
undefined ClearStageChipParam(RecompContext* ctx);
undefined getStageChipIDFloat(RecompContext* ctx);
undefined Undefined_Gap_0x245FC_0x24710(RecompContext* ctx);
undefined seamlessstage_mallocerrorfunc(RecompContext* ctx);
undefined isSeamlessStage(RecompContext* ctx);
undefined initSeamlessStageObj(RecompContext* ctx);
undefined unloadCdSeamlessStageFile(RecompContext* ctx);
undefined WaitUnloadSeamlessStageObject(RecompContext* ctx);
undefined Undefined_Gap_0x24A40_0x24AD8(RecompContext* ctx);
undefined RestartSeamlessStage(RecompContext* ctx);
undefined initStageAlignParam(RecompContext* ctx);
undefined deleteStageAlignParam(RecompContext* ctx);
undefined Undefined_Gap_0x24B70_0x24BF8(RecompContext* ctx);
undefined initSlowObject(RecompContext* ctx);
undefined deleteSlowObject(RecompContext* ctx);
undefined initSlowManager(RecompContext* ctx);
undefined createSpecialEffectObj(RecompContext* ctx);
undefined updateSpecialEffectManager(RecompContext* ctx);
undefined getSpecialEffectObjWork(RecompContext* ctx);
undefined Undefined_Gap_0x25150_0x26008(RecompContext* ctx);
undefined StaffRollStart(RecompContext* ctx);
undefined StaffRollCancel(RecompContext* ctx);
undefined getstagenumber(RecompContext* ctx);
undefined Undefined_Gap_0x26200_0x266A0(RecompContext* ctx);
undefined initlayout(RecompContext* ctx);
undefined Undefined_Gap_0x26A7C_0x2B3C8(RecompContext* ctx);
undefined GetStageContext(RecompContext* ctx);
undefined StageManagerCheckAreaExist(RecompContext* ctx);
undefined Undefined_Gap_0x2B800_0x2BC48(RecompContext* ctx);
undefined stagemanager_checkstageAlreadyLoadRequestedByStrptr(RecompContext* ctx);
undefined stagemanager_loadstageByStrptrWithTargetObjectAreaCenter(RecompContext* ctx);
undefined GetStageContextByPos(RecompContext* ctx);
undefined GetWorldLayoutSheetSegHeader(RecompContext* ctx);
undefined gcGetStageData(RecompContext* ctx);
undefined gcGetNbStages(RecompContext* ctx);
undefined CreateStageManager(RecompContext* ctx);
undefined SetupStageManager(RecompContext* ctx);
undefined SetupStageManagerWithVariationId(RecompContext* ctx);
undefined CheckStageManagerLoadArea(RecompContext* ctx);
undefined GetStageCenter(RecompContext* ctx);
undefined GetStageName(RecompContext* ctx);
undefined GetStageAreaNumber(RecompContext* ctx);
undefined GetStageAreaNumberByPos(RecompContext* ctx);
undefined GetStageNumberByPos(RecompContext* ctx);
undefined SetStageManagerAreaPreload(RecompContext* ctx);
undefined SetStageManagerAreaPreloadWithAreaOffset(RecompContext* ctx);
undefined stagemanager_createsubthread(RecompContext* ctx);
undefined stagemanager_loadstage(RecompContext* ctx);
undefined stagemanager_unloadstage(RecompContext* ctx);
undefined stagemanager_getStageNumberWithStageDataStrptr(RecompContext* ctx);
undefined stagemanager_loadstagecore(RecompContext* ctx);
undefined stagemanager_unloadstagecore(RecompContext* ctx);
undefined stagemanager_GetStageAlignParam(RecompContext* ctx);
undefined GetStageNumberNumber(RecompContext* ctx);
undefined stagemanager_refleshCurrentArea(RecompContext* ctx);
undefined stagemanager_restartstagecore(RecompContext* ctx);
undefined stagemanager_getCenterFromAreaId(RecompContext* ctx);
undefined stagemanager_getNbWorldLayoutDatas(RecompContext* ctx);
undefined stagemanager_checkstageAlreadyLoadRequested(RecompContext* ctx);
undefined stagemanager_checkstageAlreadyLoaded(RecompContext* ctx);
undefined stagemanager_checkstageAlreadyLoadedByStrptr(RecompContext* ctx);
undefined stagemanager_checkstageAlreadyLoadedByStageData(RecompContext* ctx);
undefined stagemanager_unloadstageByStrptr(RecompContext* ctx);
undefined stagemanager_changeSegmentVariation(RecompContext* ctx);
undefined stagemanager_getSegmentVariation(RecompContext* ctx);
undefined FlushStageManager(RecompContext* ctx);
undefined stagemanager_loadstage_nowait_norefcount(RecompContext* ctx);
undefined stagemanager_unloadstageByStrptr_nowait_norefcount(RecompContext* ctx);
undefined getWorldLayoutHead(RecompContext* ctx);
undefined initStageLayout(RecompContext* ctx);
undefined deleteStageLayout(RecompContext* ctx);
undefined initWorldLayout(RecompContext* ctx);
undefined deleteWorldLayout(RecompContext* ctx);
undefined initGameObject(RecompContext* ctx);
undefined deleteGameObject(RecompContext* ctx);
undefined Undefined_Gap_0x2D058_0x2D710(RecompContext* ctx);
undefined st_stageboundary(RecompContext* ctx);
undefined Undefined_Gap_0x2D910_0x2DA80(RecompContext* ctx);
undefined PauseStageBoundaryManager(RecompContext* ctx);
undefined CreateStageBoundaryManager(RecompContext* ctx);
undefined st_controltarget(RecompContext* ctx);
undefined getBossExtControl(RecompContext* ctx);
undefined getTargetAIControlMode(RecompContext* ctx);
undefined time_attack_search(RecompContext* ctx);
undefined time_attack_init_gstat_adrs(RecompContext* ctx);
undefined time_attack_get_best_time(RecompContext* ctx);
undefined time_attack_set_best_time(RecompContext* ctx);
undefined time_attack_get_boss_status(RecompContext* ctx);
undefined time_attack_end(RecompContext* ctx);
undefined time_attack_start(RecompContext* ctx);
undefined time_attack_retry(RecompContext* ctx);
undefined time_attack_get_clear_num(RecompContext* ctx);
undefined time_attack_begin(RecompContext* ctx);
undefined Undefined_Gap_0x2E1E4_0x2F3E8(RecompContext* ctx);
undefined soundScriptTickProc(RecompContext* ctx);
undefined bgmDemoPackagePreload(RecompContext* ctx);
undefined Undefined_Gap_0x2F738_0x2FDD8(RecompContext* ctx);
undefined initAdpcmPackage(RecompContext* ctx);
undefined deleteAdpcmPackage(RecompContext* ctx);
undefined bgmScriptSetStatus(RecompContext* ctx);
undefined bgmPlayerDemoEndTypeAllClose(RecompContext* ctx);
undefined bgmMinPriorityForceClose(RecompContext* ctx);
undefined bgmScriptTickProc(RecompContext* ctx);
undefined bgmScriptBossTickProc(RecompContext* ctx);
undefined bgmScriptSendSoundSignal(RecompContext* ctx);
undefined bgmScriptRecvSoundSignal(RecompContext* ctx);
undefined bgmDemoPackagePlay(RecompContext* ctx);
undefined bgmEnvTickProckMask(RecompContext* ctx);
undefined initBgmScript(RecompContext* ctx);
undefined Undefined_Gap_0x304BC_0x30510(RecompContext* ctx);
undefined bossNormalHook(RecompContext* ctx);
undefined Undefined_Gap_0x30520_0x30590(RecompContext* ctx);
undefined scriptNormalHook(RecompContext* ctx);
undefined Undefined_Gap_0x305A0_0x305A8(RecompContext* ctx);
undefined demoNormalHook(RecompContext* ctx);
undefined initAdpcmOrient(RecompContext* ctx);
undefined deleteAdpcmOrient(RecompContext* ctx);
undefined Undefined_Gap_0x30684_0x308F0(RecompContext* ctx);
undefined bgmAutoStart(RecompContext* ctx);
undefined bgmStandbyWithPri(RecompContext* ctx);
undefined bgmStandby(RecompContext* ctx);
undefined bgmChkStandbyComplete(RecompContext* ctx);
undefined bgmPlay(RecompContext* ctx);
undefined bgmStop(RecompContext* ctx);
undefined bgmStopChk(RecompContext* ctx);
undefined bgmStopAllAttr(RecompContext* ctx);
undefined bgmChangeVol(RecompContext* ctx);
undefined bgmStartGameOver(RecompContext* ctx);
undefined bgmEndGameOver(RecompContext* ctx);
undefined bgmStageInit(RecompContext* ctx);
undefined CreateBgmThread(RecompContext* ctx);
undefined CreateWindThread(RecompContext* ctx);
undefined Undefined_Gap_0x30D14_0x30D20(RecompContext* ctx);
undefined st_activedemo(RecompContext* ctx);
undefined active_demo_end(RecompContext* ctx);
undefined Undefined_Gap_0x313DC_0x31560(RecompContext* ctx);
undefined st_unload_horse_char(RecompContext* ctx);
undefined demo_last_battle1(RecompContext* ctx);
undefined demo_brige_resetHorseParent(RecompContext* ctx);
undefined demo_brige_resetHorseBridle(RecompContext* ctx);
undefined demo_bridge_setHorseBridle(RecompContext* ctx);
undefined Undefined_Gap_0x316F0_0x32D30(RecompContext* ctx);
undefined arrowManagerInit(RecompContext* ctx);
undefined SCRSetupArrow1ByPlayer2(RecompContext* ctx);
undefined Undefined_Gap_0x33648_0x34178(RecompContext* ctx);
undefined arrowFilter(RecompContext* ctx);
undefined getSoundBowPos(RecompContext* ctx);
undefined existSoundBow(RecompContext* ctx);
undefined chkNearStickArrow(RecompContext* ctx);
undefined allArrowRelease(RecompContext* ctx);
undefined arrowObjThrustParent(RecompContext* ctx);
undefined getArrowObjParent(RecompContext* ctx);
undefined Undefined_Gap_0x34690_0x34948(RecompContext* ctx);
undefined nico_birdBossStart(RecompContext* ctx);
undefined SCRFuncBirdSetAttainPosForPathData(RecompContext* ctx);
undefined Undefined_Gap_0x34C60_0x34D10(RecompContext* ctx);
undefined SCRFuncBirdSetLandingPos(RecompContext* ctx);
undefined SCRFuncBirdInitRotMode(RecompContext* ctx);
undefined SCRFuncBirdInputRotateMotionKey(RecompContext* ctx);
undefined SCRBirdStartBreath(RecompContext* ctx);
undefined SCRBirdStopBreath(RecompContext* ctx);
undefined SCRBirdStartFlap(RecompContext* ctx);
undefined SCRFuncBirdSetAttainNearPosForPathData(RecompContext* ctx);
undefined SCRConditionBirdPassingEachOther(RecompContext* ctx);
undefined SCRConditionBirdBeginningApproaching(RecompContext* ctx);
undefined SCRFuncBirdSetAttainFarPosForPathData(RecompContext* ctx);
undefined Undefined_Gap_0x353CC_0x355B8(RecompContext* ctx);
undefined st_mcBootChk(RecompContext* ctx);
undefined bootmccheck(RecompContext* ctx);
undefined bootmccheckscript(RecompContext* ctx);
undefined bootmccheckscriptNoBoot(RecompContext* ctx);
undefined bootscelogo(RecompContext* ctx);
undefined bootscelogoscript(RecompContext* ctx);
undefined SCRBossDebugDeath(RecompContext* ctx);
undefined SCRMammothBreaksWall(RecompContext* ctx);
undefined Undefined_Gap_0x36154_0x36588(RecompContext* ctx);
undefined character_ikcolsearch(RecompContext* ctx);
undefined Undefined_Gap_0x3729C_0x39D78(RecompContext* ctx);
undefined nico_IK_footPosCalc(RecompContext* ctx);
undefined nico_IK_footPosCalcLeafDirectConnect(RecompContext* ctx);
undefined nico_IK_footPosCalc_AimPositionXZ(RecompContext* ctx);
undefined nico_IK_footPosCalcLeafDirectConnect_AimPositionXZ(RecompContext* ctx);
undefined nico_IK_legGetLower(RecompContext* ctx);
undefined nico_IK_legCalcAndSetUpper(RecompContext* ctx);
undefined nico_IK_legSetLower(RecompContext* ctx);
undefined nico_IK_legSetLowerFit(RecompContext* ctx);
undefined nico_neckFitToParentInvDirIK(RecompContext* ctx);
undefined character_ikcolattrfilter(RecompContext* ctx);
undefined getPinAttackIKWorkSize(RecompContext* ctx);
undefined initPinAttackIKWork(RecompContext* ctx);
undefined SCRSetCharacterObjPinAttackIKTargetInfo(RecompContext* ctx);
undefined Undefined_Gap_0x3B2F8_0x3B320(RecompContext* ctx);
undefined GetVolumeClippedTargetPos(RecompContext* ctx);
undefined nico_IK_getParentPoint(RecompContext* ctx);
undefined nico_IK_getAddSubPosition(RecompContext* ctx);
undefined nico_IK_legAddSubPosition(RecompContext* ctx);
undefined nico_IK_legGetUpper(RecompContext* ctx);
undefined nico_IK_leafSetWithMotion(RecompContext* ctx);
undefined nico_IK_recomputeAll(RecompContext* ctx);
undefined nico_IK_idDetect(RecompContext* ctx);
undefined nico_IK_TargetFromRoot(RecompContext* ctx);
undefined nico_neckFitToParentInvDirIKBankReverse(RecompContext* ctx);
undefined nico_IK_targetAiming(RecompContext* ctx);
undefined Undefined_Gap_0x3BE7C_0x3BFA8(RecompContext* ctx);
undefined nico_IK_setTargetQFromSkeletonRestWithLimit(RecompContext* ctx);
undefined getSkeletonGlobalGeo(RecompContext* ctx);
undefined Undefined_Gap_0x3C37C_0x3C898(RecompContext* ctx);
undefined SCRGetSizeOfBossWork(RecompContext* ctx);
undefined SCRCharaInitBossWork(RecompContext* ctx);
undefined Undefined_Gap_0x3CF3C_0x3D898(RecompContext* ctx);
undefined SCRExecBossPreProcess(RecompContext* ctx);
undefined SCRJumpNearestDeadGeometry(RecompContext* ctx);
undefined SCRJumpNearestPointUsingDeadGeometry(RecompContext* ctx);
undefined getBossPartsLifeRatio(RecompContext* ctx);
undefined getBossWeakLifeRatio(RecompContext* ctx);
undefined SCRSetCharaMotionPlaySpeedRatio(RecompContext* ctx);
undefined SCRReleaseBossWork(RecompContext* ctx);
undefined SCRGetBossCollisionAttribute(RecompContext* ctx);
undefined SCRGetBossPartsDamage(RecompContext* ctx);
undefined chkBossWeakTexExist(RecompContext* ctx);
undefined chkBossTrigTexExist(RecompContext* ctx);
undefined chkBossTrigTurnOff(RecompContext* ctx);
undefined SCRGetBossWork(RecompContext* ctx);
undefined SCRGetBossTypeDef(RecompContext* ctx);
undefined setBossAbsoluteDeath(RecompContext* ctx);
undefined SCRGetBossPartsDamageNum(RecompContext* ctx);
undefined SCRGetBossPartsDamageFromIndex(RecompContext* ctx);
undefined SCRGetBossPartsDamageFromColAttr(RecompContext* ctx);
undefined SCRGetBackStageBossPartsDamageFromColAttr(RecompContext* ctx);
undefined SCRGetBossWeakPointIndexFromColAttr(RecompContext* ctx);
undefined SCRGetBossWeakPointAngleFromIndex(RecompContext* ctx);
undefined getBossPartsCurDamage(RecompContext* ctx);
undefined getBossWeakCurDamage(RecompContext* ctx);
undefined IsBossDeathNextAttack(RecompContext* ctx);
undefined SCRExecBossPostProcess(RecompContext* ctx);
undefined Undefined_Gap_0x3F240_0x3F290(RecompContext* ctx);
undefined SCRGetBossPartsDamageFromWeak(RecompContext* ctx);
undefined SCRGetBackStageBossPartsDamageFromWeak(RecompContext* ctx);
undefined GetBossPartsDamage(RecompContext* ctx);
undefined GetBossPartsDamagePerParts(RecompContext* ctx);
undefined Undefined_Gap_0x3F450_0x3F560(RecompContext* ctx);
undefined nico_boxtest(RecompContext* ctx);
undefined nico_buddhaStart(RecompContext* ctx);
undefined Undefined_Gap_0x3F690_0x3F710(RecompContext* ctx);
undefined SCRBuddhaShoot(RecompContext* ctx);
undefined SCRFuncBuddhaMissileInit(RecompContext* ctx);
undefined SCRFuncBuddhaMissileMain(RecompContext* ctx);
undefined SCRFuncBuddhaMissileInit2(RecompContext* ctx);
undefined SCRFuncBuddhaMissileMain2(RecompContext* ctx);
undefined Undefined_Gap_0x3FA98_0x3FBC0(RecompContext* ctx);
undefined nico_cerberusEye(RecompContext* ctx);
undefined nico_cerberusRStart(RecompContext* ctx);
undefined SCRConditionSendDamageToCollisionObject2(RecompContext* ctx);
undefined Undefined_Gap_0x40AF0_0x40E90(RecompContext* ctx);
undefined SCRConditionSendDamageToCollisionObject3(RecompContext* ctx);
undefined nico_leoBodyExpression(RecompContext* ctx);
undefined Undefined_Gap_0x41594_0x41620(RecompContext* ctx);
undefined SCRCerberusEventLineCut(RecompContext* ctx);
undefined SCRCerberusArmorBroken(RecompContext* ctx);
undefined SCRCerberusPollFalldown(RecompContext* ctx);
undefined SCRConditionSendDamageToCollisionObject(RecompContext* ctx);
undefined Undefined_Gap_0x418D0_0x418E0(RecompContext* ctx);
undefined SCRFuncCerberusSetPlayerParentObj(RecompContext* ctx);
undefined Undefined_Gap_0x41928_0x41930(RecompContext* ctx);
undefined chooseLangScript(RecompContext* ctx);
undefined menuSelected(RecompContext* ctx);
undefined bootChooseLangScript(RecompContext* ctx);
undefined nico_commonBossAI_home(RecompContext* ctx);
undefined nico_bossAIWalk(RecompContext* ctx);
undefined nico_CommonBossStart(RecompContext* ctx);
undefined _SCRPlayLWSWithTargetAttackedPoint(RecompContext* ctx);
undefined _SCRGetCollisionTwoBoneRay(RecompContext* ctx);
undefined Undefined_Gap_0x4207C_0x42370(RecompContext* ctx);
undefined nico_parentAndScaleSync(RecompContext* ctx);
undefined getDebugDispType(RecompContext* ctx);
undefined getDebugMotionStop(RecompContext* ctx);
undefined getDebugScrDataPrintf(RecompContext* ctx);
undefined getDebugHorseRoute(RecompContext* ctx);
undefined getDebugHorseBikko(RecompContext* ctx);
undefined getDebugParentAttrReset(RecompContext* ctx);
undefined getDebugTrigerPrintf(RecompContext* ctx);
undefined getDebugHorseInsurance(RecompContext* ctx);
undefined getDebugHorsePathVirtual(RecompContext* ctx);
undefined getDebugViewDisp(RecompContext* ctx);
undefined GetDebugDispType(RecompContext* ctx);
undefined GetDebugMotionStop(RecompContext* ctx);
undefined GetDebugScrDataPrintf(RecompContext* ctx);
undefined GetDebugViewDisp(RecompContext* ctx);
undefined _SCRMallocAlign(RecompContext* ctx);
undefined SCRGetFirstObj(RecompContext* ctx);
undefined SCRGetTargetPosXZDirOnMyCtrlGeo(RecompContext* ctx);
undefined SCRGetTargetObjXZDirOnMyCtrlGeo(RecompContext* ctx);
undefined SCRGetXZAngle(RecompContext* ctx);
undefined SCRGetYZAngle(RecompContext* ctx);
undefined SCRCharaTurn(RecompContext* ctx);
undefined SCRCharaTurnDirectInput(RecompContext* ctx);
undefined SCRPlayableCharaTurnDirectInput(RecompContext* ctx);
undefined SCRCharaAccel(RecompContext* ctx);
undefined SCRCharaDead(RecompContext* ctx);
undefined SCRCharaStand(RecompContext* ctx);
undefined SCRGetCharNodePos(RecompContext* ctx);
undefined SCRGetRoot(RecompContext* ctx);
undefined SCRGetDir(RecompContext* ctx);
undefined SCRGetAngle(RecompContext* ctx);
undefined SCRSetCharaMotionPlaySpeedRatioDirect(RecompContext* ctx);
undefined SCRGetLocalDirZ(RecompContext* ctx);
undefined SCRRequestMotionDirect(RecompContext* ctx);
undefined SCRSetRootScaleRatio(RecompContext* ctx);
undefined SCRSetCharaRootTurnScaleRatio(RecompContext* ctx);
undefined _SCRPlayLWS(RecompContext* ctx);
undefined _SCRSetupLWSWithTargetNodeParent(RecompContext* ctx);
undefined _SCRSetupLWS(RecompContext* ctx);
undefined _SCRSetupLWSIgnorePauseSetStackSize(RecompContext* ctx);
undefined _SCRSetupLWSIgnorePause(RecompContext* ctx);
undefined _SCRSetupLWSSetScriptSetStackSize(RecompContext* ctx);
undefined _SCRStartLWS(RecompContext* ctx);
undefined _SCRStartLWSIgnorePause(RecompContext* ctx);
undefined SCRSetLWSGeometryWithNoParentChange(RecompContext* ctx);
undefined SCRSetLWSGeometry(RecompContext* ctx);
undefined SCRSetLWSGeometryWithZY(RecompContext* ctx);
undefined SCRGetCollision(RecompContext* ctx);
undefined SCRGetCollisionCallBack(RecompContext* ctx);
undefined _SCRGetCollisionTwoBoneRay3D(RecompContext* ctx);
undefined _SCRGetCharaCollision(RecompContext* ctx);
undefined _SCRRequestDamageReaction(RecompContext* ctx);
undefined SCRGetGetGeometryPointerLegalParentObj(RecompContext* ctx);
undefined SCRCreateScriptCharObj(RecompContext* ctx);
undefined SCRDeleteAllActiveScriptAnimationObj(RecompContext* ctx);
undefined _setNodeHPBIllegal(RecompContext* ctx);
undefined _setNodeHPB(RecompContext* ctx);
undefined _setRootXYZHPB(RecompContext* ctx);
undefined getexpressiondatapoint(RecompContext* ctx);
undefined setGameFlagForGameObj(RecompContext* ctx);
undefined chkGameFlagForGameObj(RecompContext* ctx);
undefined bootTexAlphaAnim(RecompContext* ctx);
undefined nico_weaponUpdateGeometry(RecompContext* ctx);
undefined getBosstatusDispMode(RecompContext* ctx);
undefined Undefined_Gap_0x443DC_0x44440(RecompContext* ctx);
undefined getBoneCollisionDebugMode(RecompContext* ctx);
undefined SCRSetScriptKeyToWallObject(RecompContext* ctx);
undefined nico_optBoneParentScaleUpdateScript(RecompContext* ctx);
undefined nico_updatescript(RecompContext* ctx);
undefined SCRSetMyOwnGameFlag(RecompContext* ctx);
undefined SCRResetMyOwnGameFlag(RecompContext* ctx);
undefined SCRResetCharacterObj4DDynamicsInfo(RecompContext* ctx);
undefined nico_demoCharaScaleSync(RecompContext* ctx);
undefined nico_parentSync(RecompContext* ctx);
undefined Undefined_Gap_0x44850_0x44868(RecompContext* ctx);
undefined controllerAlertScript(RecompContext* ctx);
undefined controllerAlertDisable(RecompContext* ctx);
undefined NICO_is_quake_attack_hit(RecompContext* ctx);
undefined NICO_is_quake_attack_hit_except_boss(RecompContext* ctx);
undefined NICO_is_quake_attack_hit_only_boss(RecompContext* ctx);
undefined NICO_is_hit_except_underwater(RecompContext* ctx);
undefined NICO_is_hit_except_underwater_or_boss(RecompContext* ctx);
undefined is_LwsOrientObj(RecompContext* ctx);
undefined Undefined_Gap_0x44B98_0x4ADF8(RecompContext* ctx);
undefined CreateDeathTentacle(RecompContext* ctx);
undefined CheckDeathTentacle(RecompContext* ctx);
undefined Undefined_Gap_0x4AFA0_0x4B030(RecompContext* ctx);
undefined AI_GetDeathTentWorkSize(RecompContext* ctx);
undefined Undefined_Gap_0x4B058_0x4B090(RecompContext* ctx);
undefined GetMeshObjInfo(RecompContext* ctx);
undefined AI_GetBaseWorkSize(RecompContext* ctx);
undefined Undefined_Gap_0x4B0F0_0x4B150(RecompContext* ctx);
undefined dischargeInit(RecompContext* ctx);
undefined dischargeMain(RecompContext* ctx);
undefined setDischargeParam(RecompContext* ctx);
undefined getDischargeSize(RecompContext* ctx);
undefined dischargeTerm(RecompContext* ctx);
undefined nico_dorminStart(RecompContext* ctx);
undefined Undefined_Gap_0x4B8A4_0x4B948(RecompContext* ctx);
undefined nico_balltest(RecompContext* ctx);
undefined nico_pendulumtest(RecompContext* ctx);
undefined getDynamicsTestType(RecompContext* ctx);
undefined getPendulumGravityRatio(RecompContext* ctx);
undefined getPendulumAirResistRatio(RecompContext* ctx);
undefined getPendulumSideFriction(RecompContext* ctx);
undefined dynamicstest(RecompContext* ctx);
undefined Undefined_Gap_0x4C4A0_0x4DBA8(RecompContext* ctx);
undefined effectSetDamageWork(RecompContext* ctx);
undefined Undefined_Gap_0x4DD60_0x4DF50(RecompContext* ctx);
undefined effect_blood_init(RecompContext* ctx);
undefined effect_blood_free(RecompContext* ctx);
undefined effect_blood_frame(RecompContext* ctx);
undefined effect_blood_set(RecompContext* ctx);
undefined createBossBloodParamMenu(RecompContext* ctx);
undefined getEffectBloodWorkSize(RecompContext* ctx);
undefined getWeakPointEffectIntensity(RecompContext* ctx);
undefined getTriggerPointEffectIntensity(RecompContext* ctx);
undefined boot_weakpoint_effect(RecompContext* ctx);
undefined boot_weakpoint_hit_effect(RecompContext* ctx);
undefined init_weakpoint_effect(RecompContext* ctx);
undefined fadeout_weakpoint_effect(RecompContext* ctx);
undefined cancel_fadeout_weakpoint_effect(RecompContext* ctx);
undefined end_weakpoint_effect(RecompContext* ctx);
undefined effect_death(RecompContext* ctx);
undefined effectClearDamageWork(RecompContext* ctx);
undefined effectGetDamageWork(RecompContext* ctx);
undefined getBloodEffectEnableFlag(RecompContext* ctx);
undefined Undefined_Gap_0x4E7BC_0x4E820(RecompContext* ctx);
undefined getWeakGlowSpeed(RecompContext* ctx);
undefined getWeakGlowTime(RecompContext* ctx);
undefined getTrigGlowTime(RecompContext* ctx);
undefined Undefined_Gap_0x4E84C_0x4EAA0(RecompContext* ctx);
undefined StartFilmBurn(RecompContext* ctx);
undefined Undefined_Gap_0x4EADC_0x4EF88(RecompContext* ctx);
undefined demo_end(RecompContext* ctx);
undefined demo_end_setHorseBridle(RecompContext* ctx);
undefined demo_end_resetHorseBridle(RecompContext* ctx);
undefined demo_PlayerDeathEffectStart(RecompContext* ctx);
undefined demo_PlayerDeathEffectEnd(RecompContext* ctx);
undefined Undefined_Gap_0x4FC1C_0x4FEA0(RecompContext* ctx);
undefined demo_end2(RecompContext* ctx);
undefined Undefined_Gap_0x50640_0x50B68(RecompContext* ctx);
undefined demo_end3(RecompContext* ctx);
undefined demo_EndTitleStart(RecompContext* ctx);
undefined EndMessageScript(RecompContext* ctx);
undefined Undefined_Gap_0x51A80_0x51A98(RecompContext* ctx);
undefined StartEndTelop(RecompContext* ctx);
undefined init_expression(RecompContext* ctx);
undefined doit_expression(RecompContext* ctx);
undefined add_node_expression(RecompContext* ctx);
undefined update_type_expression(RecompContext* ctx);
undefined set_root_node_data_expression(RecompContext* ctx);
undefined set_node_data_expression(RecompContext* ctx);
undefined get_cur_type_expression(RecompContext* ctx);
undefined get_pre_type_expression(RecompContext* ctx);
undefined GAMEUTIL_get_cur_interp_ratio_expression(RecompContext* ctx);
undefined constructor_expression_change(RecompContext* ctx);
undefined add_element_expression_change(RecompContext* ctx);
undefined doit_expression_change(RecompContext* ctx);
undefined fallenRockMain(RecompContext* ctx);
undefined fallenRockStart(RecompContext* ctx);
undefined SCRRockFall(RecompContext* ctx);
undefined SCRRockReset(RecompContext* ctx);
undefined Undefined_Gap_0x5235C_0x532C0(RecompContext* ctx);
undefined fallenLeafInit(RecompContext* ctx);
undefined Undefined_Gap_0x53614_0x53D90(RecompContext* ctx);
undefined fallenLeafMain(RecompContext* ctx);
undefined Undefined_Gap_0x54098_0x546F0(RecompContext* ctx);
undefined arrowWaterInit(RecompContext* ctx);
undefined arrowWaterMain(RecompContext* ctx);
undefined getFallenLeafSize(RecompContext* ctx);
undefined EnableArrowWater(RecompContext* ctx);
undefined EndArrowWater(RecompContext* ctx);
undefined getArrowWaterSize(RecompContext* ctx);
undefined doit_game_camera_model(RecompContext* ctx);
undefined gameover(RecompContext* ctx);
undefined Undefined_Gap_0x552CC_0x55358(RecompContext* ctx);
undefined guardDamageMain(RecompContext* ctx);
undefined Undefined_Gap_0x55548_0x558E8(RecompContext* ctx);
undefined nico_guardCStart(RecompContext* ctx);
undefined nico_guardEStart(RecompContext* ctx);
undefined SCRGuardSwordPickup(RecompContext* ctx);
undefined SCRGuardSwordPickupEnd(RecompContext* ctx);
undefined Undefined_Gap_0x55AA4_0x55B28(RecompContext* ctx);
undefined guardMainCommon(RecompContext* ctx);
undefined nico_guardAStart(RecompContext* ctx);
undefined Undefined_Gap_0x56290_0x56538(RecompContext* ctx);
undefined nico_guardBStart(RecompContext* ctx);
undefined nico_guardDStart(RecompContext* ctx);
undefined SCRGuardArrowShoot(RecompContext* ctx);
undefined Undefined_Gap_0x56704_0x568D0(RecompContext* ctx);
undefined r1_alert(RecompContext* ctx);
undefined checkpoint_alert(RecompContext* ctx);
undefined home_test_anim(RecompContext* ctx);
undefined st_malloc_test(RecompContext* ctx);
undefined home_sound(RecompContext* ctx);
undefined Undefined_Gap_0x56C28_0x570E0(RecompContext* ctx);
undefined nico_horseRStart(RecompContext* ctx);
undefined SCRFuncHorseBossCircumferenceMain(RecompContext* ctx);
undefined SCRFuncHorseEscapeFromBossMain(RecompContext* ctx);
undefined nico_horseBodyExpression(RecompContext* ctx);
undefined Undefined_Gap_0x57FC8_0x5B5B0(RecompContext* ctx);
undefined SCRFuncHorseStandRundmSendkey(RecompContext* ctx);
undefined Undefined_Gap_0x5B9C8_0x5BF58(RecompContext* ctx);
undefined nico_hydeHorseByNearClip(RecompContext* ctx);
undefined setHorseAIStopFlag(RecompContext* ctx);
undefined getHorseStandByMode(RecompContext* ctx);
undefined Undefined_Gap_0x5BFB4_0x5C1E0(RecompContext* ctx);
undefined nico_blankHorseStart(RecompContext* ctx);
undefined SCRConditionHorseRiddenOn(RecompContext* ctx);
undefined SCRFuncHorseInterestInit(RecompContext* ctx);
undefined SCRFuncHorseInterestMain(RecompContext* ctx);
undefined SCRConditionHorseInterestExec(RecompContext* ctx);
undefined SCRConditionHorseCalled(RecompContext* ctx);
undefined getHorseInterpSpeed(RecompContext* ctx);
undefined setHorseSemiAutomaticCtrl(RecompContext* ctx);
undefined SCRFuncHorseForceScriptKey(RecompContext* ctx);
undefined SCRFuncHorseAdvertisFlag(RecompContext* ctx);
undefined SCRFuncHorseStandByFlag(RecompContext* ctx);
undefined SCRConditionOverHorseLife(RecompContext* ctx);
undefined SCRConditionPlayerNippingHorseAndWall(RecompContext* ctx);
undefined SCRFuncHorseEscapeCounterInit(RecompContext* ctx);
undefined SCRFuncHorseEscapeCounterMain(RecompContext* ctx);
undefined SCRConditionHorseEscapeCounterChack(RecompContext* ctx);
undefined SCRConditionHorseNeighPermission(RecompContext* ctx);
undefined SRCConditionHorseBossChackAll(RecompContext* ctx);
undefined SRCFuncHorseAngleFromPlayerToHorse(RecompContext* ctx);
undefined SRCConditionHorseAngleFromPlayerToHorse(RecompContext* ctx);
undefined SRCFuncHorseRayHitColAttr(RecompContext* ctx);
undefined SRCConditionHorseHitColAttrChack(RecompContext* ctx);
undefined SRCConditionHorseHitColChack(RecompContext* ctx);
undefined setHorseForceScriptKey(RecompContext* ctx);
undefined SCRFuncFromHorceToPlayerSendKey(RecompContext* ctx);
undefined SCRFuncSetPlayerAttainForHorse(RecompContext* ctx);
undefined SCRFuncHorseEscapeFromBoss(RecompContext* ctx);
undefined SCRFuncHorseBossDetectStop(RecompContext* ctx);
undefined SCRFuncConditionStillnessTimerSet(RecompContext* ctx);
undefined SCRConditionHorseForceStandby(RecompContext* ctx);
undefined SCRHorseUnLoad(RecompContext* ctx);
undefined nico_setHorseBridleObjToHorseWork(RecompContext* ctx);
undefined nico_setHorseRidingStatusForHorse(RecompContext* ctx);
undefined nico_setHorseRidingStatusForHorseIndep(RecompContext* ctx);
undefined nico_resetHorseRidingStatusForHorse(RecompContext* ctx);
undefined nico_setHorseBridleDoubleShort(RecompContext* ctx);
undefined nico_setHorseBridleLeftLong(RecompContext* ctx);
undefined nico_setHorseBridleRightLong(RecompContext* ctx);
undefined nico_setHorseBridleDoubleLong(RecompContext* ctx);
undefined nico_horseClothOverSurfDetectFunc(RecompContext* ctx);
undefined Undefined_Gap_0x5D290_0x5D6C0(RecompContext* ctx);
undefined nico_resetHorseBridleTerminalParentPoint(RecompContext* ctx);
undefined Undefined_Gap_0x5D84C_0x5DD88(RecompContext* ctx);
undefined nico_execHorseCloth(RecompContext* ctx);
undefined Undefined_Gap_0x5E0CC_0x5E280(RecompContext* ctx);
undefined nico_execMinotaurC_Cloth(RecompContext* ctx);
undefined nico_execMinotaurA_Cloth(RecompContext* ctx);
undefined Undefined_Gap_0x5E810_0x5EA20(RecompContext* ctx);
undefined nico_execGuardACloth(RecompContext* ctx);
undefined nico_setHorseBridleType(RecompContext* ctx);
undefined nico_setHorseBridleTerminalParentPoint(RecompContext* ctx);
undefined nico_setHorseBridleTerminalParentPointIndep(RecompContext* ctx);
undefined nico_execHorseBriddle(RecompContext* ctx);
undefined nico_initHorseBriddle(RecompContext* ctx);
undefined st_nico_horseBridle(RecompContext* ctx);
undefined drawbar(RecompContext* ctx);
undefined SpriteInitStatusClut(RecompContext* ctx);
undefined SpriteSetStatusClut(RecompContext* ctx);
undefined initbar(RecompContext* ctx);
undefined setbar(RecompContext* ctx);
undefined SpriteSetStatus(RecompContext* ctx);
undefined Init_TimeFloatInter(RecompContext* ctx);
undefined Update_TimeFloatInter(RecompContext* ctx);
undefined Init_TimeFVECTORInter(RecompContext* ctx);
undefined Update_TimeFVECTORInter(RecompContext* ctx);
undefined Init_TimeFloatSpeed(RecompContext* ctx);
undefined Update_TimeFloatSpeed(RecompContext* ctx);
undefined ColCont2_Update(RecompContext* ctx);
undefined MotSpdCtrl_Update(RecompContext* ctx);
undefined SearchNearestObjByGroup(RecompContext* ctx);
undefined IsDamaged(RecompContext* ctx);
undefined ColCont_Reset(RecompContext* ctx);
undefined ColCont_Update(RecompContext* ctx);
undefined ColCont_IsColStatus(RecompContext* ctx);
undefined ColCont2_Init(RecompContext* ctx);
undefined ColCont2_Release(RecompContext* ctx);
undefined ColCont2_EventAttrReset(RecompContext* ctx);
undefined ColCont2_IsColStatus(RecompContext* ctx);
undefined ColCont2_IsEventColStatus(RecompContext* ctx);
undefined ColCont2_IsParentObj(RecompContext* ctx);
undefined MotSpdCtrl_Init(RecompContext* ctx);
undefined MotSpdCtrl_Start(RecompContext* ctx);
undefined MotSpdCtrl_StartExt(RecompContext* ctx);
undefined MotSpdCtrl_Reset(RecompContext* ctx);
undefined MotSpdCtrl_SetSpeed(RecompContext* ctx);
undefined MotSpdCtrl_SetParam(RecompContext* ctx);
undefined IsColStatus(RecompContext* ctx);
undefined IsColStatusCUP(RecompContext* ctx);
undefined IsGeoColStatus(RecompContext* ctx);
undefined Undefined_Gap_0x60F3C_0x610D0(RecompContext* ctx);
undefined demo_battle(RecompContext* ctx);
undefined nico_kirinBossStart(RecompContext* ctx);
undefined nico_kirinBodyExpression(RecompContext* ctx);
undefined Undefined_Gap_0x61D04_0x61E38(RecompContext* ctx);
undefined SCRFuncKirinCaveFallRockLWSLoad(RecompContext* ctx);
undefined SCRFuncKirinSlopeFallRockLWSLoad(RecompContext* ctx);
undefined Undefined_Gap_0x62C50_0x62D40(RecompContext* ctx);
undefined SCRFuncKirinCameraNeckDownIdSet(RecompContext* ctx);
undefined SCRFuncKirinCameraNeckDownIdReset(RecompContext* ctx);
undefined SCRKirinFallRockEnd(RecompContext* ctx);
undefined SCRFuncSetFallRockTimerAndSetGroundDestFlag(RecompContext* ctx);
undefined SCRFuncSetFallRockTimer(RecompContext* ctx);
undefined SCRFuncKirinFallRockMain(RecompContext* ctx);
undefined SCRConditionFallRockChack(RecompContext* ctx);
undefined SCRFuncKirinFallRockTimerSetFlagOn(RecompContext* ctx);
undefined SCRFuncKirinFallRockTimerSetFlagOff(RecompContext* ctx);
undefined SCRConditionKirinIntervalOfMovement(RecompContext* ctx);
undefined Undefined_Gap_0x62FA0_0x62FE8(RecompContext* ctx);
undefined nico_KnightBossStart(RecompContext* ctx);
undefined Undefined_Gap_0x63164_0x63358(RecompContext* ctx);
undefined SCRFuncKnightParentMoveControlScriptKey(RecompContext* ctx);
undefined Undefined_Gap_0x637E4_0x63848(RecompContext* ctx);
undefined SCRKnightBossPartsBroken(RecompContext* ctx);
undefined SCRKnightBossPartsDelete(RecompContext* ctx);
undefined SCRFuncKnightSetStand(RecompContext* ctx);
undefined SCRFuncKnightSetWalk(RecompContext* ctx);
undefined SCRFuncKnightSetShakeStop(RecompContext* ctx);
undefined SCRConditionKnightGetStandKeyFlag(RecompContext* ctx);
undefined Undefined_Gap_0x63944_0x639E0(RecompContext* ctx);
undefined leoTorch(RecompContext* ctx);
undefined Undefined_Gap_0x63C38_0x63F90(RecompContext* ctx);
undefined nico_leoBossStart(RecompContext* ctx);
undefined Undefined_Gap_0x641C8_0x641F0(RecompContext* ctx);
undefined SCRLeoTorch0_Disp(RecompContext* ctx);
undefined SCRLeoTorch1_Disp(RecompContext* ctx);
undefined SCRLeoTorch2_Disp(RecompContext* ctx);
undefined SCRLeoTorch3_Disp(RecompContext* ctx);
undefined SCRConditionLeoCheckArmorBroken(RecompContext* ctx);
undefined SCRLeoArmorBroken(RecompContext* ctx);
undefined SCRLeoFall(RecompContext* ctx);
undefined SCRLeoDamage(RecompContext* ctx);
undefined SCRLeoDashAttackEnd(RecompContext* ctx);
undefined SCRLeoDashAttack(RecompContext* ctx);
undefined Undefined_Gap_0x64334_0x64A10(RecompContext* ctx);
undefined setNowLoadingMessageDisplayFlag(RecompContext* ctx);
undefined nowLoadingScript(RecompContext* ctx);
undefined inInNowLoadingEffect(RecompContext* ctx);
undefined setNowLoadingEffectDisplayFlagHokoraBack(RecompContext* ctx);
undefined nico_mammosBossStart(RecompContext* ctx);
undefined Undefined_Gap_0x64CE0_0x64D40(RecompContext* ctx);
undefined nico_mammothArmRightTexEnd(RecompContext* ctx);
undefined nico_mammothArmRightTexStart(RecompContext* ctx);
undefined nico_mammothArmLeftTexEnd(RecompContext* ctx);
undefined nico_mammothArmLeftTexStart(RecompContext* ctx);
undefined nico_mammothLegRightTexEnd(RecompContext* ctx);
undefined nico_mammothLegRightTexStart(RecompContext* ctx);
undefined nico_mammothLegLeftTexEnd(RecompContext* ctx);
undefined nico_mammothLegLeftTexStart(RecompContext* ctx);
undefined nico_mammothAllTexEnd(RecompContext* ctx);
undefined mc_save_scr_begin(RecompContext* ctx);
undefined Undefined_Gap_0x650B8_0x67C48(RecompContext* ctx);
undefined memoryCardSaveScript(RecompContext* ctx);
undefined Undefined_Gap_0x67FE8_0x69EC8(RecompContext* ctx);
undefined memoryCardLoadScript(RecompContext* ctx);
undefined bootMemoryCardLoadScriptNoBlock(RecompContext* ctx);
undefined bootMemoryCardSaveScript(RecompContext* ctx);
undefined bootMemoryCardSaveScriptNoBlock(RecompContext* ctx);
undefined nico_BossMinotaurStart(RecompContext* ctx);
undefined SCRFuncMinoBSetTemporaryTarget(RecompContext* ctx);
undefined SCRFuncMinoBCanossaWallBreak(RecompContext* ctx);
undefined Undefined_Gap_0x6A8F4_0x6A9C8(RecompContext* ctx);
undefined SCRCanossaWallBreakEnd(RecompContext* ctx);
undefined SCRCanossaWallDelete(RecompContext* ctx);
undefined Undefined_Gap_0x6AA04_0x6AA90(RecompContext* ctx);
undefined SCRSetupWeaponMinotaur(RecompContext* ctx);
undefined nico_minotaur_weaponstart(RecompContext* ctx);
undefined nico_BossMinotaurAStart(RecompContext* ctx);
undefined SCRFuncMinoASetTemporaryTarget(RecompContext* ctx);
undefined Undefined_Gap_0x6AFD4_0x6B1A0(RecompContext* ctx);
undefined nico_BossMinotaurCStart(RecompContext* ctx);
undefined SCRFuncMinoCSetTemporaryTarget(RecompContext* ctx);
undefined SCRConditionMinoCBridgeRayChack(RecompContext* ctx);
undefined SCRConditionMinoCBridgeRayChack2(RecompContext* ctx);
undefined SCRMinotourCFallWeapon(RecompContext* ctx);
undefined SCRMinotourCSetFallWeaponFlag(RecompContext* ctx);
undefined Undefined_Gap_0x6BC1C_0x6BC60(RecompContext* ctx);
undefined SCRConditionMinoCTargetWallChangeChack(RecompContext* ctx);
undefined SCRFuncMinoCTargetWallReset(RecompContext* ctx);
undefined SCRFuncMinoCAtkCountInit(RecompContext* ctx);
undefined SCRFuncMinoCAddAtkCount(RecompContext* ctx);
undefined SCRConditionMinoCAtkCountChack(RecompContext* ctx);
undefined SCRMinoCSetAddFlag(RecompContext* ctx);
undefined SCRMinoCResetAddFlag(RecompContext* ctx);
undefined SCRConditionMinoCAddFlagChack(RecompContext* ctx);
undefined SCRConditionMinoCWallCaseFlagChack(RecompContext* ctx);
undefined SCRFuncMinoCSetPlayerInCorridorFlag(RecompContext* ctx);
undefined SCRFuncMinoCResetPlayerInCorridorFlag(RecompContext* ctx);
undefined SCRFuncMinoCPlayerInCorridorFlagChack(RecompContext* ctx);
undefined SCRMinotourCResetWeaponCameraFlag(RecompContext* ctx);
undefined Undefined_Gap_0x6BE1C_0x6D0B0(RecompContext* ctx);
undefined SCRSetupMissile1(RecompContext* ctx);
undefined Undefined_Gap_0x6D148_0x6D318(RecompContext* ctx);
undefined nico_missile1start(RecompContext* ctx);
undefined CalcFootVec(RecompContext* ctx);
undefined CalcFootPos(RecompContext* ctx);
undefined CalcDistancePointAnd2Point(RecompContext* ctx);
undefined CalcDistancePointAndLine(RecompContext* ctx);
undefined MVHIST_Init(RecompContext* ctx);
undefined MVHIST_Update(RecompContext* ctx);
undefined DirectTurn_Reset(RecompContext* ctx);
undefined IsTouchableObj(RecompContext* ctx);
undefined nico_nargaBossStart(RecompContext* ctx);
undefined SCRConditionNaragaBodyRot(RecompContext* ctx);
undefined Undefined_Gap_0x6DE6C_0x6E120(RecompContext* ctx);
undefined SCRFuncNargaWallCheckMain(RecompContext* ctx);
undefined SCRConditionNargaWallCheck2(RecompContext* ctx);
undefined SCRFuncNargaSetWallAttainPos(RecompContext* ctx);
undefined SCRFuncNargaSetWallAttainDir(RecompContext* ctx);
undefined SCRFuncNargaFloatMain(RecompContext* ctx);
undefined SCRFuncNargaSetPlayerDamage(RecompContext* ctx);
undefined SCRFuncNargaSetPlayerAttainmentPos(RecompContext* ctx);
undefined SCRConditionNargaWallCheck(RecompContext* ctx);
undefined SCRConditionNargaPlayerDamage(RecompContext* ctx);
undefined SCRFuncNargaWayVolumeMain(RecompContext* ctx);
undefined SCRConditionNargaWallNear(RecompContext* ctx);
undefined SCRConditionNargaStruggleStart(RecompContext* ctx);
undefined SCRFuncNargaPlayerStop(RecompContext* ctx);
undefined constructor_nico_sight_on(RecompContext* ctx);
undefined Undefined_Gap_0x6ED50_0x6F6A0(RecompContext* ctx);
undefined doit_nico_sight_on(RecompContext* ctx);
undefined Undefined_Gap_0x6F8A4_0x6FD90(RecompContext* ctx);
undefined get_object_local_merge_yaw_nico_sight_on(RecompContext* ctx);
undefined get_radiate_direction_nico_sight_on(RecompContext* ctx);
undefined is_enable_reach_src_yaw_nico_sight_on(RecompContext* ctx);
undefined set_parameter_nico_sight_on(RecompContext* ctx);
undefined set_option_parameter_nico_sight_on(RecompContext* ctx);
undefined begin_nico_sight_on(RecompContext* ctx);
undefined end_nico_sight_on(RecompContext* ctx);
undefined is_doing_nico_sight_on(RecompContext* ctx);
undefined get_ofst_yaw_nico_sight_on(RecompContext* ctx);
undefined get_ofst_pitch_nico_sight_on(RecompContext* ctx);
undefined get_base_yaw_nico_sight_on(RecompContext* ctx);
undefined get_object_local_base_yaw_nico_sight_on(RecompContext* ctx);
undefined get_base_pitch_nico_sight_on(RecompContext* ctx);
undefined get_merge_yaw_nico_sight_on(RecompContext* ctx);
undefined get_merge_pitch_nico_sight_on(RecompContext* ctx);
undefined get_hope_yaw_nico_sight_on(RecompContext* ctx);
undefined get_hope_pitch_nico_sight_on(RecompContext* ctx);
undefined get_snipe_position_nico_sight_on(RecompContext* ctx);
undefined get_predict_hit_position_nico_sight_on(RecompContext* ctx);
undefined get_hope_camera_direction_nico_sight_on(RecompContext* ctx);
undefined Undefined_Gap_0x70694_0x70A90(RecompContext* ctx);
undefined nico_setOmakeItemFlag(RecompContext* ctx);
undefined nico_getOmakeItem(RecompContext* ctx);
undefined nico_delOmakeItem(RecompContext* ctx);
undefined Undefined_Gap_0x70E0C_0x70F88(RecompContext* ctx);
undefined demo_op1(RecompContext* ctx);
undefined demo_op1_resetHorseBridle(RecompContext* ctx);
undefined demo_op1_setHorseBridle(RecompContext* ctx);
undefined Undefined_Gap_0x71568_0x71918(RecompContext* ctx);
undefined demo_op2(RecompContext* ctx);
undefined demo_op2_resetHorseBridle(RecompContext* ctx);
undefined demo_op2_setHorseBridle(RecompContext* ctx);
undefined nico_SmokemanBodyTexEnd(RecompContext* ctx);
undefined optionMenuParamSetDefault(RecompContext* ctx);
undefined optionMenuParamSetLoadData(RecompContext* ctx);
undefined Undefined_Gap_0x725E0_0x74560(RecompContext* ctx);
undefined optionMenuScript(RecompContext* ctx);
undefined Undefined_Gap_0x746D0_0x74A60(RecompContext* ctx);
undefined OptionMenuStart(RecompContext* ctx);
undefined Undefined_Gap_0x74A90_0x753D8(RecompContext* ctx);
undefined pauseMenuScript(RecompContext* ctx);
undefined Undefined_Gap_0x75590_0x75608(RecompContext* ctx);
undefined PauseMenuStart(RecompContext* ctx);
undefined physicalOp(RecompContext* ctx);
undefined Undefined_Gap_0x75B68_0x77F50(RecompContext* ctx);
undefined nico_createPlayerParachute(RecompContext* ctx);
undefined Undefined_Gap_0x7812C_0x783A0(RecompContext* ctx);
undefined nico_player1(RecompContext* ctx);
undefined SCRPlayerLandingRotateBounding(RecompContext* ctx);
undefined Undefined_Gap_0x78C20_0x7A3B0(RecompContext* ctx);
undefined nico_playerstart(RecompContext* ctx);
undefined Undefined_Gap_0x7A638_0x7ACC0(RecompContext* ctx);
undefined SCRPlayerGetWeapon(RecompContext* ctx);
undefined SCRPlayerLostWeapon(RecompContext* ctx);
undefined nico_playerGetSightOn(RecompContext* ctx);
undefined nico_playerIsActingSightOn(RecompContext* ctx);
undefined nico_playerSightOnDirection(RecompContext* ctx);
undefined nico_playerSetAttentionHeadActFlag(RecompContext* ctx);
undefined nico_playerIsSwimmingNow(RecompContext* ctx);
undefined nico_playerGetExpression(RecompContext* ctx);
undefined nico_playerGetExpressionChange(RecompContext* ctx);
undefined nico_playerActForseStandReset(RecompContext* ctx);
undefined nico_playerBeginHoistSword(RecompContext* ctx);
undefined nico_playerEndHoistSword(RecompContext* ctx);
undefined torchExtinguished(RecompContext* ctx);
undefined getTorchInfo(RecompContext* ctx);
undefined getCurWeapon(RecompContext* ctx);
undefined getPlayerMVHIST(RecompContext* ctx);
undefined nico_ResetPlayerHorseRidingControl(RecompContext* ctx);
undefined nico_returnPlayerRidingFlag(RecompContext* ctx);
undefined IsHorseCalled_withFlgOff(RecompContext* ctx);
undefined IsHorseAutoControlled(RecompContext* ctx);
undefined player_IsHorseHang(RecompContext* ctx);
undefined player_IsSwiming(RecompContext* ctx);
undefined getPlayerPosAfterXSeconds(RecompContext* ctx);
undefined getArrowPos(RecompContext* ctx);
undefined getArrowInfo(RecompContext* ctx);
undefined player_getWeaponType(RecompContext* ctx);
undefined player_AutoHorseCtrlOff(RecompContext* ctx);
undefined getPlayerColCont(RecompContext* ctx);
undefined getPlayerColCont2(RecompContext* ctx);
undefined getPlayerLastAttrStatus(RecompContext* ctx);
undefined getPlayerLastParentObj(RecompContext* ctx);
undefined playerPlaneJudgeFunc(RecompContext* ctx);
undefined playerPlaneJudgeFuncCameraFilter(RecompContext* ctx);
undefined torchObjRelease(RecompContext* ctx);
undefined getTorchObj(RecompContext* ctx);
undefined getPlayerWeaponHitAttr(RecompContext* ctx);
undefined player_SetGripDamage(RecompContext* ctx);
undefined nico_hydePlayerByMagireManteau(RecompContext* ctx);
undefined nico_hydePlayerByNearClip(RecompContext* ctx);
undefined playerWeaponChangeIconMax(RecompContext* ctx);
undefined nico_playerCheckNippingWithHorseAndWall(RecompContext* ctx);
undefined player_setWeaponScriptSwitch(RecompContext* ctx);
undefined nico_CheckPlayerThroughObject(RecompContext* ctx);
undefined nico_CheckThroughObject(RecompContext* ctx);
undefined nico_CreatePlayerGetItemObject(RecompContext* ctx);
undefined player_IsHorseCtrlOff(RecompContext* ctx);
undefined player_GetBoundDamageLevel(RecompContext* ctx);
undefined Undefined_Gap_0x7BC44_0x7BD78(RecompContext* ctx);
undefined isWeaponTargetMarker(RecompContext* ctx);
undefined isWeaponTargetReady(RecompContext* ctx);
undefined Undefined_Gap_0x7BE5C_0x7BF50(RecompContext* ctx);
undefined nico_deletePlayerParachute(RecompContext* ctx);
undefined Undefined_Gap_0x7BF9C_0x7C028(RecompContext* ctx);
undefined nico_resetPlayerHorseBridle(RecompContext* ctx);
undefined Undefined_Gap_0x7C098_0x7C1D8(RecompContext* ctx);
undefined SCRPlayerRotateStop(RecompContext* ctx);
undefined SCRPlayerPickUp(RecompContext* ctx);
undefined SCRPlayerCallHorse(RecompContext* ctx);
undefined SCRPlayerCallHorseEnd(RecompContext* ctx);
undefined SCRPlayerReset(RecompContext* ctx);
undefined SCRWeaponReload(RecompContext* ctx);
undefined SCRFoodTakeBegin(RecompContext* ctx);
undefined SCRFoodTakeEnd(RecompContext* ctx);
undefined SCRItemTakeBegin(RecompContext* ctx);
undefined SCRItemTakeEnd(RecompContext* ctx);
undefined SCRItemTakeDelete(RecompContext* ctx);
undefined SCRPlayerBeginAccumulateAttack(RecompContext* ctx);
undefined SCRArrowStart(RecompContext* ctx);
undefined SCRArrowContinue(RecompContext* ctx);
undefined SCRArrowLoopStart(RecompContext* ctx);
undefined SCRArrowLoopEnd(RecompContext* ctx);
undefined SCRHarpoonStart(RecompContext* ctx);
undefined SCRHarpoonContinue(RecompContext* ctx);
undefined SCRHarpoonLoopStart(RecompContext* ctx);
undefined SCRHarpoonLoopEnd(RecompContext* ctx);
undefined SCRPlayerSendDamageStart(RecompContext* ctx);
undefined SCRPlayerSendDamageEnd(RecompContext* ctx);
undefined SCRPlayerSendDamage(RecompContext* ctx);
undefined SCRPlayerSendDamageLater(RecompContext* ctx);
undefined SCRPlayerSendDeathDamageLater(RecompContext* ctx);
undefined SCRPlayerSendDiveDamageLater(RecompContext* ctx);
undefined SCRPlayerSowrdDeathHitSound(RecompContext* ctx);
undefined SCRPlayerSowrdHitSound(RecompContext* ctx);
undefined SCRPlayerSowrdHitSoundMiddle(RecompContext* ctx);
undefined SCRPlayerSowrdHitSoundLarge(RecompContext* ctx);
undefined SCRPlayerSowrdDiveHitSound(RecompContext* ctx);
undefined SCRPlayerFullPower(RecompContext* ctx);
undefined SCRPlayerFullPowerAndHp(RecompContext* ctx);
undefined Undefined_Gap_0x7C6C4_0x7C6D0(RecompContext* ctx);
undefined torchAttached(RecompContext* ctx);
undefined sendArrowPos(RecompContext* ctx);
undefined sendArrowInfo(RecompContext* ctx);
undefined nico_ResetPlayerHorseRidingControlAndContinueMotionCurrentSpeed(RecompContext* ctx);
undefined Undefined_Gap_0x7C7F0_0x7C950(RecompContext* ctx);
undefined SCRPlayerCombatMode(RecompContext* ctx);
undefined SCRPlayerNonCombatMode(RecompContext* ctx);
undefined SCRPlayerPauseDisable(RecompContext* ctx);
undefined SCRPlayerPauseEnable(RecompContext* ctx);
undefined SCRPlayerTorchThrow(RecompContext* ctx);
undefined SCRWeaponSword(RecompContext* ctx);
undefined SCRWeaponHand(RecompContext* ctx);
undefined SCRHorseKick(RecompContext* ctx);
undefined nico_playerIK_attention_head(RecompContext* ctx);
undefined nico_playerIK_attention_chest(RecompContext* ctx);
undefined nico_playeGripDamage(RecompContext* ctx);
undefined nico_playeGripholdOn(RecompContext* ctx);
undefined nico_playeGripholdOff(RecompContext* ctx);
undefined nico_setPlayerHorseBridle(RecompContext* ctx);
undefined nico_setPlayerHorseBridleDoubleShort(RecompContext* ctx);
undefined nico_setPlayerHorseBridleLeftLong(RecompContext* ctx);
undefined nico_setPlayerHorseBridleRightLong(RecompContext* ctx);
undefined nico_setPlayerHorseBridleDoubleLong(RecompContext* ctx);
undefined nico_ChangePlayerHorseRidingControlWithParentObj(RecompContext* ctx);
undefined nico_ChangePlayerHorseRidingControlWithVCol(RecompContext* ctx);
undefined nico_ChangePlayerHorseRidingControlWithHCol(RecompContext* ctx);
undefined nico_ForceChangePlayerHorseRidingControl(RecompContext* ctx);
undefined nico_ChangePlayerHorseRidingParentWithVCol(RecompContext* ctx);
undefined nico_setPlayerEdgePoint(RecompContext* ctx);
undefined nico_setPlayerGripPoint(RecompContext* ctx);
undefined SetPlayerDangerEdgePoint(RecompContext* ctx);
undefined SetPlayerDangerEdgeOtherSidePlanePoint(RecompContext* ctx);
undefined SetPlayerDangerEdgeOtherSidePlanePointWithInertiaRot(RecompContext* ctx);
undefined SetPlayerHellDangerPoint(RecompContext* ctx);
undefined nico_playerClothOverSurfDetectFunc(RecompContext* ctx);
undefined nico_playerRootReverseByZRot(RecompContext* ctx);
undefined Undefined_Gap_0x7D54C_0x7E090(RecompContext* ctx);
undefined player_HellDangerDetect(RecompContext* ctx);
undefined Undefined_Gap_0x7E5CC_0x7EBB0(RecompContext* ctx);
undefined player_initAvoidDangerCliffWork(RecompContext* ctx);
undefined player_resetAvoidDangerCliffWork(RecompContext* ctx);
undefined player_CliffDetect(RecompContext* ctx);
undefined player_setDangerEdgePoint(RecompContext* ctx);
undefined player_setDangerEdgeOtherSidePlanePoint(RecompContext* ctx);
undefined player_setHellDangerPoint(RecompContext* ctx);
undefined player_AvoidDangerCliff(RecompContext* ctx);
undefined Undefined_Gap_0x7EF60_0x80278(RecompContext* ctx);
undefined nico_execPlayerMantle(RecompContext* ctx);
undefined nico_execPlayerFringe(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionFloorTable1(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionRightArm(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionRightHandAndSwordDeep(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionRightHandAndSword(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionFloorTable(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionHomeBaseFloor(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionRightFootAndHomeBaseFloor(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionEvisFloor(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionRightHand(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionRightHandY(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionHand(RecompContext* ctx);
undefined nico_setPlayerDemoAdditionClothCollisionLeftHandY(RecompContext* ctx);
undefined nico_resetPlayerDemoAdditionClothCollision(RecompContext* ctx);
undefined Undefined_Gap_0x80924_0x82298(RecompContext* ctx);
undefined init_player_expression(RecompContext* ctx);
undefined nico_playerExpression(RecompContext* ctx);
undefined Undefined_Gap_0x8278C_0x8CD78(RecompContext* ctx);
undefined test(RecompContext* ctx);
undefined Undefined_Gap_0x8CFD0_0x8DCD8(RecompContext* ctx);
undefined horse_hoist_sword(RecompContext* ctx);
undefined Undefined_Gap_0x8DF30_0x8EEC0(RecompContext* ctx);
undefined get_sight_on_cntrl_param_player_expression(RecompContext* ctx);
undefined Undefined_Gap_0x8F1E8_0x8FCC8(RecompContext* ctx);
undefined tryToCheckCollision6Dir(RecompContext* ctx);
undefined Undefined_Gap_0x903CC_0x91370(RecompContext* ctx);
undefined player_updateAttrStatusAndFindHangPosWithFallDown(RecompContext* ctx);
undefined player_initHangPointWork(RecompContext* ctx);
undefined player_resetHangPointWork(RecompContext* ctx);
undefined checkdist(RecompContext* ctx);
undefined Undefined_Gap_0x91A80_0x91B40(RecompContext* ctx);
undefined attrStatusUpdate(RecompContext* ctx);
undefined player_setEdgeHangPointGeometry(RecompContext* ctx);
undefined player_setGripHangPointGeometry(RecompContext* ctx);
undefined Undefined_Gap_0x91CA8_0x91F38(RecompContext* ctx);
undefined nico_player_colfit_SetLower(RecompContext* ctx);
undefined nico_player_edgecolfit_Shoulder(RecompContext* ctx);
undefined Undefined_Gap_0x92920_0x92DC8(RecompContext* ctx);
undefined nico_player_colfit_GetLower(RecompContext* ctx);
undefined nico_player_colfit_GetUpper(RecompContext* ctx);
undefined nico_player_edgecolfit_HandEffector(RecompContext* ctx);
undefined nico_player_colfit_HandEffector(RecompContext* ctx);
undefined nico_player_colfit_Shoulder(RecompContext* ctx);
undefined nico_player_pendulum_HandEffector(RecompContext* ctx);
undefined nico_player_pendulum_Shoulder(RecompContext* ctx);
undefined nico_player_pendulum_FootEffector(RecompContext* ctx);
undefined nico_player_pendulum_Leg(RecompContext* ctx);
undefined pendulum_test(RecompContext* ctx);
undefined nico_player_avoid_ControlRootY(RecompContext* ctx);
undefined player_updateSlipEffect(RecompContext* ctx);
undefined player_initSlipEffect(RecompContext* ctx);
undefined player_resetSlipEffect(RecompContext* ctx);
undefined SCRGetPlayerTiredParam(RecompContext* ctx);
undefined Undefined_Gap_0x93968_0x93AF8(RecompContext* ctx);
undefined nico_poseidonStart(RecompContext* ctx);
undefined SCRFuncPoseidonParallelTrans(RecompContext* ctx);
undefined Undefined_Gap_0x94064_0x94410(RecompContext* ctx);
undefined SCRPoseidonShoot(RecompContext* ctx);
undefined nico_poseidonToothFTexAnimStrat(RecompContext* ctx);
undefined nico_poseidonToothFTexAnimEnd(RecompContext* ctx);
undefined nico_poseidonToothRTexAnimStrat(RecompContext* ctx);
undefined nico_poseidonToothRTexAnimEnd(RecompContext* ctx);
undefined nico_poseidonToothLTexAnimStrat(RecompContext* ctx);
undefined nico_poseidonToothLTexAnimEnd(RecompContext* ctx);
undefined nico_poseidonToothTexAnimInit(RecompContext* ctx);
undefined Undefined_Gap_0x94670_0x946B0(RecompContext* ctx);
undefined SCRConditoinPoseidonPlayerRayChack(RecompContext* ctx);
undefined SCRFuncPoseidonModifyGP2AttainPos(RecompContext* ctx);
undefined SCRFuncPoseidonResetRevolutionDirection(RecompContext* ctx);
undefined SCRConditionPoseidonGetRevolutionRayChack(RecompContext* ctx);
undefined SCRFuncPoseidonMissAttackInit(RecompContext* ctx);
undefined SCRFuncPoseidonMissAttackAdd(RecompContext* ctx);
undefined SCRConditionPoseidonMissAttackCheck(RecompContext* ctx);
undefined SCRFuncPoseidonSetPlayerTerrLog(RecompContext* ctx);
undefined SCRFuncPoseidonResetPlayerTerrLog(RecompContext* ctx);
undefined SCRConditionPoseidonGetPlayerTerrLog(RecompContext* ctx);
undefined SCRFuncPoseidonAngryCountAdd(RecompContext* ctx);
undefined SCRFuncPoseidonAngryCountInit(RecompContext* ctx);
undefined SCRConditionPoseidonAngryCountChack(RecompContext* ctx);
undefined SCRConditionPoseidonDamageCoreTime(RecompContext* ctx);
undefined SCRConditionPoseidonDamageFlagSet(RecompContext* ctx);
undefined SCRConditionPoseidonDamageFlagReset(RecompContext* ctx);
undefined SCRConditionPoseidonDamageCoreTimeMain(RecompContext* ctx);
undefined SCRConditionPoseidonLessDistanceToGameobjWolrdXZ(RecompContext* ctx);
undefined SCRFuncPoseidonAngryMain(RecompContext* ctx);
undefined SCRFuncPoseidonToothMiLTexAnimStrat(RecompContext* ctx);
undefined SCRFuncPoseidonToothMiLTexAnimEnd(RecompContext* ctx);
undefined SCRFuncPoseidonToothMiFTexAnimStrat(RecompContext* ctx);
undefined SCRFuncPoseidonToothMiFTexAnimEnd(RecompContext* ctx);
undefined SCRFuncPoseidonToothMiRTexAnimStrat(RecompContext* ctx);
undefined SCRFuncPoseidonToothMiRTexAnimEnd(RecompContext* ctx);
undefined Undefined_Gap_0x94FA4_0x95190(RecompContext* ctx);
undefined progressive_check_script(RecompContext* ctx);
undefined bootprogressivecheck(RecompContext* ctx);
undefined Undefined_Gap_0x953F0_0x95848(RecompContext* ctx);
undefined execObjectWithNonTaskSwitch(RecompContext* ctx);
undefined scrRun(RecompContext* ctx);
undefined scrRunM(RecompContext* ctx);
undefined st_playObjAnim(RecompContext* ctx);
undefined SCRSetDispFlag(RecompContext* ctx);
undefined GetSCRCharaAIWorkPtr(RecompContext* ctx);
undefined CheckSCRCharaAIWorkPtr(RecompContext* ctx);
undefined SCRSimpleExecCharaGeometry(RecompContext* ctx);
undefined scrInit(RecompContext* ctx);
undefined __execScrLwsOri(RecompContext* ctx);
undefined Undefined_Gap_0x95D78_0x96068(RecompContext* ctx);
undefined st_motionsyncanimation(RecompContext* ctx);
undefined Undefined_Gap_0x96088_0x961B0(RecompContext* ctx);
undefined simpleExecCharaGeometry(RecompContext* ctx);
undefined AddDefaultAIGroup(RecompContext* ctx);
undefined initdefaultaitask(RecompContext* ctx);
undefined _initstage(RecompContext* ctx);
undefined initstage(RecompContext* ctx);
undefined Undefined_Gap_0x965B0_0x966E0(RecompContext* ctx);
undefined st_boss_dead(RecompContext* ctx);
undefined getBossCloudObj(RecompContext* ctx);
undefined bossCloudStart(RecompContext* ctx);
undefined YattsukeGetSeamlessAreaCenter(RecompContext* ctx);
undefined rootscripttest(RecompContext* ctx);
undefined bossDemoPlayerBreakDownAccept(RecompContext* ctx);
undefined bossDemoPlayerBreakDownEnd(RecompContext* ctx);
undefined st_boss_status(RecompContext* ctx);
undefined Undefined_Gap_0x96DC8_0x97538(RecompContext* ctx);
undefined nico_shamanStart(RecompContext* ctx);
undefined Undefined_Gap_0x97748_0x97768(RecompContext* ctx);
undefined nico_sheathScript(RecompContext* ctx);
undefined AI_UpdateVelocityXYZ(RecompContext* ctx);
undefined AI_GetRandomSphereOfs(RecompContext* ctx);
undefined AI_CalcIntersectionCircleXZ(RecompContext* ctx);
undefined AI_GetGeometryPointerOfLayout(RecompContext* ctx);
undefined AI_CheckNoAngleVec(RecompContext* ctx);
undefined AI_GetQuaternionNodeDirTarget(RecompContext* ctx);
undefined AI_CheckSightOn(RecompContext* ctx);
undefined AI_InitAnimalOptimize(RecompContext* ctx);
undefined AI_OptFloatFrameSample(RecompContext* ctx);
undefined AI_InitAnimalLayout(RecompContext* ctx);
undefined AI_SetAnimalLayout(RecompContext* ctx);
undefined AI_CheckInAnimalLayout(RecompContext* ctx);
undefined AI_InitAnimalWork(RecompContext* ctx);
undefined AI_SetAnimalWorkParam(RecompContext* ctx);
undefined AI_InitGexCommonWork(RecompContext* ctx);
undefined AI_InitSurpriseArrow(RecompContext* ctx);
undefined AI_SetSurprisedArea(RecompContext* ctx);
undefined AI_CheckNearArrow(RecompContext* ctx);
undefined AI_GetSmallAnimalAIParam(RecompContext* ctx);
undefined AI_GetYRotQuaternion(RecompContext* ctx);
undefined AI_UpdateVelocity(RecompContext* ctx);
undefined AI_UpdateVelocity2(RecompContext* ctx);
undefined AI_GetRandomVelocity(RecompContext* ctx);
undefined AI_GetRandomRange(RecompContext* ctx);
undefined AI_GetMotionBasicVelocity(RecompContext* ctx);
undefined AI_GetAccelB(RecompContext* ctx);
undefined AI_GetAccelA(RecompContext* ctx);
undefined AI_GetAccelA_at0(RecompContext* ctx);
undefined AI_GetAccelB_at0(RecompContext* ctx);
undefined AI_GetAccelA3(RecompContext* ctx);
undefined AI_GetAccelA3XYZ(RecompContext* ctx);
undefined AI_GetAccelB3(RecompContext* ctx);
undefined AI_GetAccelB3XYZ(RecompContext* ctx);
undefined AI_GetAccelC3(RecompContext* ctx);
undefined AI_GetAccelC3XYZ(RecompContext* ctx);
undefined AI_GetTimeFromAccelC3(RecompContext* ctx);
undefined AI_GetVelocity2(RecompContext* ctx);
undefined AI_GetVelocity3(RecompContext* ctx);
undefined AI_GetVelocity3XYZ(RecompContext* ctx);
undefined AI_GetPosition3(RecompContext* ctx);
undefined AI_GetPosition3XYZ(RecompContext* ctx);
undefined AI_GetRotVelocity(RecompContext* ctx);
undefined AI_GetTimeOfCurrMotion(RecompContext* ctx);
undefined AI_GetCurMotionKind(RecompContext* ctx);
undefined AI_GetCurControlMode(RecompContext* ctx);
undefined AI_GetInterRatio(RecompContext* ctx);
undefined AI_GetInterRatioOutCut(RecompContext* ctx);
undefined AI_GetHitPosPerpendicular(RecompContext* ctx);
undefined AI_GetLengthSquarePerpendicular(RecompContext* ctx);
undefined AI_GetAreaDistScale(RecompContext* ctx);
undefined AI_GetAreaDistScale2(RecompContext* ctx);
undefined AI_GetTrgDir(RecompContext* ctx);
undefined AI_PlayerParentFlag(RecompContext* ctx);
undefined AI_CheckNormZero(RecompContext* ctx);
undefined AI_GetSideSignalFromDirLev(RecompContext* ctx);
undefined AI_GetRandomCircleOfsXZ(RecompContext* ctx);
undefined AI_GetRandomCircleOfsXY(RecompContext* ctx);
undefined AI_GetRandomRectOfsXY(RecompContext* ctx);
undefined AI_GetRandomCylinderOfs(RecompContext* ctx);
undefined AI_GetNegaVector(RecompContext* ctx);
undefined AI_CheckDamage_Bow(RecompContext* ctx);
undefined AI_CheckDamage_SoundBow(RecompContext* ctx);
undefined AI_CheckDamage_Impact(RecompContext* ctx);
undefined AI_CheckDamage_Sword(RecompContext* ctx);
undefined AI_CheckDamage_Reaction(RecompContext* ctx);
undefined AI_JudgeNotCharaObjFunc(RecompContext* ctx);
undefined AI_JudgeColAttrFunc(RecompContext* ctx);
undefined AI_CheckViewInCameraClipVolume(RecompContext* ctx);
undefined AI_GetQuaternionNodeDirTargetExt(RecompContext* ctx);
undefined AI_CheckHorseParent(RecompContext* ctx);
undefined AI_DebugDir(RecompContext* ctx);
undefined AI_DebugArrow(RecompContext* ctx);
undefined AI_DebugCylinder(RecompContext* ctx);
undefined AIDebug_GetFirstObjOfMyGroup(RecompContext* ctx);
undefined AIDebug_GetAnimalMode(RecompContext* ctx);
undefined AIDebug_CheckPlayerParent(RecompContext* ctx);
undefined AIDebug_SetID(RecompContext* ctx);
undefined AIDebug_GetAnimalDispType(RecompContext* ctx);
undefined AIDebug_GetAnimalDispID(RecompContext* ctx);
undefined AIDebug_GetAdvertiseLoopFlag(RecompContext* ctx);
undefined AIDebug_GetAdvertisePauseFlag(RecompContext* ctx);
undefined AIDebug_SetAdvertisePauseFlag(RecompContext* ctx);
undefined getDebugAdvertiseLoopFlag(RecompContext* ctx);
undefined getDebugAnimalMode(RecompContext* ctx);
undefined getDebugAnimalDispType(RecompContext* ctx);
undefined getDebugAnimalDispID(RecompContext* ctx);
undefined AIDebug_AdvertisePauseKey(RecompContext* ctx);
undefined AI_GetYRotQuaternionFromVector(RecompContext* ctx);
undefined Undefined_Gap_0x9BC0C_0x9E770(RecompContext* ctx);
undefined nico_SmallBatStart(RecompContext* ctx);
undefined Undefined_Gap_0x9EA08_0x9EA40(RecompContext* ctx);
undefined BatInitFunc(RecompContext* ctx);
undefined Undefined_Gap_0x9EB40_0xAA4E8(RecompContext* ctx);
undefined nico_SmallKiteStart(RecompContext* ctx);
undefined nico_SmallKiteSpecialStart(RecompContext* ctx);
undefined nico_SmallKiteAdvertiseStart(RecompContext* ctx);
undefined KiteGroundInitFunc(RecompContext* ctx);
undefined KiteInitFunc(RecompContext* ctx);
undefined Undefined_Gap_0xAABB0_0xAC970(RecompContext* ctx);
undefined nico_SmallKiteMinoStart(RecompContext* ctx);
undefined Kite_InitKitePathWork(RecompContext* ctx);
undefined Undefined_Gap_0xACDB4_0xAD1B8(RecompContext* ctx);
undefined KiteSpecial_SetNewPathPoint(RecompContext* ctx);
undefined Undefined_Gap_0xAD3D4_0xAD588(RecompContext* ctx);
undefined Kite_GetPassageWork(RecompContext* ctx);
undefined Kite_InitSpecialPathWork(RecompContext* ctx);
undefined AI_CheckPathPoint(RecompContext* ctx);
undefined Kite_CmpPathPoint(RecompContext* ctx);
undefined Kite_InitKitePathPoint(RecompContext* ctx);
undefined AI_UpdateLeaderPathWork(RecompContext* ctx);
undefined AI_UpdateChildPathWork(RecompContext* ctx);
undefined Kite_InitKiteAdvertisePathWork(RecompContext* ctx);
undefined Kite_SetAnimalID_KitePathWork(RecompContext* ctx);
undefined Kite_SetEventIDList(RecompContext* ctx);
undefined Kite_InitEventCheck(RecompContext* ctx);
undefined Kite_ResetEventFrameCheck(RecompContext* ctx);
undefined Kite_StartEventCheck(RecompContext* ctx);
undefined Kite_EndEventCheck(RecompContext* ctx);
undefined Kite_SetAnimalLayout(RecompContext* ctx);
undefined Kite_SetKiteObj(RecompContext* ctx);
undefined Kite_SetPathOfs(RecompContext* ctx);
undefined Kite_SetSpecialPathLayout(RecompContext* ctx);
undefined Kite_SucceedKitePathWork(RecompContext* ctx);
undefined Undefined_Gap_0xADF54_0xB20F0(RecompContext* ctx);
undefined GexInitCommonFunc(RecompContext* ctx);
undefined GetInitWallFunc(RecompContext* ctx);
undefined Undefined_Gap_0xB2854_0xB2A28(RecompContext* ctx);
undefined nico_SmallKameStart(RecompContext* ctx);
undefined nico_SmallLizardStart(RecompContext* ctx);
undefined GexCutTail(RecompContext* ctx);
undefined AI_SetQuaternionFromGP(RecompContext* ctx);
undefined GexInitFunc(RecompContext* ctx);
undefined GexCeilInitFunc(RecompContext* ctx);
undefined GexWallInitFunc(RecompContext* ctx);
undefined Undefined_Gap_0xB2F84_0xB4600(RecompContext* ctx);
undefined lizard_head(RecompContext* ctx);
undefined lizard_chest(RecompContext* ctx);
undefined lizard_waist(RecompContext* ctx);
undefined lizard_tail(RecompContext* ctx);
undefined lizard_berry(RecompContext* ctx);
undefined Undefined_Gap_0xB4658_0xB4CF8(RecompContext* ctx);
undefined nico_SmallLizardTailStart(RecompContext* ctx);
undefined gextailUpdateQuat(RecompContext* ctx);
undefined gextailStopColProc(RecompContext* ctx);
undefined gextailStartColProc(RecompContext* ctx);
undefined updateSmallManager(RecompContext* ctx);
undefined Undefined_Gap_0xB52E0_0xB6CD0(RecompContext* ctx);
undefined getSmallAnimalSaveTypePos(RecompContext* ctx);
undefined initSmallManager(RecompContext* ctx);
undefined terminateSmallManager(RecompContext* ctx);
undefined getSObjNode(RecompContext* ctx);
undefined getSObjNodeBySubObj(RecompContext* ctx);
undefined setSObjNodeLock(RecompContext* ctx);
undefined deleteRequestSObjNode(RecompContext* ctx);
undefined setTailCutTime(RecompContext* ctx);
undefined setSmallManagerSystemLock(RecompContext* ctx);
undefined getNearInterestSmallAnimal(RecompContext* ctx);
undefined Undefined_Gap_0xB71E8_0xBB630(RecompContext* ctx);
undefined nico_SmallNamazuStart(RecompContext* ctx);
undefined NamazuInitFunc(RecompContext* ctx);
undefined Undefined_Gap_0xBBB18_0xBBD98(RecompContext* ctx);
undefined nico_snakeCBossStart(RecompContext* ctx);
undefined Undefined_Gap_0xBBE9C_0xBBF08(RecompContext* ctx);
undefined SCRFuncSnakeCDeflateEnd(RecompContext* ctx);
undefined SCRFuncSnakeCUpGroundInit(RecompContext* ctx);
undefined SCRFuncSnakeCUpGroundMain(RecompContext* ctx);
undefined nico_snakeBellyFrontTexEnd(RecompContext* ctx);
undefined nico_snakeBellyFrontTexStart(RecompContext* ctx);
undefined nico_snakeBellyCenterTexEnd(RecompContext* ctx);
undefined nico_snakeBellyCenterTexStart(RecompContext* ctx);
undefined nico_snakeBellyBackTexEnd(RecompContext* ctx);
undefined nico_snakeBellyBackTexStart(RecompContext* ctx);
undefined nico_snakeAllTexEnd(RecompContext* ctx);
undefined Undefined_Gap_0xBC218_0xBC3E8(RecompContext* ctx);
undefined nico_soundScriptStart(RecompContext* ctx);
undefined getNowExecEventScriptObj(RecompContext* ctx);
undefined setLoadingCheckFunc(RecompContext* ctx);
undefined setEventScriptEnable(RecompContext* ctx);
undefined Undefined_Gap_0xBC494_0xBC4D0(RecompContext* ctx);
undefined spritedisplaytrigger(RecompContext* ctx);
undefined spritedisplay(RecompContext* ctx);
undefined _SCRStartSpriteAnim(RecompContext* ctx);
undefined _SCRStartSpriteMenuAnim(RecompContext* ctx);
undefined ScrSpriteParamSetup(RecompContext* ctx);
undefined ScrSpriteParamEnd(RecompContext* ctx);
undefined spritemenudisplaytriggerpad_group(RecompContext* ctx);
undefined Undefined_Gap_0xBC950_0xBCBF0(RecompContext* ctx);
undefined setrollup(RecompContext* ctx);
undefined Undefined_Gap_0xBCCB8_0xBEC38(RecompContext* ctx);
undefined playerlifebar_sethp(RecompContext* ctx);
undefined Undefined_Gap_0xBECEC_0xBF570(RecompContext* ctx);
undefined playerlifebar_script(RecompContext* ctx);
undefined initWeaponSpriteStatus(RecompContext* ctx);
undefined setWeaponSpriteStatus(RecompContext* ctx);
undefined Undefined_Gap_0xBF848_0xC0508(RecompContext* ctx);
undefined bosslifebar_script(RecompContext* ctx);
undefined setPlayerStatusSwitch(RecompContext* ctx);
undefined setPlayerStatusDisableFadeCompareSwitch(RecompContext* ctx);
undefined SetPlayerStatusDispSw(RecompContext* ctx);
undefined startGaugeMaxAddEffect(RecompContext* ctx);
undefined startAttackEffect(RecompContext* ctx);
undefined setgrip(RecompContext* ctx);
undefined playerlifebar_effect(RecompContext* ctx);
undefined player_life_anim(RecompContext* ctx);
undefined spriteselweapon(RecompContext* ctx);
undefined bosslifebar_display(RecompContext* ctx);
undefined bosslifebar_resethp(RecompContext* ctx);
undefined bosslifebar_sethp(RecompContext* ctx);
undefined boss_life_anim(RecompContext* ctx);
undefined PlayerSprStatusBegin(RecompContext* ctx);
undefined PlayerSprStatusEnd(RecompContext* ctx);
undefined BossSprStatusBegin(RecompContext* ctx);
undefined BossSprStatusEnd(RecompContext* ctx);
undefined Undefined_Gap_0xC0D0C_0xC3620(RecompContext* ctx);
undefined nico_swordstart(RecompContext* ctx);
undefined CancelSwordEffect(RecompContext* ctx);
undefined Undefined_Gap_0xC3B68_0xC3F00(RecompContext* ctx);
undefined DispWithSwordBlur(RecompContext* ctx);
undefined DispWithTorchBlur(RecompContext* ctx);
undefined CheckSwordIndicateAimPoint(RecompContext* ctx);
undefined GetSwordFlareHitPlaneAttribute(RecompContext* ctx);
undefined getMinAmbient(RecompContext* ctx);
undefined getMaxAmbient(RecompContext* ctx);
undefined getMinAmbientLine(RecompContext* ctx);
undefined getMaxAmbientLine(RecompContext* ctx);
undefined getMinAngle(RecompContext* ctx);
undefined getMaxAngle(RecompContext* ctx);
undefined getMaxLineAngle(RecompContext* ctx);
undefined getMinAmbientWeak(RecompContext* ctx);
undefined getMaxAmbientWeak(RecompContext* ctx);
undefined getMinAmbientLineWeak(RecompContext* ctx);
undefined getMaxAmbientLineWeak(RecompContext* ctx);
undefined getMinAngleWeak(RecompContext* ctx);
undefined getMaxAngleWeak(RecompContext* ctx);
undefined getMaxLineAngleWeak(RecompContext* ctx);
undefined getMaxFogMulVal(RecompContext* ctx);
undefined getFogChangeSpeed(RecompContext* ctx);
undefined getSwordLineWidthMax(RecompContext* ctx);
undefined getSwordLineChangeSpeed(RecompContext* ctx);
undefined getSwordLlineChangeThreshold(RecompContext* ctx);
undefined getBossHPRatioBase(RecompContext* ctx);
undefined Undefined_Gap_0xC542C_0xC54E0(RecompContext* ctx);
undefined getSwordGlowDistMin(RecompContext* ctx);
undefined getSwordGlowDistMax(RecompContext* ctx);
undefined getCollisionGlowSpeed(RecompContext* ctx);
undefined getCollisionGlowTime(RecompContext* ctx);
undefined getCollisionPosOffset(RecompContext* ctx);
undefined Undefined_Gap_0xC552C_0xC5640(RecompContext* ctx);
undefined checkChangeWeaponTypeSwordToOther(RecompContext* ctx);
undefined SCRDirectionalArrowBegin(RecompContext* ctx);
undefined SCRDirectionalArrowEnd(RecompContext* ctx);
undefined Undefined_Gap_0xC56DC_0xC56F8(RecompContext* ctx);
undefined timeAttackTimeScriptEnd(RecompContext* ctx);
undefined Undefined_Gap_0xC5714_0xC5CB0(RecompContext* ctx);
undefined timeAttackInScript(RecompContext* ctx);
undefined timeAttackPauseScript(RecompContext* ctx);
undefined timeAttackRetryScript(RecompContext* ctx);
undefined timeAttackEndScript(RecompContext* ctx);
undefined timeAttackOverBGScript(RecompContext* ctx);
undefined timeAttackOverAlertScript(RecompContext* ctx);
undefined timeAttackTimeScript(RecompContext* ctx);
undefined SetItemMenuDisp(RecompContext* ctx);
undefined SelectOmakeItem(RecompContext* ctx);
undefined Undefined_Gap_0xC6D8C_0xC73D0(RecompContext* ctx);
undefined ReplayInScript(RecompContext* ctx);
undefined ReplayPauseScript(RecompContext* ctx);
undefined ReplayRetryScript(RecompContext* ctx);
undefined ReplayEndScript(RecompContext* ctx);
undefined ReplayOverBGScript(RecompContext* ctx);
undefined ReplayOverAlertScript(RecompContext* ctx);
undefined ReplayPauseScriptBegin(RecompContext* ctx);
undefined timeAttackInScriptBegin(RecompContext* ctx);
undefined timeAttackPauseScriptBegin(RecompContext* ctx);
undefined timeAttackTimeScriptBegin(RecompContext* ctx);
undefined timeAttackGameOverScriptBegin(RecompContext* ctx);
undefined GetTimeAttackNextPhase(RecompContext* ctx);
undefined GetTimeAttackTimer(RecompContext* ctx);
undefined SetTimeAttackTimeFlag(RecompContext* ctx);
undefined GetTimeAttackTimeLimit(RecompContext* ctx);
undefined ReplayInScriptBegin(RecompContext* ctx);
undefined GetReplayNextPhase(RecompContext* ctx);
undefined ReplayGameOverScriptBegin(RecompContext* ctx);
undefined Undefined_Gap_0xC8448_0xC85B8(RecompContext* ctx);
undefined CloseTimeAttackMenu(RecompContext* ctx);
undefined Undefined_Gap_0xC85EC_0xC8990(RecompContext* ctx);
undefined GetNumOmakeItem(RecompContext* ctx);
undefined CheckSelectDisp(RecompContext* ctx);
undefined Undefined_Gap_0xC8B30_0xC9178(RecompContext* ctx);
undefined demo_title(RecompContext* ctx);
undefined Undefined_Gap_0xC9588_0xC96F0(RecompContext* ctx);
undefined titlemenu(RecompContext* ctx);
undefined title_newfile(RecompContext* ctx);
undefined title_newfile_hard(RecompContext* ctx);
undefined title_loadfile(RecompContext* ctx);
undefined title_options(RecompContext* ctx);
undefined Undefined_Gap_0xC9BF8_0xC9C48(RecompContext* ctx);
undefined nico_tortoiseBossStart(RecompContext* ctx);
undefined Undefined_Gap_0xC9D68_0xC9FF0(RecompContext* ctx);
undefined nico_kameBodyExpression(RecompContext* ctx);
undefined SCRFuncKameRockLWSLoad(RecompContext* ctx);
undefined SCRConditionKameBattleAreaEscape(RecompContext* ctx);
undefined Undefined_Gap_0xCA9B4_0xCAAA8(RecompContext* ctx);
undefined SCRTortoiseShoot(RecompContext* ctx);
undefined SCRTortoisePulseCharge(RecompContext* ctx);
undefined SCRTortoisePulseChargeStop(RecompContext* ctx);
undefined SCRFuncTortoiseGeyserDamagedMain(RecompContext* ctx);
undefined SCRConditionTortoiseGeyserDamaged(RecompContext* ctx);
undefined SCRConditionTortoiseGeyserHitColAttr(RecompContext* ctx);
undefined SCRFuncKameFallPatienceCunterInit(RecompContext* ctx);
undefined SCRFuncKameFallPatienceCunterMain(RecompContext* ctx);
undefined SCRFuncKameFallPatienceCunterEnd(RecompContext* ctx);
undefined SCRConditionKameFallPatienceCunterCheck(RecompContext* ctx);
undefined SCRFuncKameSetMissileRadius(RecompContext* ctx);
undefined SCRFuncKameDemoFlagSet(RecompContext* ctx);
undefined SCRFuncKameDemoFlagReset(RecompContext* ctx);
undefined SCRFallRockDelete(RecompContext* ctx);
undefined SCRFallRockSub(RecompContext* ctx);
undefined SCRSetCrackAnimTimer(RecompContext* ctx);
undefined SCRConditionKameCrackAnimChack(RecompContext* ctx);
undefined SCRFuncKameCrackAnimMain(RecompContext* ctx);
undefined SCRFuncKameSetTemporaryTarget(RecompContext* ctx);
undefined SCRConditionKameNextTime(RecompContext* ctx);
undefined SCRConditionKameWallCaseFlagChack(RecompContext* ctx);
undefined SCRConditionKameMoveTimeChack(RecompContext* ctx);
undefined SCRFuncKameMoveTimeSet(RecompContext* ctx);
undefined SCRFuncKameMoveTimeReset(RecompContext* ctx);
undefined SCRFuncKameMoveTimeMain(RecompContext* ctx);
undefined SCRConditionKameNextAtkTime(RecompContext* ctx);
undefined SCRFuncKameNextAtkTimeInit(RecompContext* ctx);
undefined SCRFuncKameNextAtkTimeMain(RecompContext* ctx);
undefined Undefined_Gap_0xCB370_0xCB8C8(RecompContext* ctx);
undefined nico_unagiBossStart(RecompContext* ctx);
undefined SCRFuncUnagiThunder(RecompContext* ctx);
undefined Undefined_Gap_0xCBF4C_0xCC6B8(RecompContext* ctx);
undefined nico_eelAllTexEnd(RecompContext* ctx);
undefined Undefined_Gap_0xCC788_0xCC810(RecompContext* ctx);
undefined SCRFuncUnagiSetSelfColiForPath(RecompContext* ctx);
undefined SCRFuncUnagiResetSelfColiForPath(RecompContext* ctx);
undefined SCRFuncUnagiSetPlayerGazePos(RecompContext* ctx);
undefined SCRFuncUnagiSetAttackParam0(RecompContext* ctx);
undefined SCRFuncUnagiSetAttackParam1(RecompContext* ctx);
undefined SCRConditionUnagiSelectAttackLine(RecompContext* ctx);
undefined SCRConditionUnagiDamageCheck(RecompContext* ctx);
undefined SCRConditionUnagiCheckAttackLine(RecompContext* ctx);
undefined SCRFuncUnageSetAttackPos(RecompContext* ctx);
undefined SCRFuncUnageIncTblIdx(RecompContext* ctx);
undefined SCRFuncUnageInitBossNotParentTime(RecompContext* ctx);
undefined SCRFuncUnageMainBossNotParentTime(RecompContext* ctx);
undefined SCRConditionUnageBossNotParentTime(RecompContext* ctx);
undefined nico_eelHigeTexEnd(RecompContext* ctx);
undefined spriteweaponsight(RecompContext* ctx);
undefined SCRSetupWeaponPlayer(RecompContext* ctx);
undefined setIsWeapon(RecompContext* ctx);
undefined nico_weaponstart(RecompContext* ctx);
undefined initWeapon(RecompContext* ctx);
undefined getSelectWeapon(RecompContext* ctx);
undefined getWeaponName(RecompContext* ctx);
undefined setSelectWeapon(RecompContext* ctx);
undefined selectWeaponBefore(RecompContext* ctx);
undefined selectWeaponNext(RecompContext* ctx);
undefined chkPossessWeapon(RecompContext* ctx);
undefined sprWeaponSetMarker(RecompContext* ctx);
undefined sprWeaponGetMarkerPos(RecompContext* ctx);
undefined GetWeaponRange(RecompContext* ctx);
undefined Undefined_Gap_0xCD7D8_0xD0FB0(RecompContext* ctx);
undefined initSavePoint(RecompContext* ctx);
undefined deleteSavePoint(RecompContext* ctx);
undefined SetMapLogDispMode(RecompContext* ctx);
undefined getSprLogWorkSize(RecompContext* ctx);
undefined getSprLogWorkAddress(RecompContext* ctx);
undefined getSprLogStatusSize(RecompContext* ctx);
undefined getSprLogStatusAddress(RecompContext* ctx);
undefined getLogLineColorR(RecompContext* ctx);
undefined getLogLineColorG(RecompContext* ctx);
undefined getLogLineColorB(RecompContext* ctx);
undefined getLogLineColorA(RecompContext* ctx);
undefined mapLogReset(RecompContext* ctx);
undefined createPauseMenuMap(RecompContext* ctx);
undefined initPauseMenuMap(RecompContext* ctx);
undefined st_pausemenu_load_omake_chara(RecompContext* ctx);
undefined setLoadMapOffset(RecompContext* ctx);
undefined mapScript(RecompContext* ctx);
undefined PauseMapStart(RecompContext* ctx);
undefined execPause(RecompContext* ctx);
undefined isInLoadWait(RecompContext* ctx);
undefined LoadWaitCancel(RecompContext* ctx);
undefined LoadWaitScript(RecompContext* ctx);
undefined Undefined_Gap_0xD1304_0xD14A8(RecompContext* ctx);
undefined nico_yamori2Start(RecompContext* ctx);
undefined Undefined_Gap_0xD15BC_0xD16D0(RecompContext* ctx);
undefined SCRFuncYamoriBSendFallKey(RecompContext* ctx);
undefined Undefined_Gap_0xD1A48_0xD20D0(RecompContext* ctx);
undefined SCRFuncYamoriBProgramRotForWindAttack(RecompContext* ctx);
undefined Undefined_Gap_0xD23FC_0xD2568(RecompContext* ctx);
undefined SCRFuncYamoriAdjustment(RecompContext* ctx);
undefined SCRYamori2BeginStand(RecompContext* ctx);
undefined SCRYamoriBReadyToBreeze(RecompContext* ctx);
undefined SCRYamoriBReadyToBreeze2(RecompContext* ctx);
undefined SCRFuncYamoriBDamageCheckInit(RecompContext* ctx);
undefined SCRFuncYamoriBDamageCheckMain(RecompContext* ctx);
undefined SCRConditionYamoriBDamageCheckFrontR(RecompContext* ctx);
undefined SCRConditionYamoriBDamageCheckBackR(RecompContext* ctx);
undefined SCRConditionYamoriBDamageCheckFrontL(RecompContext* ctx);
undefined SCRConditionYamoriBDamageCheckBackL(RecompContext* ctx);
undefined SCRFuncYamoriBSendKLeftStandUpLey(RecompContext* ctx);
undefined SCRFuncYamoriBSetCalcPosOffset(RecompContext* ctx);
undefined SCRFuncYamoriBSetAttainPointForAttack(RecompContext* ctx);
undefined SCRFuncYamoriBSetAttainPointForWindAttack(RecompContext* ctx);
undefined SCRConditionYamoriBChangeAttainPointForAttack(RecompContext* ctx);
undefined SCRFuncYamoriBSetBreathVolume(RecompContext* ctx);
undefined SCRFuncYamoriBGounrdAttackMain(RecompContext* ctx);
undefined SCRFuncYamoriBSetRandomRadius(RecompContext* ctx);
undefined SCRFuncYamoriBSetRandomRadius2(RecompContext* ctx);
undefined SCRFuncYamoriBUnsetRandom(RecompContext* ctx);
undefined SCRFuncYamoriBSetAttackPosAndGazePosInit(RecompContext* ctx);
undefined SCRFuncYamoriBSetAttackPosAndGazePosMain(RecompContext* ctx);
undefined SCRFuncYamoriBSetBellyDamageParam(RecompContext* ctx);
undefined SCRFuncYamoriBSetBellyDamageInitWork(RecompContext* ctx);
undefined SCRConditionYamoriBLessBellyDamageProgress(RecompContext* ctx);
undefined SCRConditionYamoriBBellyDamageCheck(RecompContext* ctx);
undefined SCRFuncYamoriBSetAttainPos(RecompContext* ctx);
undefined SCRFuncYamoriBSetAttainPosForGroundAttack(RecompContext* ctx);
undefined SCRFuncYamoriBAimInit(RecompContext* ctx);
undefined nico_yamoriArmRightTexEnd(RecompContext* ctx);
undefined nico_yamoriArmRightTexStart(RecompContext* ctx);
undefined nico_yamoriArmLeftTexEnd(RecompContext* ctx);
undefined nico_yamoriArmLeftTexStart(RecompContext* ctx);
undefined nico_yamoriLegRightTexEnd(RecompContext* ctx);
undefined nico_yamoriLegRightTexStart(RecompContext* ctx);
undefined nico_yamoriLegLeftTexEnd(RecompContext* ctx);
undefined nico_yamoriLegLeftTexStart(RecompContext* ctx);
undefined nico_yamoriAllTexEnd(RecompContext* ctx);
undefined nico_yamoriAllTexStart(RecompContext* ctx);
undefined Undefined_Gap_0xD3C6C_0xD4048(RecompContext* ctx);
undefined demo_common(RecompContext* ctx);
undefined demoManBootRequest(RecompContext* ctx);
undefined demoManBootChk(RecompContext* ctx);
undefined demoManStart(RecompContext* ctx);
undefined demoManChkStart(RecompContext* ctx);
undefined demoManEnd(RecompContext* ctx);
undefined demoManChkLoadFinish(RecompContext* ctx);
undefined demoManSkip(RecompContext* ctx);
undefined IsForwardTime__DemoMan(RecompContext* ctx);
undefined ForwardTime__DemoMan(RecompContext* ctx);
undefined Undefined_Gap_0xD4730_0xD4758(RecompContext* ctx);
undefined player_collision_check_direct_water_surface_plus(RecompContext* ctx);
undefined get_camera_collision_data(RecompContext* ctx);
undefined Undefined_Gap_0xD4D64_0xD4FE8(RecompContext* ctx);
undefined acted_camera_warp(RecompContext* ctx);
undefined camera_collision_check_direct(RecompContext* ctx);
undefined camera_invisible_collision_check_direct_by_exception_obj(RecompContext* ctx);
undefined player_collision_check_direct(RecompContext* ctx);
undefined is_hit_cam_opt_leave_collision_attribute(RecompContext* ctx);
undefined create_camera_collisionDB(RecompContext* ctx);
undefined get_camera_collision_data_base_filter_radius(RecompContext* ctx);
undefined camera_collision_check_with_keep(RecompContext* ctx);
undefined check_camera_position_float_by_collision(RecompContext* ctx);
undefined get_camera_position_float_by_hit_collision(RecompContext* ctx);
undefined constructor_camera_collision_data(RecompContext* ctx);
undefined reset_camera_collision_data_except_slide_move_ratio(RecompContext* ctx);
undefined Undefined_Gap_0xD5BEC_0xD6038(RecompContext* ctx);
undefined constructor_camera_default_angle(RecompContext* ctx);
undefined doit_camera_default_angle(RecompContext* ctx);
undefined Undefined_Gap_0xD63D4_0xD65F8(RecompContext* ctx);
undefined get_base_default_direction(RecompContext* ctx);
undefined Undefined_Gap_0xD6A5C_0xD6B90(RecompContext* ctx);
undefined get_cur_attr_camera_default_angle(RecompContext* ctx);
undefined is_safety_camera_default_angle(RecompContext* ctx);
undefined is_must_reach_normal_default_angle(RecompContext* ctx);
undefined Undefined_Gap_0xD6C24_0xD73E8(RecompContext* ctx);
undefined constructor_camera_dist_to_look_at(RecompContext* ctx);
undefined doit_camera_dist_to_look_at(RecompContext* ctx);
undefined reset_time_interp_param_camera_dist_to_look_at(RecompContext* ctx);
undefined begin_time_interp_camera_dist_to_look_at(RecompContext* ctx);
undefined set_stretch_phase_ratio_camera_dist_to_look_at(RecompContext* ctx);
undefined get_stretch_phase_ratio_camera_dist_to_look_at(RecompContext* ctx);
undefined is_acting_rewind_camera_dist_to_look_at(RecompContext* ctx);
undefined get_rewind_begin_dist_to_target_camera_dist_to_look_at(RecompContext* ctx);
undefined end_rewind_camera_dist_to_look_at(RecompContext* ctx);
undefined is_leave_camera_dist_to_look_at(RecompContext* ctx);
undefined Undefined_Gap_0xD7664_0xD79A0(RecompContext* ctx);
undefined doit_camera_etc_condition(RecompContext* ctx);
undefined constructor_camera_etc_condition(RecompContext* ctx);
undefined is_pass_camera_etc_condition(RecompContext* ctx);
undefined set_post_boss_dead_playable_flag_camera_etc_condition(RecompContext* ctx);
undefined Undefined_Gap_0xD7C68_0xD7DB0(RecompContext* ctx);
undefined doit_camera_final_update(RecompContext* ctx);
undefined Undefined_Gap_0xD8064_0xD82E0(RecompContext* ctx);
undefined constructor_camera_final_update(RecompContext* ctx);
undefined Undefined_Gap_0xD8344_0xD8490(RecompContext* ctx);
undefined reset_camera_vs_ofst_cntrl_param_segment_array(RecompContext* ctx);
undefined get_nearest_camera_vs_ofst_cntrl_position(RecompContext* ctx);
undefined disp_camera_vs_ofst_cntrl_position(RecompContext* ctx);
undefined add_camera_vs_ofst_cntrl_param_segment(RecompContext* ctx);
undefined free_camera_vs_ofst_cntrl_param_segment(RecompContext* ctx);
undefined doit_camera_pause_rise(RecompContext* ctx);
undefined constructor_camera_pause_rise(RecompContext* ctx);
undefined init_camera_pause_rise(RecompContext* ctx);
undefined request_end_camera_pause_rise(RecompContext* ctx);
undefined is_end_camera_pause_rise(RecompContext* ctx);
undefined get_begin_interp_finish_time_camera_pause_rise(RecompContext* ctx);
undefined get_end_interp_finish_time_camera_pause_rise(RecompContext* ctx);
undefined Undefined_Gap_0xD8C34_0xD9138(RecompContext* ctx);
undefined get_manage_obj_status_camera_place_status(RecompContext* ctx);
undefined init_camera_place_status(RecompContext* ctx);
undefined doit_camera_place_status(RecompContext* ctx);
undefined get_place_status_camera_place_status(RecompContext* ctx);
undefined get_manage_obj_camera_place_status(RecompContext* ctx);
undefined get_mode_condition_segment_camera_place_status(RecompContext* ctx);
undefined get_hit_camera_region_camera_place_status(RecompContext* ctx);
undefined get_cutout_mode_manager_segment_camera_place_status(RecompContext* ctx);
undefined get_cam_region_col_attr_camera_place_status(RecompContext* ctx);
undefined get_on_boss_camera_col_attr_camera_place_status(RecompContext* ctx);
undefined is_approach_rise_ok_camera_place_status(RecompContext* ctx);
undefined is_cliff_rise_ok_camera_place_status(RecompContext* ctx);
undefined is_cliff_rise_delay_camera_place_status(RecompContext* ctx);
undefined act_local_vs_ofst_camera_place_status(RecompContext* ctx);
undefined act_horse_look_at_ofst_decrease_camera_place_status(RecompContext* ctx);
undefined act_look_at_ofst_cut_camera_place_status(RecompContext* ctx);
undefined Undefined_Gap_0xD98A0_0xD9980(RecompContext* ctx);
undefined CAM_doit_slope_cntrl(RecompContext* ctx);
undefined Undefined_Gap_0xD9AF4_0xDA338(RecompContext* ctx);
undefined CAM_reset_slope_cntrl(RecompContext* ctx);
undefined CAM_get_interp_slope_pitch_ofst(RecompContext* ctx);
undefined Undefined_Gap_0xDA3A4_0xDA718(RecompContext* ctx);
undefined doit_camera_target_approach(RecompContext* ctx);
undefined constructor_camera_target_approach(RecompContext* ctx);
undefined get_upper_limit_clip_default_pitch_camera_target_approach(RecompContext* ctx);
undefined is_cut_default_pitch_interp_camera_target_approach(RecompContext* ctx);
undefined reset_pitch_rot_cntrl_camera_target_approach(RecompContext* ctx);
undefined act_pitch_rot_camera_target_approach(RecompContext* ctx);
undefined act_approach_judge_ray_check_camera_target_approach(RecompContext* ctx);
undefined get_status_camera_target_approach(RecompContext* ctx);
undefined Undefined_Gap_0xDABF4_0xDAD90(RecompContext* ctx);
undefined doit_camera_target_lost_angle(RecompContext* ctx);
undefined constructor_camera_target_lost_angle(RecompContext* ctx);
undefined get_yaw_pitch_camera_target_lost_angle(RecompContext* ctx);
undefined get_attr_camera_target_lost_angle(RecompContext* ctx);
undefined is_exist_camera_target_lost_angle(RecompContext* ctx);
undefined Undefined_Gap_0xDB00C_0xDB828(RecompContext* ctx);
undefined begin_and_update_get_yaw_pitch_camera_target_visible_angle_manager(RecompContext* ctx);
undefined is_exist_camera_target_visible_angle(RecompContext* ctx);
undefined constructor_camera_target_visible_angle_manager(RecompContext* ctx);
undefined set_parameter_camera_target_visible_angle_manager(RecompContext* ctx);
undefined reset_camera_target_visible_angle_manager(RecompContext* ctx);
undefined doit_camera_target_visible_angle_manager(RecompContext* ctx);
undefined end_get_yaw_pitch_camera_target_visible_angle_manager(RecompContext* ctx);
undefined Undefined_Gap_0xDBBE0_0xDBE60(RecompContext* ctx);
undefined CAM_get_base_space_posi_and_axisXYZ(RecompContext* ctx);
undefined CAM_get_warp_position(RecompContext* ctx);
undefined CAM_get_interp_cam_and_look_at_posi(RecompContext* ctx);
undefined CAM_get_safety_cam_and_look_at_posi(RecompContext* ctx);
undefined CAM_doit_aim_angle_rot(RecompContext* ctx);
undefined Undefined_Gap_0xDCC5C_0xDCF58(RecompContext* ctx);
undefined CAM_doit_subjective_target_visibility_and_update_cam_data(RecompContext* ctx);
undefined Undefined_Gap_0xDD18C_0xDD588(RecompContext* ctx);
undefined CAM_reset_target_offset(RecompContext* ctx);
undefined CAM_doit_target_offset(RecompContext* ctx);
undefined Undefined_Gap_0xDD8F0_0xDE4E8(RecompContext* ctx);
undefined CAM_doit_post_update_new_camera_data_target_offset(RecompContext* ctx);
undefined CAM_doit_view_cut_avoid_cntrl(RecompContext* ctx);
undefined CAM_doit_obstacle_avoid_cntrl(RecompContext* ctx);
undefined Undefined_Gap_0xDED40_0xDEED8(RecompContext* ctx);
undefined CAM_constructor_follow_rot(RecompContext* ctx);
undefined Undefined_Gap_0xDF058_0xDF770(RecompContext* ctx);
undefined setAspect(RecompContext* ctx);
undefined CAM_get_parent_obj_by_base_space(RecompContext* ctx);
undefined CAM_shuffle_lws_base_space_target_boss_interest_axis_X(RecompContext* ctx);
undefined CAM_get_yaw_velocity(RecompContext* ctx);
undefined CAM_get_pitch_velocity(RecompContext* ctx);
undefined CAM_is_reach_aim_yaw(RecompContext* ctx);
undefined CAM_is_reach_aim_pitch(RecompContext* ctx);
undefined CAM_near_to_aim_yaw(RecompContext* ctx);
undefined CAM_near_to_aim_pitch(RecompContext* ctx);
undefined CAM_get_camera_position_by_look_at(RecompContext* ctx);
undefined CAM_get_camera_space_axisXY(RecompContext* ctx);
undefined CAM_get_new_look_at_posi_from_camera_posi_and_rotXY(RecompContext* ctx);
undefined CAM_get_interp_ratio_by_time(RecompContext* ctx);
undefined CAM_act_ray_check_for_camera(RecompContext* ctx);
undefined CAM_add_plane_offset_in_position(RecompContext* ctx);
undefined CAM_get_mul_ratio_offset_per_axis(RecompContext* ctx);
undefined CAM_copy_camera_base_data(RecompContext* ctx);
undefined CAM_set_all_camera_base_data(RecompContext* ctx);
undefined CAM_interp_reset_aim_rot_common(RecompContext* ctx);
undefined CAM_set_clip_max_rot_vel_aim_rot_common(RecompContext* ctx);
undefined CAM_set_yaw_shortest_rot_flag_aim_rot_common(RecompContext* ctx);
undefined CAM_set_interp_param_aim_rot_common(RecompContext* ctx);
undefined CAM_set_interp_param_extend_aim_rot_common(RecompContext* ctx);
undefined CAM_is_inside_of_stop_region_aim_rot_common(RecompContext* ctx);
undefined CAM_init_aim_angle_rot(RecompContext* ctx);
undefined CAM_reset_aim_angle_rot(RecompContext* ctx);
undefined CAM_is_inside_of_region_aim_angle_rot(RecompContext* ctx);
undefined CAM_constructor_target(RecompContext* ctx);
undefined CAM_destructor_target(RecompContext* ctx);
undefined CAM_doit_target(RecompContext* ctx);
undefined CAM_is_motion_kind_change_target(RecompContext* ctx);
undefined CAM_get_motion_kind_interp_timer_target(RecompContext* ctx);
undefined CAM_get_motion_kind_interp_ratio_target(RecompContext* ctx);
undefined CAM_motion_kind_is_look_around_motion_target(RecompContext* ctx);
undefined CAM_motion_kind_act_auto_yaw_rot_target(RecompContext* ctx);
undefined CAM_motion_kind_is_accept_auto_rot_motion_target(RecompContext* ctx);
undefined CAM_motion_kind_is_accept_follow_rot_motion_target(RecompContext* ctx);
undefined CAM_get_motion_kind_follow_rot_axis_attr_target(RecompContext* ctx);
undefined CAM_motion_kind_is_mode_lock_target(RecompContext* ctx);
undefined CAM_motion_kind_get_interest_dir_reset_attr_target(RecompContext* ctx);
undefined CAM_set_target_display_flag(RecompContext* ctx);
undefined CAM_get_target_obj(RecompContext* ctx);
undefined CAM_get_target_riding_obj(RecompContext* ctx);
undefined CAM_get_ground_contact_obj(RecompContext* ctx);
undefined CAM_is_target_float(RecompContext* ctx);
undefined CAM_is_target_fast_moving(RecompContext* ctx);
undefined CAM_constructor_target_visibility(RecompContext* ctx);
undefined CAM_doit_objective_target_visibility(RecompContext* ctx);
undefined CAM_is_visible_now_target_visibility(RecompContext* ctx);
undefined CAM_is_return_cam_posi_target_visibility(RecompContext* ctx);
undefined CAM_init_camera_warp_cntrl(RecompContext* ctx);
undefined CAM_reset_camera_warp_cntrl(RecompContext* ctx);
undefined CAM_doit_camera_warp_cntrl(RecompContext* ctx);
undefined CAM_act_warp_camera_warp_cntrl(RecompContext* ctx);
undefined CAM_set_invisible_warp_apply_range_camera_warp_cntrl(RecompContext* ctx);
undefined CAM_act_warp_order_camera_warp_cntrl(RecompContext* ctx);
undefined CAM_reset_view_cut_avoid_cntrl(RecompContext* ctx);
undefined CAM_get_update_yaw_by_view_cut_avoid_cntrl(RecompContext* ctx);
undefined CAM_get_update_pitch_by_view_cut_avoid_cntrl(RecompContext* ctx);
undefined CAM_is_acting_view_cut_avoid_cntrl(RecompContext* ctx);
undefined CAM_set_param_view_cut_avoid_cntrl(RecompContext* ctx);
undefined CAM_reset_obstacle_avoid_cntrl(RecompContext* ctx);
undefined CAM_is_need_obstacle_avoid_ofst(RecompContext* ctx);
undefined CAM_act_avoid_rot_obstacle_avoid_cntrl(RecompContext* ctx);
undefined CAM_is_use_obstacle_target_ofst_interp_coe(RecompContext* ctx);
undefined CAM_constructor_base_look_at(RecompContext* ctx);
undefined CAM_doit_base_look_at(RecompContext* ctx);
undefined CAM_constructor_look_at_spring(RecompContext* ctx);
undefined CAM_doit_look_at_spring(RecompContext* ctx);
undefined CAM_reset_mode_ratio_follow_rot(RecompContext* ctx);
undefined CAM_doit_follow_rot(RecompContext* ctx);
undefined Undefined_Gap_0xE15BC_0xE28B0(RecompContext* ctx);
undefined doit_camera_view_angle_cntrl(RecompContext* ctx);
undefined constructor_camera_view_angle_cntrl(RecompContext* ctx);
undefined get_view_angle_camera_view_angle_cntrl(RecompContext* ctx);
undefined Undefined_Gap_0xE2B50_0xE2D48(RecompContext* ctx);
undefined create_cameraman(RecompContext* ctx);
undefined doit_cameraman(RecompContext* ctx);
undefined get_camera_obj(RecompContext* ctx);
undefined set_camera_mode(RecompContext* ctx);
undefined get_cur_camera_mode(RecompContext* ctx);
undefined get_camera_mode_name(RecompContext* ctx);
undefined get_camera_target_group(RecompContext* ctx);
undefined get_camera_move_collision_group(RecompContext* ctx);
undefined get_camera_visible_collision_group(RecompContext* ctx);
undefined get_player_collision_group_cameraman(RecompContext* ctx);
undefined get_lws_animation_collision_group_cameraman(RecompContext* ctx);
undefined get_game_camera(RecompContext* ctx);
undefined get_cur_camera_target(RecompContext* ctx);
undefined get_game_camera_WV_matrix(RecompContext* ctx);
undefined is_game_camera_mode_now(RecompContext* ctx);
undefined is_camera_target_change(RecompContext* ctx);
undefined is_camera_target_debug_move(RecompContext* ctx);
undefined change_camera_target(RecompContext* ctx);
undefined change_to_player_camera_target(RecompContext* ctx);
undefined set_camera_parameter_cameraman(RecompContext* ctx);
undefined set_camera_parameter_and_update_cameraman(RecompContext* ctx);
undefined get_camera_parameter_cameraman(RecompContext* ctx);
undefined check_free_cameraman(RecompContext* ctx);
undefined Undefined_Gap_0xE3274_0xE33A0(RecompContext* ctx);
undefined init_cameraman_manager(RecompContext* ctx);
undefined doit_cameraman_manager(RecompContext* ctx);
undefined get_main_cameraman(RecompContext* ctx);
undefined get_main_cameraman_camera_obj(RecompContext* ctx);
undefined get_cameraman(RecompContext* ctx);
undefined get_cameraman_camera_obj(RecompContext* ctx);
undefined employ_cameraman(RecompContext* ctx);
undefined change_main_cameraman(RecompContext* ctx);
undefined get_main_cameraman_id(RecompContext* ctx);
undefined is_main_cameraman_exist(RecompContext* ctx);
undefined get_total_cameraman(RecompContext* ctx);
undefined get_max_cameraman(RecompContext* ctx);
undefined Undefined_Gap_0xE3688_0xE3690(RecompContext* ctx);
undefined doit_debug_camera(RecompContext* ctx);
undefined DebugGetCameraWithManual(RecompContext* ctx);
undefined Undefined_Gap_0xE4168_0xE47A0(RecompContext* ctx);
undefined update_debug_camera_yaw_pitch(RecompContext* ctx);
undefined get_debug_camera_view_angle(RecompContext* ctx);
undefined get_debug_camera_view_angle_pointer(RecompContext* ctx);
undefined is_disp_game_camera_model_ok(RecompContext* ctx);
undefined is_disp_game_camera_model_ok_pointer(RecompContext* ctx);
undefined get_debug_camera_dist_to_look_at_pointer(RecompContext* ctx);
undefined set_debug_camera_move_diff(RecompContext* ctx);
undefined check_and_boot_boss_subjective_camera_lws_animation(RecompContext* ctx);
undefined constructor_game_camera(RecompContext* ctx);
undefined Undefined_Gap_0xE4C10_0xEAD80(RecompContext* ctx);
undefined constructor_mode_common_camera_data(RecompContext* ctx);
undefined copy_mode_common_camera_data(RecompContext* ctx);
undefined update_by_yaw_pitch_mode_common_camera_data(RecompContext* ctx);
undefined update_by_cam_and_look_at_posi_mode_common_camera_data(RecompContext* ctx);
undefined flush_game_camera(RecompContext* ctx);
undefined doit_game_camera(RecompContext* ctx);
undefined reset_game_camera(RecompContext* ctx);
undefined get_game_camera_cur_mode(RecompContext* ctx);
undefined is_reset_or_lws_movie_game_camera(RecompContext* ctx);
undefined is_reset_or_lws_movie_or_cutout_game_camera(RecompContext* ctx);
undefined is_reset_or_lws_fixed_point_or_lws_movie_or_cutout_game_camera(RecompContext* ctx);
undefined get_cur_using_lws_anime_mode_base_class(RecompContext* ctx);
undefined get_look_at_position_game_camera(RecompContext* ctx);
undefined jack_game_camera(RecompContext* ctx);
undefined end_jack_game_camera(RecompContext* ctx);
undefined begin_pause_rise_game_camera(RecompContext* ctx);
undefined request_end_pause_rise_game_camera(RecompContext* ctx);
undefined is_end_pause_rise_game_camera(RecompContext* ctx);
undefined is_game_camera_standby_ok(RecompContext* ctx);
undefined reset_game_camera_standby_flag(RecompContext* ctx);
undefined set_object_interest_mode_target_game_camera(RecompContext* ctx);
undefined get_object_interest_mode_target_game_camera(RecompContext* ctx);
undefined begin_object_interest_game_camera(RecompContext* ctx);
undefined end_object_interest_game_camera(RecompContext* ctx);
undefined is_proper_camera_target_game_camera(RecompContext* ctx);
undefined is_hit_leave_plane_game_camera(RecompContext* ctx);
undefined is_playing_lws_movie_now_game_camera(RecompContext* ctx);
undefined get_look_lws_anime_camera_flag(RecompContext* ctx);
undefined get_cur_using_camera_mode_condition_param_game_camera(RecompContext* ctx);
undefined get_cur_using_camera_mode_manager_param_game_camera(RecompContext* ctx);
undefined get_snipe_position_decide_parameter_game_camera(RecompContext* ctx);
undefined begin_check_and_boot_boss_subjective_camera_lws_animation(RecompContext* ctx);
undefined end_check_and_boot_boss_subjective_camera_lws_animation(RecompContext* ctx);
undefined begin_stream_lws_movie_playing_game_camera(RecompContext* ctx);
undefined end_stream_lws_movie_playing_game_camera(RecompContext* ctx);
undefined compel_end_lws_movie_mode_game_camera(RecompContext* ctx);
undefined get_boss_interest_position_game_camera(RecompContext* ctx);
undefined get_object_interest_position_game_camera(RecompContext* ctx);
undefined is_boss_interest_mode_game_camera(RecompContext* ctx);
undefined is_mode_change_game_camera(RecompContext* ctx);
undefined is_view_angle_zoom_game_camera(RecompContext* ctx);
undefined is_view_angle_exist_lws_anime_mode_base(RecompContext* ctx);
undefined get_view_angle_lws_anime_mode_base(RecompContext* ctx);
undefined add_camera_mode_common_param_segment(RecompContext* ctx);
undefined add_camera_mode_manager_segment(RecompContext* ctx);
undefined free_camera_mode_manager_segment(RecompContext* ctx);
undefined get_boss_subjective_camera_lws_animation_param(RecompContext* ctx);
undefined getBossInterestKey(RecompContext* ctx);
undefined getInterestKey(RecompContext* ctx);
undefined getZoomKey(RecompContext* ctx);
undefined setBossInterestKey(RecompContext* ctx);
undefined setInterestKey(RecompContext* ctx);
undefined setZoomKey(RecompContext* ctx);
undefined Undefined_Gap_0xEB894_0xEB8C0(RecompContext* ctx);
undefined is_lws_fixed_point_mode(RecompContext* ctx);
undefined is_lws_movie_mode_game_camera(RecompContext* ctx);
undefined Undefined_Gap_0xEB91C_0xEE508(RecompContext* ctx);
undefined doit_game_camera_param_manager(RecompContext* ctx);
undefined get_best_mode_manager(RecompContext* ctx);
undefined Undefined_Gap_0xEE9EC_0xF1E70(RecompContext* ctx);
undefined get_game_camera_mode_local_parameter(RecompContext* ctx);
undefined constructor_game_camera_param_manager(RecompContext* ctx);
undefined get_cur_base_mode_condition_game_camera_param_manager(RecompContext* ctx);
undefined get_cur_base_mode_manager_game_camera_param_manager(RecompContext* ctx);
undefined is_base_mode_manager_update_game_camera_param_manager(RecompContext* ctx);
undefined get_interp_game_camera_param_game_camera_param_manager(RecompContext* ctx);
undefined get_interp_time_game_camera_param_manager(RecompContext* ctx);
undefined get_interp_ratio_game_camera_param_manager(RecompContext* ctx);
undefined is_base_default_dir_attr_change_game_camera_param_manager(RecompContext* ctx);
undefined act_camera_cutout_game_camera_param_manager(RecompContext* ctx);
undefined drop_camera_cutout_flag_game_camera_param_manager(RecompContext* ctx);
undefined constructor_game_camera_param_update_data_manager(RecompContext* ctx);
undefined reset_game_camera_param_update_data_manager(RecompContext* ctx);
undefined set_update_data_game_camera_param_update_data_manager(RecompContext* ctx);
undefined is_already_set_game_camera_param_update_data_manager(RecompContext* ctx);
undefined constructor_game_camera_mode_local_parameter(RecompContext* ctx);
undefined get_mode_common_data_filter_base_dist_to_look_at(RecompContext* ctx);
undefined Undefined_Gap_0xF25D4_0xF2AC0(RecompContext* ctx);
undefined initISysPathObj(RecompContext* ctx);
undefined createUserPathWork(RecompContext* ctx);
undefined updateUserPathWork(RecompContext* ctx);
undefined chkAttainExecOffsetData(RecompContext* ctx);
undefined execPointListSort(RecompContext* ctx);
undefined getNearPoint(RecompContext* ctx);
undefined Undefined_Gap_0xF4110_0xF5B80(RecompContext* ctx);
undefined updatePathInfo(RecompContext* ctx);
undefined Undefined_Gap_0xF5CF8_0xF5E20(RecompContext* ctx);
undefined widePathCollisionDirect(RecompContext* ctx);
undefined Undefined_Gap_0xF61EC_0xF6540(RecompContext* ctx);
undefined getNearPointPosUserPathWork(RecompContext* ctx);
undefined Undefined_Gap_0xF6980_0xF7240(RecompContext* ctx);
undefined getDeadPosAndQuaternion(RecompContext* ctx);
undefined Undefined_Gap_0xF75F4_0xF7DC8(RecompContext* ctx);
undefined delISysPathObj(RecompContext* ctx);
undefined setBossPathColiGroup(RecompContext* ctx);
undefined setHorsePathColiGroup(RecompContext* ctx);
undefined getPathColiGroup(RecompContext* ctx);
undefined getPathColiGroupByType(RecompContext* ctx);
undefined getAimPosFromPathManager(RecompContext* ctx);
undefined getPassageWork(RecompContext* ctx);
undefined getPassageNum(RecompContext* ctx);
undefined deletePassageWork(RecompContext* ctx);
undefined setDataHeaderFromAreaIdx(RecompContext* ctx);
undefined resetUserPathWork(RecompContext* ctx);
undefined setRealColJudgeFunc(RecompContext* ctx);
undefined getRealColJudgeFunc(RecompContext* ctx);
undefined setSelfColAndNearMinDist(RecompContext* ctx);
undefined setLockPassageWork(RecompContext* ctx);
undefined setStabilizeYPathWork(RecompContext* ctx);
undefined setAngleStabilizeYPathWork(RecompContext* ctx);
undefined setRayByRealColPathWork(RecompContext* ctx);
undefined setPassageWideRayPathWork(RecompContext* ctx);
undefined setExecRayChkPathWork(RecompContext* ctx);
undefined setRayCutPassageWork(RecompContext* ctx);
undefined setForceRouteAttrPathWork(RecompContext* ctx);
undefined setRouteColCheckPathWork(RecompContext* ctx);
undefined setRouteLockPathWork(RecompContext* ctx);
undefined setPlayerWayColCheckPathWork(RecompContext* ctx);
undefined setFollowModePathWork(RecompContext* ctx);
undefined setPassageCallBack(RecompContext* ctx);
undefined deleteUserPathWork(RecompContext* ctx);
undefined setUserPathMode(RecompContext* ctx);
undefined setPassageRangeData(RecompContext* ctx);
undefined setAttainRangeData(RecompContext* ctx);
undefined setAttainRangeStruct(RecompContext* ctx);
undefined setTmpBasePos(RecompContext* ctx);
undefined setCreateTempAttain(RecompContext* ctx);
undefined setAttainmentPos(RecompContext* ctx);
undefined setAttainmentObj(RecompContext* ctx);
undefined setAttainmentPosAndLock(RecompContext* ctx);
undefined setAttainmentPosAndDirPos(RecompContext* ctx);
undefined setAttainmentPosAndDirPosAndLock(RecompContext* ctx);
undefined setAttainmentPosAndDir(RecompContext* ctx);
undefined setAttainmentPosAndDirAndLock(RecompContext* ctx);
undefined setAttainmentObjAndDir(RecompContext* ctx);
undefined setAttainmentObjAndOffset(RecompContext* ctx);
undefined setAttainModePathWork(RecompContext* ctx);
undefined setAttainRadPathWork(RecompContext* ctx);
undefined getPathInfo(RecompContext* ctx);
undefined getWayFinish(RecompContext* ctx);
undefined getPathStatus(RecompContext* ctx);
undefined useTempAttain(RecompContext* ctx);
undefined getWayForRoute(RecompContext* ctx);
undefined getLastAttainUpdate(RecompContext* ctx);
undefined getLastPassagePointIdx(RecompContext* ctx);
undefined getLastPassageAreaIdx(RecompContext* ctx);
undefined getNowPassagePointIdx(RecompContext* ctx);
undefined getNowPassageAreaIdx(RecompContext* ctx);
undefined setRouteMinAngle(RecompContext* ctx);
undefined setSearchRouteMaxAngle(RecompContext* ctx);
undefined setSearchRadius(RecompContext* ctx);
undefined setSearchPointMax(RecompContext* ctx);
undefined setPathRayWideParam(RecompContext* ctx);
undefined setReductionCosUserPathWork(RecompContext* ctx);
undefined setEventLineAttr(RecompContext* ctx);
undefined unsetEventLineAttr(RecompContext* ctx);
undefined resetEventLineAttr(RecompContext* ctx);
undefined allResetLineAttr(RecompContext* ctx);
undefined setEventLinePrio(RecompContext* ctx);
undefined setEventLineDir(RecompContext* ctx);
undefined chkAttainExecLayout(RecompContext* ctx);
undefined chkAttainExecOffsetRadius(RecompContext* ctx);
undefined chkAttainExecOffsetPos(RecompContext* ctx);
undefined chkAttainExecColumn(RecompContext* ctx);
undefined resetPassageWork(RecompContext* ctx);
undefined pathDetectCollision(RecompContext* ctx);
undefined pathDetectCollision2(RecompContext* ctx);
undefined getPathDataAddr(RecompContext* ctx);
undefined getLineDataByAreaIdx(RecompContext* ctx);
undefined getPointDataByAreaIdx(RecompContext* ctx);
undefined getConnectLineArrayByAreaIdx(RecompContext* ctx);
undefined getConnectPointData(RecompContext* ctx);
undefined pathJudgeFunc(RecompContext* ctx);
undefined addPassageInsertPos(RecompContext* ctx);
undefined forceSetWayFinish(RecompContext* ctx);
undefined forceAddPassageWork(RecompContext* ctx);
undefined getPointDataFromEvent(RecompContext* ctx);
undefined getPointPosFromEvent(RecompContext* ctx);
undefined getRootPointIdxForGroupID(RecompContext* ctx);
undefined getRootPointDataByAreaIdx(RecompContext* ctx);
undefined getGoalPointDataByAreaIdx(RecompContext* ctx);
undefined getSubPointDataByAreaIdx(RecompContext* ctx);
undefined getChildGoalPointIdxArrayByAreaIdx(RecompContext* ctx);
undefined getChildSubPointIdxArrayByAreaIdx(RecompContext* ctx);
undefined getColiGroupByUserPathWork(RecompContext* ctx);
undefined Undefined_Gap_0xFA130_0xFB170(RecompContext* ctx);
undefined updateUserPathWorkEx(RecompContext* ctx);
undefined Undefined_Gap_0xFB8F0_0xFBA80(RecompContext* ctx);
undefined createUserPathWorkEx(RecompContext* ctx);
undefined deleteUserPathWorkEx(RecompContext* ctx);
undefined setUserPathExMode(RecompContext* ctx);
undefined setUserPathGroupID(RecompContext* ctx);
undefined getUserPathExMode(RecompContext* ctx);
undefined getPathExFinish(RecompContext* ctx);
undefined getPPointPasasgeNum(RecompContext* ctx);
undefined setGPSelectMode(RecompContext* ctx);
undefined setForceInitPathEx(RecompContext* ctx);
undefined setGpReferencePathEx(RecompContext* ctx);
undefined changedGPIndex(RecompContext* ctx);
undefined changedAPIndex(RecompContext* ctx);
undefined changedDPGroupID(RecompContext* ctx);
undefined setGpCalcDist(RecompContext* ctx);
undefined getConnectPPointIdx(RecompContext* ctx);
undefined Undefined_Gap_0xFBDBC_0xFC588(RecompContext* ctx);
undefined _sendProgramRotInput(RecompContext* ctx);
undefined calcAttainPosForAttainRange(RecompContext* ctx);
undefined calcAttainRangeData(RecompContext* ctx);
undefined Undefined_Gap_0xFD020_0xFD408(RecompContext* ctx);
undefined chkCurveCollision(RecompContext* ctx);
undefined chkEstimatCollisionCore(RecompContext* ctx);
undefined _setExecBaseMoveWork(RecompContext* ctx);
undefined _setStopCtrlModeBaseMoveWork(RecompContext* ctx);
undefined _getStopCtrlModeBaseMoveWork(RecompContext* ctx);
undefined _setBackVolumeBaseMoveWork(RecompContext* ctx);
undefined _setSlideVolumeBaseMoveWork(RecompContext* ctx);
undefined _resetBaseMoveWork(RecompContext* ctx);
undefined _sendStopKeyMoveWork(RecompContext* ctx);
undefined _compPassagePos(RecompContext* ctx);
undefined _getExecBaseMoveWork(RecompContext* ctx);
undefined _setAttainFlagBaseMoveWork(RecompContext* ctx);
undefined _initBaseMoveTmpWork(RecompContext* ctx);
undefined analyzeMotionPropertyFromKey2(RecompContext* ctx);
undefined estimateAttainPos2(RecompContext* ctx);
undefined calcTurnTime2(RecompContext* ctx);
undefined calcMoveTurnAngle2(RecompContext* ctx);
undefined calcProgRotRatioForMove2(RecompContext* ctx);
undefined adjustCurveAngleForCollision(RecompContext* ctx);
undefined calcDownSpeedRatio(RecompContext* ctx);
undefined getHitPosWayCollision(RecompContext* ctx);
undefined moveCtrlClipCollisionDirect(RecompContext* ctx);
undefined _initMovePathWork(RecompContext* ctx);
undefined moveCtrlWallJudgeFunc(RecompContext* ctx);
undefined Undefined_Gap_0xFE5DC_0xFE608(RecompContext* ctx);
undefined createBirdCtrlWork(RecompContext* ctx);
undefined updateBirdCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0xFFB48_0x1005D8(RecompContext* ctx);
undefined getCalcAttackPassagePoint2(RecompContext* ctx);
undefined Undefined_Gap_0x100A10_0x1036E8(RecompContext* ctx);
undefined deleteBirdCtrlWork(RecompContext* ctx);
undefined getLandMotionOffset(RecompContext* ctx);
undefined setParamBirdCtrlWork(RecompContext* ctx);
undefined setRouteAttackBirdCtrlWork(RecompContext* ctx);
undefined resetRouteAttackBirdCtrlWork(RecompContext* ctx);
undefined setFlapWingBirdCtrlWork(RecompContext* ctx);
undefined setHoveringBirdCtrlWork(RecompContext* ctx);
undefined setHoverAttackBirdCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x103788_0x1038E0(RecompContext* ctx);
undefined createFastLegCtrlWork(RecompContext* ctx);
undefined updateFastLegCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x104EE8_0x106DF8(RecompContext* ctx);
undefined sendStopKeyFastLegCtrlWork(RecompContext* ctx);
undefined deleteFastLegCtrlWork(RecompContext* ctx);
undefined setDashFastLegCtrlWork(RecompContext* ctx);
undefined setFinalAttainWalkFastLegCtrlWork(RecompContext* ctx);
undefined setAllowMaxSpeedFastLegCtrlWork(RecompContext* ctx);
undefined setBackFastLegCtrlWork(RecompContext* ctx);
undefined setNotFastTurnFastLegCtrlWork(RecompContext* ctx);
undefined setRunStopTurnFastLegCtrlWork(RecompContext* ctx);
undefined setWalkStopTurnFastLegCtrlWork(RecompContext* ctx);
undefined setCurveCollisionFastLegCtrlWork(RecompContext* ctx);
undefined getChkColWidth(RecompContext* ctx);
undefined setRunStopTurnAngleFastLegCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x1070F8_0x107520(RecompContext* ctx);
undefined updateGazeCtrlWork(RecompContext* ctx);
undefined initGazeCtrlWork(RecompContext* ctx);
undefined deleteGazeCtrlWork(RecompContext* ctx);
undefined setExecGazeCtrlWork(RecompContext* ctx);
undefined setViewJudgeGazeCtrlWork(RecompContext* ctx);
undefined setNextDistGazeCtrlWork(RecompContext* ctx);
undefined setValidPosGazeCtrlWork(RecompContext* ctx);
undefined setPosGazeCtrlWork(RecompContext* ctx);
undefined setObjGazeCtrlWork(RecompContext* ctx);
undefined setBirdModeGazeCtrlWork(RecompContext* ctx);
undefined setGazeCoffGazeCtrlWork(RecompContext* ctx);
undefined initGazeTool(RecompContext* ctx);
undefined drawGazeTool(RecompContext* ctx);
undefined chkGazeTool(RecompContext* ctx);
undefined getGazeToolPos(RecompContext* ctx);
undefined Undefined_Gap_0x107C24_0x107CE0(RecompContext* ctx);
undefined createHorseCtrlWork(RecompContext* ctx);
undefined updateHorseCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x108FEC_0x10A660(RecompContext* ctx);
undefined deleteHorseCtrlWork(RecompContext* ctx);
undefined setDashHorseCtrlWork(RecompContext* ctx);
undefined setWallStopHorseCtrlWork(RecompContext* ctx);
undefined setLimitModeHorseCtrlWork(RecompContext* ctx);
undefined setFinalAttainWalkHorseCtrlWork(RecompContext* ctx);
undefined setAllowMaxSpeedHorseCtrlWork(RecompContext* ctx);
undefined setFreezeHorseCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x10A6B0_0x10A9B8(RecompContext* ctx);
undefined updateHumanCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x10ADD0_0x10B520(RecompContext* ctx);
undefined createHumanCtrlWork(RecompContext* ctx);
undefined deleteHumanCtrlWork(RecompContext* ctx);
undefined setDashHumanCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x10B648_0x10B6E0(RecompContext* ctx);
undefined getAttainInversePos(RecompContext* ctx);
undefined calcMoveQuaternion(RecompContext* ctx);
undefined calcNextMotRatio(RecompContext* ctx);
undefined calcAttainPosForDirExec(RecompContext* ctx);
undefined calcMoveAngle(RecompContext* ctx);
undefined calcAngleTime(RecompContext* ctx);
undefined calcProgRotRatio(RecompContext* ctx);
undefined chkMoveAngle(RecompContext* ctx);
undefined chkMoveAngle2(RecompContext* ctx);
undefined analyzeMotionProperty(RecompContext* ctx);
undefined analyzeMotionPropertyXZ(RecompContext* ctx);
undefined analyzeMotionProperty2(RecompContext* ctx);
undefined analyzeMotionProperty2XZ(RecompContext* ctx);
undefined chkLeftPointForLineXZ(RecompContext* ctx);
undefined chkUpPointForLineYZ(RecompContext* ctx);
undefined adjustAngleForLimit(RecompContext* ctx);
undefined getTurnAndPitchFromDir(RecompContext* ctx);
undefined getTurnAndPitchFromQuaternion(RecompContext* ctx);
undefined getBankAndPitchFromDir(RecompContext* ctx);
undefined adjustQuaternionYXZForLimit(RecompContext* ctx);
undefined adjustQuaternionZXYForLimit(RecompContext* ctx);
undefined adjustQuaternionYXZForLimit2(RecompContext* ctx);
undefined adjustAnglePI(RecompContext* ctx);
undefined GetAdjustQuaternion(RecompContext* ctx);
undefined GetScaleQuaternion(RecompContext* ctx);
undefined getValueInterp(RecompContext* ctx);
undefined createSlowLegCtrlWork(RecompContext* ctx);
undefined updateSlowLegCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x10DF54_0x10F9A8(RecompContext* ctx);
undefined setDashSlowLegCtrlWork(RecompContext* ctx);
undefined setStabilizeYSlowLegCtrlWork(RecompContext* ctx);
undefined setMoveModeSlowLegCtrlWork(RecompContext* ctx);
undefined setMotScaleMaxSlowLegCtrlWork(RecompContext* ctx);
undefined setAttainMotScaleSlowLegCtrlWork(RecompContext* ctx);
undefined setGuardModeSlowLegCtrlWork(RecompContext* ctx);
undefined deleteSlowLegCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x10F9E0_0x10FC28(RecompContext* ctx);
undefined createWormCtrlWork(RecompContext* ctx);
undefined updateWormCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x110698_0x112DF0(RecompContext* ctx);
undefined deleteWormCtrlWork(RecompContext* ctx);
undefined setAttainSpeedWormCtrlWork(RecompContext* ctx);
undefined setAttackParamWormCtrlWork(RecompContext* ctx);
undefined setOffsetParamWormCtrlWork(RecompContext* ctx);
undefined setRotParamWormCtrlWork(RecompContext* ctx);
undefined setChkKeepHitWormCtrlWork(RecompContext* ctx);
undefined setRotColCheckWormCtrlWork(RecompContext* ctx);
undefined setMiddleTargetWormCtrlWork(RecompContext* ctx);
undefined setObstacleWormCtrlWork(RecompContext* ctx);
undefined setSelfEvasionUpWormCtrlWork(RecompContext* ctx);
undefined setTypeWormCtrlWork(RecompContext* ctx);
undefined setFallGravCoffWormCtrlWork(RecompContext* ctx);
undefined setMaxFallSpeedWormCtrlWork(RecompContext* ctx);
undefined setGroundFrictionCoffWormCtrlWork(RecompContext* ctx);
undefined setUnderFrictionCoffWormCtrlWork(RecompContext* ctx);
undefined setWorldPitchLimitWormCtrlWork(RecompContext* ctx);
undefined resetVelocityWormCtrlWork(RecompContext* ctx);
undefined setAcceleParamWormCtrlWork(RecompContext* ctx);
undefined setColOffsetJudgeFunc(RecompContext* ctx);
undefined getBuryingWormCtrlWork(RecompContext* ctx);
undefined Undefined_Gap_0x112F90_0x1131B8(RecompContext* ctx);
undefined createAngryWork(RecompContext* ctx);
undefined updateAngryWork(RecompContext* ctx);
undefined SCRConditionOverAngryValue(RecompContext* ctx);
undefined SCRConditionLessAngryValue(RecompContext* ctx);
undefined updateArrowThrustWork(RecompContext* ctx);
undefined createArrowThrustWork(RecompContext* ctx);
undefined updateAttackWork(RecompContext* ctx);
undefined updateAttackWork2(RecompContext* ctx);
undefined Undefined_Gap_0x114134_0x1145A8(RecompContext* ctx);
undefined createAttackWork(RecompContext* ctx);
undefined resetAttackWork(RecompContext* ctx);
undefined setAttackHeadDataFormNewMode(RecompContext* ctx);
undefined setAttackHeadDataFormNowMode(RecompContext* ctx);
undefined Undefined_Gap_0x114874_0x114CE8(RecompContext* ctx);
undefined SCRFuncProgramRotInputForGP(RecompContext* ctx);
undefined SCRFuncCheckBoneColAndSendDamage(RecompContext* ctx);
undefined SCRFuncDamageSendFunc(RecompContext* ctx);
undefined SCRFuncSetNextRouteMaxAngle(RecompContext* ctx);
undefined SCRFuncLineCut(RecompContext* ctx);
undefined SCRFuncLineConnect(RecompContext* ctx);
undefined SCRFuncLineSetRoute(RecompContext* ctx);
undefined SCRFuncLineUnsetRoute(RecompContext* ctx);
undefined SCRFuncLineSetForcePrio(RecompContext* ctx);
undefined SCRFuncLineAllReset(RecompContext* ctx);
undefined SCRFuncSetDPGroupID(RecompContext* ctx);
undefined SCRFuncSetAttainPlayer(RecompContext* ctx);
undefined SCRFuncSetAttainNowPlayerPos(RecompContext* ctx);
undefined SCRFuncSetAttainLostPlayerPos(RecompContext* ctx);
undefined SCRFuncSetAttainLostPlayerPosGlobalY(RecompContext* ctx);
undefined SCRFuncSetAttainMyselfPosAndGlobalY(RecompContext* ctx);
undefined SCRFuncSetAttainPlayerPosAndGlobalY(RecompContext* ctx);
undefined SCRFuncSetAttainPlayerGroundPos(RecompContext* ctx);
undefined SCRFuncSetAttainMyselfFrontPos(RecompContext* ctx);
undefined SCRFuncUpdatePathSystem(RecompContext* ctx);
undefined SCRFuncSetAttainPointPosForLanding(RecompContext* ctx);
undefined SCRFuncSetAttainNearPlayerPoint(RecompContext* ctx);
undefined SCRFuncSetAttainNearMyselfPoint(RecompContext* ctx);
undefined SCRFuncResetPathSystem(RecompContext* ctx);
undefined SCRFuncRegressFromPlayer(RecompContext* ctx);
undefined SCRFuncAttackCancelForTwoBoneRay(RecompContext* ctx);
undefined SCRFuncAttackCancelForOneBoneRay(RecompContext* ctx);
undefined SCRFuncResetVolumeTime0(RecompContext* ctx);
undefined SCRFuncVolumeTime0Main(RecompContext* ctx);
undefined SCRFuncConditionSendKey(RecompContext* ctx);
undefined SCRFuncSendKeyToGameObj(RecompContext* ctx);
undefined SCRFuncSetDispFlagGameObj(RecompContext* ctx);
undefined SCRFuncOutsideSendKeyToGameObj(RecompContext* ctx);
undefined SCRFuncResetKeyToGameObj(RecompContext* ctx);
undefined SCRFuncConditionExecFunc(RecompContext* ctx);
undefined SCRFuncSubFunc(RecompContext* ctx);
undefined SCRFuncSetGpCalcDist(RecompContext* ctx);
undefined SCRFuncInputRotateMotionKey(RecompContext* ctx);
undefined SCRFuncInputRotateMotionKeyToNextPoint(RecompContext* ctx);
undefined SCRFuncStartStageLayoutLWS(RecompContext* ctx);
undefined SCRFuncStartGameObjectLWS(RecompContext* ctx);
undefined SCRFuncStartGameObjectLWSCheckStatus(RecompContext* ctx);
undefined SCRFuncStartEventDemo(RecompContext* ctx);
undefined SCRFuncStartEventDemoGameModeCheck(RecompContext* ctx);
undefined SCRFuncBootBoss(RecompContext* ctx);
undefined SCRFuncSetGameFlagByGameObj(RecompContext* ctx);
undefined SCRFuncSetGameFlag(RecompContext* ctx);
undefined SCRFuncClsGameFlag(RecompContext* ctx);
undefined SCRFuncSetMyselfMotionSpeedRatio(RecompContext* ctx);
undefined SCRFuncSetAttakIKPosForMotionCheck(RecompContext* ctx);
undefined SCRFuncParentRelateInit(RecompContext* ctx);
undefined SCRFuncParentRelateMain(RecompContext* ctx);
undefined SCRFuncSetGeoAndSendKey(RecompContext* ctx);
undefined SCRFuncCheckColAndSendKey(RecompContext* ctx);
undefined SCRFuncSetAttainForPreParallelTrans(RecompContext* ctx);
undefined SCRFuncSetAttainForParallelTrans(RecompContext* ctx);
undefined SCRFuncSetAttainHitPosByWayCollision(RecompContext* ctx);
undefined SCRFuncSetAttainPointPosForEventID(RecompContext* ctx);
undefined SCRFuncSetAngryValue(RecompContext* ctx);
undefined SCRFuncAddAngryValue(RecompContext* ctx);
undefined SCRFuncSetOrientCheckWork(RecompContext* ctx);
undefined SCRFuncSetAutoBossGazePos(RecompContext* ctx);
undefined SCRFuncForceSetPerceptionWork(RecompContext* ctx);
undefined SCRFuncForceRenewLastPos(RecompContext* ctx);
undefined SCRFuncResetWormCtrlParam(RecompContext* ctx);
undefined SCRFuncSetRotColCheckWormCtrlParam(RecompContext* ctx);
undefined SCRFuncSetMiddleTargetWormCtrlParam(RecompContext* ctx);
undefined SCRFuncSetAcceleParamWormCtrlParam(RecompContext* ctx);
undefined SCRFuncResetAcceleParamWormCtrlParam(RecompContext* ctx);
undefined SCRFuncSetSearchRadius(RecompContext* ctx);
undefined SCRFuncResetSearchRadius(RecompContext* ctx);
undefined SCRFuncSetSpeedByHorseForWormCtrl(RecompContext* ctx);
undefined SCRFuncSetObstacleWormCtrl(RecompContext* ctx);
undefined SCRFuncSetWorkIKAttainVector(RecompContext* ctx);
undefined SCRFuncSetDistByHorseForWormCtrl(RecompContext* ctx);
undefined SCRFuncSetAttainPosForEscapeToPlayer(RecompContext* ctx);
undefined SCRFuncSegmentLoadRequestByMyself(RecompContext* ctx);
undefined SCRFuncSegmentUnloadRequest(RecompContext* ctx);
undefined SCRFuncSegmentLoadWait(RecompContext* ctx);
undefined SCRFuncSetPerceptionParam(RecompContext* ctx);
undefined SCRFuncChangeSegmentVariation(RecompContext* ctx);
undefined SCRFuncSetGripDamage(RecompContext* ctx);
undefined SCRFuncSetPassageRangeData(RecompContext* ctx);
undefined setConditionBoss(RecompContext* ctx);
undefined setConditionHorse(RecompContext* ctx);
undefined SCRFuncSetGameWork(RecompContext* ctx);
undefined SCRFuncSetAttainRange(RecompContext* ctx);
undefined SCRFuncChangedColDamageOn(RecompContext* ctx);
undefined SCRFuncChangedColDamageOff(RecompContext* ctx);
undefined SCRFuncSetPlayerAttainDir(RecompContext* ctx);
undefined SCRFuncSetCreateTempAttain(RecompContext* ctx);
undefined Undefined_Gap_0x1192FC_0x119388(RecompContext* ctx);
undefined initScriptDataSystem(RecompContext* ctx);
undefined updateScriptDataSystem(RecompContext* ctx);
undefined setSCRGazeStatus(RecompContext* ctx);
undefined getDPGroupID(RecompContext* ctx);
undefined execCondition(RecompContext* ctx);
undefined Undefined_Gap_0x11BDC0_0x11BFC0(RecompContext* ctx);
undefined checkDeadMotionLoadByScriptDataSystem(RecompContext* ctx);
undefined getSCRDataCtrlWork(RecompContext* ctx);
undefined execSCRBaseFunc(RecompContext* ctx);
undefined setSCRAttainRange(RecompContext* ctx);
undefined loadRequestMotList(RecompContext* ctx);
undefined finishLoadMotList(RecompContext* ctx);
undefined setConditionResultBoss(RecompContext* ctx);
undefined setConditionResultHorse(RecompContext* ctx);
undefined SCRConditionResultBoss(RecompContext* ctx);
undefined SCRConditionResultHorse(RecompContext* ctx);
undefined SCRConditionTrue(RecompContext* ctx);
undefined SCRConditionSubFunc(RecompContext* ctx);
undefined SCRConditionAttacked(RecompContext* ctx);
undefined SCRConditionDamagedType(RecompContext* ctx);
undefined SCRConditionDamagedWeaponType(RecompContext* ctx);
undefined SCRConditionDamagedColType(RecompContext* ctx);
undefined SCRConditionDamagedPosRight(RecompContext* ctx);
undefined SCRConditionLastPassagePointEventID(RecompContext* ctx);
undefined SCRConditionNextPointEventID(RecompContext* ctx);
undefined SCRConditionNowPassagePointEventID(RecompContext* ctx);
undefined SCRConditionNowPassagePointEventIDRange(RecompContext* ctx);
undefined SCRConditionCheckWayOrientAttainPlayer(RecompContext* ctx);
undefined SCRConditionCheckAngleToNextPoint(RecompContext* ctx);
undefined SCRConditionPlayerParentColAttr(RecompContext* ctx);
undefined SCRConditionPlayerParentRangeColAttr(RecompContext* ctx);
undefined SCRConditionPlayerParentColAttrAndEquipmentCheck(RecompContext* ctx);
undefined SCRConditionPlayerParentRangeColAttrAndEquipmentCheck(RecompContext* ctx);
undefined SCRConditionPlayerRidingHorse(RecompContext* ctx);
undefined SCRConditionPlayerWaterIn(RecompContext* ctx);
undefined SCRConditionDamagedPlayer(RecompContext* ctx);
undefined SCRConditionPlayerDamagedType(RecompContext* ctx);
undefined SCRConditionMyselfParentColAttr(RecompContext* ctx);
undefined SCRConditionGameObjParentColAttr(RecompContext* ctx);
undefined SCRConditionHorseParentColAttr(RecompContext* ctx);
undefined SCRConditionMyselfMotionCheck(RecompContext* ctx);
undefined SCRConditionMyselfMotionShiftCheck(RecompContext* ctx);
undefined SCRConditionMyselfLastMotionShiftCheck(RecompContext* ctx);
undefined SCRConditionMyselfAddMotionCheck(RecompContext* ctx);
undefined SCRConditionMyselfControlModeCheck(RecompContext* ctx);
undefined SCRConditionPlayerMotionCheck(RecompContext* ctx);
undefined SCRConditionPlayerMotionShiftCheck(RecompContext* ctx);
undefined SCRConditionPlayerLastMotionShiftCheck(RecompContext* ctx);
undefined SCRConditionPlayerControlModeCheck(RecompContext* ctx);
undefined SCRConditionMyselfOverGlobalY(RecompContext* ctx);
undefined SCRConditionMyselfLessGlobalY(RecompContext* ctx);
undefined SCRConditionPlayerLessGlobalY(RecompContext* ctx);
undefined SCRConditionMyselfKeepHit(RecompContext* ctx);
undefined SCRConditionPlayerTorch(RecompContext* ctx);
undefined SCRConditionAPFinish(RecompContext* ctx);
undefined SCRConditionGPFinish(RecompContext* ctx);
undefined SCRConditionPPFinish(RecompContext* ctx);
undefined SCRConditionPPPassageNum(RecompContext* ctx);
undefined SCRConditionGPChanged(RecompContext* ctx);
undefined SCRConditionAPChanged(RecompContext* ctx);
undefined SCRConditionDPGroupIDChanged(RecompContext* ctx);
undefined SCRConditionGPOrDPGroupIDChanged(RecompContext* ctx);
undefined SCRConditionWayFinish(RecompContext* ctx);
undefined SCRConditionPathStatus(RecompContext* ctx);
undefined SCRConditionPathPassageNum(RecompContext* ctx);
undefined SCRConditionPathPassageNumOver(RecompContext* ctx);
undefined SCRConditionPlayerInSight(RecompContext* ctx);
undefined SCRConditionPlayerInLost(RecompContext* ctx);
undefined SCRConditionInstantaneousPlayerInSight(RecompContext* ctx);
undefined SCRConditionOverDistanceToPlayerWorldXZ(RecompContext* ctx);
undefined SCRConditionLessDistanceToPlayerWorldXZ(RecompContext* ctx);
undefined SCRConditionOverDistanceToPlayerWorld(RecompContext* ctx);
undefined SCRConditionLessDistanceToPlayerWorld(RecompContext* ctx);
undefined SCRConditionAnglePlayerWorldXZ(RecompContext* ctx);
undefined SCRConditionRootAnglePlayerWorldXZ(RecompContext* ctx);
undefined SCRConditionLessDistanceToBossWorldXZ(RecompContext* ctx);
undefined SCRConditionOverDistanceToBossWorldXZ(RecompContext* ctx);
undefined SCRConditionModeLapsedTime(RecompContext* ctx);
undefined SCRConditionOrientLapsedTime(RecompContext* ctx);
undefined SCRConditionVolumeTime0(RecompContext* ctx);
undefined SCRConditionVolumeCheckForPlayerPos(RecompContext* ctx);
undefined SCRConditionVolumeCheckForPointPos(RecompContext* ctx);
undefined SCRFuncVolumeCheckByGameObj(RecompContext* ctx);
undefined SCRFuncVolumeCheckByGameObjForSelfPos(RecompContext* ctx);
undefined SCRConditionHorseMotionCheck(RecompContext* ctx);
undefined SCRConditionMotionCheck(RecompContext* ctx);
undefined SCRConditionGameObjMotionShiftCheck(RecompContext* ctx);
undefined SCRConditionGameObjLastMotionShiftCheck(RecompContext* ctx);
undefined SCRConditionGameObjAddMotionCheck(RecompContext* ctx);
undefined SCRConditionHorseControlModeCheck(RecompContext* ctx);
undefined SCRConditionControlModeCheck(RecompContext* ctx);
undefined SCRConditionGameFlagCheckByGameObj(RecompContext* ctx);
undefined SCRConditionGameFlagCheck(RecompContext* ctx);
undefined SCRConditionAttackPassageTime(RecompContext* ctx);
undefined SCRConditionOverMyselfLife(RecompContext* ctx);
undefined SCRConditionLessMyselfLife(RecompContext* ctx);
undefined SCRConditionOverMyselfPartsLife(RecompContext* ctx);
undefined SCRConditionLessMyselfPartsLife(RecompContext* ctx);
undefined SCRConditionOverMyselfWeakLife(RecompContext* ctx);
undefined SCRConditionLessMyselfWeakLife(RecompContext* ctx);
undefined SCRConditionMyselfPartsDamaged(RecompContext* ctx);
undefined SCRConditionMyselfWeakDamaged(RecompContext* ctx);
undefined SCRConditionExecGazeToPlayer(RecompContext* ctx);
undefined SCRConditionOverPlayerLife(RecompContext* ctx);
undefined SCRConditionLessPlayerLife(RecompContext* ctx);
undefined SCRConditionOverPlayerGrip(RecompContext* ctx);
undefined SCRConditionLessPlayerGrip(RecompContext* ctx);
undefined SCRConditionBossCheck(RecompContext* ctx);
undefined SCRConditionOverRandomVal(RecompContext* ctx);
undefined SCRConditionLessRandomVal(RecompContext* ctx);
undefined SCRConditionLessHorseSpeed(RecompContext* ctx);
undefined SCRConditionCheckGameObjLwsPlayMode(RecompContext* ctx);
undefined SCRConditionOverLengthXZPlayerFromGp(RecompContext* ctx);
undefined SCRConditionLessLengthXZPlayerFromGp(RecompContext* ctx);
undefined SCRConditionSwordFlareHitColAttr(RecompContext* ctx);
undefined SCRConditionUnderWaterByBone(RecompContext* ctx);
undefined SCRConditionUnderWaterByBoneForHorse(RecompContext* ctx);
undefined SCRConditionPPCheck(RecompContext* ctx);
undefined SCRConditionSegmentLoad(RecompContext* ctx);
undefined SCRConditionLWSCameraPlay(RecompContext* ctx);
undefined SCRConditionEyeModeLapsedTime(RecompContext* ctx);
undefined SCRConditionModeStatusByGameObj(RecompContext* ctx);
undefined SCRConditionExistSoundBow(RecompContext* ctx);
undefined SCRConditionModeStatusByMySelf(RecompContext* ctx);
undefined SCRConditionOldModeStatusByMySelf(RecompContext* ctx);
undefined SCRConditionSpecifiedModeByMySelf(RecompContext* ctx);
undefined SCRConditionModeShiftByMySelf(RecompContext* ctx);
undefined SCRConditionInvisibilityCloak(RecompContext* ctx);
undefined SCRConditionGetOmakeFlag(RecompContext* ctx);
undefined SCRConditionChkDisplayOmakeCompleteAlert(RecompContext* ctx);
undefined SCRConditionTargetAttrOfInside(RecompContext* ctx);
undefined SCRConditionCheckGameClearCnt(RecompContext* ctx);
undefined SCRConditionHardMode(RecompContext* ctx);
undefined SCRConditionOverGameWork(RecompContext* ctx);
undefined SCRConditionArrowParentOverNum(RecompContext* ctx);
undefined SCRConditionWeaponHitAttr(RecompContext* ctx);
undefined SCRConditionReturnStartMyself(RecompContext* ctx);
undefined SCRConditionPlayerBossParentOverTime(RecompContext* ctx);
undefined SCRConditionCheckBuryingWormCtrl(RecompContext* ctx);
undefined SCRConditionAttainRange(RecompContext* ctx);
undefined SCRConditionVolumeCheckForBoneByGameObj(RecompContext* ctx);
undefined SCRConditionBossDeathStartMotion(RecompContext* ctx);
undefined SCRConditionBossDeathLoopMotion(RecompContext* ctx);
undefined SCRConditionAtkChackThreeRaySector(RecompContext* ctx);
undefined SCRConditionAtkChackThreeRayParallel(RecompContext* ctx);
undefined Undefined_Gap_0x120574_0x120FC0(RecompContext* ctx);
undefined createScrDemoManager(RecompContext* ctx);
undefined setScrDemoMangerFinishCallback(RecompContext* ctx);
undefined pauseEventDemoManger(RecompContext* ctx);
undefined eventBgmAllClose(RecompContext* ctx);
undefined createScrEventDemoManager(RecompContext* ctx);
undefined scrDemoInit(RecompContext* ctx);
undefined Undefined_Gap_0x12128C_0x1213A0(RecompContext* ctx);
undefined updateEyeWork(RecompContext* ctx);
undefined createEyeWork(RecompContext* ctx);
undefined updateHintWork(RecompContext* ctx);
undefined createHintWork(RecompContext* ctx);
undefined startHintWork(RecompContext* ctx);
undefined SCRConditionHintPlayFunc(RecompContext* ctx);
undefined SCRConditionHintOverPlayCount(RecompContext* ctx);
undefined SCRConditionHintEqualPlayCount(RecompContext* ctx);
undefined updateInterestWork(RecompContext* ctx);
undefined initInterestWork(RecompContext* ctx);
undefined getInterestExec(RecompContext* ctx);
undefined updatePerceptionWork(RecompContext* ctx);
undefined perceptionExec(RecompContext* ctx);
undefined createPerceptionWork(RecompContext* ctx);
undefined setPerceptionParam(RecompContext* ctx);
undefined perceptionExec2(RecompContext* ctx);
undefined forceSetPerceptionWork(RecompContext* ctx);
undefined forceRenewLastPosPerceptionWork(RecompContext* ctx);
undefined equipmentInvisibilityCloak(RecompContext* ctx);
undefined Undefined_Gap_0x122C80_0x122D58(RecompContext* ctx);
undefined nico_aimIK(RecompContext* ctx);
undefined updateAimIKWork(RecompContext* ctx);
undefined getAimIKWork(RecompContext* ctx);
undefined getSizeAimIKWork(RecompContext* ctx);
undefined initAimIKWork(RecompContext* ctx);
undefined nico_attackIK_waist(RecompContext* ctx);
undefined updateAttackWaistIKWork(RecompContext* ctx);
undefined getSizeAttackIKWork(RecompContext* ctx);
undefined initAttackWaistIKWork(RecompContext* ctx);
undefined nico_attackIK_optBone(RecompContext* ctx);
undefined nico_BeardTop(RecompContext* ctx);
undefined nico_BeardNext(RecompContext* ctx);
undefined nico_BeardLast(RecompContext* ctx);
undefined Undefined_Gap_0x1250EC_0x125278(RecompContext* ctx);
undefined getSizeBeardIKWork(RecompContext* ctx);
undefined initBeardIKWork(RecompContext* ctx);
undefined nico_BeardTest(RecompContext* ctx);
undefined nico_Meet2Main(RecompContext* ctx);
undefined Undefined_Gap_0x125AF4_0x125B30(RecompContext* ctx);
undefined getSizeBuriesIKWork(RecompContext* ctx);
undefined initBuriesIKWork(RecompContext* ctx);
undefined Undefined_Gap_0x125BFC_0x126060(RecompContext* ctx);
undefined nico_gazeHeadIK4(RecompContext* ctx);
undefined setRatioGazeIKWork(RecompContext* ctx);
undefined setGoingAngleGazeIKWork(RecompContext* ctx);
undefined setGazeDirGazeIKWork(RecompContext* ctx);
undefined setSubParamGazeIKWork(RecompContext* ctx);
undefined setGazeModeGazeIKWork(RecompContext* ctx);
undefined setExecRootQuatGazeIKWork(RecompContext* ctx);
undefined setExecGazeIKWork(RecompContext* ctx);
undefined updateGazeIKWork(RecompContext* ctx);
undefined Undefined_Gap_0x127A10_0x127BE8(RecompContext* ctx);
undefined nico_calcTailGenealogicalNodeHead(RecompContext* ctx);
undefined nico_calcTailGenealogicalNodeNext(RecompContext* ctx);
undefined getSizeTailIKWork(RecompContext* ctx);
undefined initTailIKWork(RecompContext* ctx);
undefined nico_calcTailGenealogicalNodeTail(RecompContext* ctx);
undefined ReflectIK_initWormDynamics(RecompContext* ctx);
undefined Undefined_Gap_0x1284D8_0x128AC8(RecompContext* ctx);
undefined initWormIKWork(RecompContext* ctx);
undefined Undefined_Gap_0x128CC4_0x1290B0(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeHeadBase(RecompContext* ctx);
undefined nico_restartWormGenealogicalNodeFromOtherIK(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeNextBase(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeHead(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeTailBase(RecompContext* ctx);
undefined Undefined_Gap_0x129DD4_0x12A580(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeDownHead(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeDownNext(RecompContext* ctx);
undefined getWormIKWork(RecompContext* ctx);
undefined setWormIKBoundDynamics(RecompContext* ctx);
undefined setWormIKNodeLimit(RecompContext* ctx);
undefined setWormIKBankInterpSec(RecompContext* ctx);
undefined setWormIKAttainXVector(RecompContext* ctx);
undefined coliJudgeNotWater(RecompContext* ctx);
undefined nico_restartWormGenealogicalNodeFromDemo(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeNext(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeTail(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeDownTail(RecompContext* ctx);
undefined nico_calcWormGenealogicalNodeDownNextLast(RecompContext* ctx);
undefined getEventScriptClass(RecompContext* ctx);
undefined flushEventScriptObjImmediate(RecompContext* ctx);
undefined flushEventScriptObj(RecompContext* ctx);
undefined initEventScriptObj(RecompContext* ctx);
undefined getEventScriptObjWorkSize(RecompContext* ctx);
undefined createEventScriptObj(RecompContext* ctx);
undefined Undefined_Gap_0x12ADEC_0x12AE20(RecompContext* ctx);
undefined SCRFuncSoundResetPlayerAttrInfo(RecompContext* ctx);
undefined SCRFuncSoundSetDepth(RecompContext* ctx);
undefined SCRFuncActiveDemoStandby(RecompContext* ctx);
undefined SCRFuncActiveDemoCancel(RecompContext* ctx);
undefined SCRFuncActiveDemoStart(RecompContext* ctx);
undefined SCRFuncSoundPlay(RecompContext* ctx);
undefined Undefined_Gap_0x12B028_0x12B050(RecompContext* ctx);
undefined SCRConditionSoundSignal(RecompContext* ctx);
undefined SCRSoundConditionPlayerParentColAttr(RecompContext* ctx);
undefined SCREventConditionPlayerRidingHorse(RecompContext* ctx);
undefined SCREventConditionOverDistanceToPlayerWorldXZ(RecompContext* ctx);
undefined SCREventConditionLessDistanceToPlayerWorldXZ(RecompContext* ctx);
undefined SCREventConditionVolumeCheckByGameObj(RecompContext* ctx);
undefined getSScriptWork(RecompContext* ctx);
undefined initSScriptSystem(RecompContext* ctx);
undefined updateSScriptSystem(RecompContext* ctx);

// ----------- KERNEL -------------

undefined _iosAssert(RecompContext* ctx);
undefined Undefined_Gap_0x2C_0x278(RecompContext* ctx);
undefined iosIopRead(RecompContext* ctx);
undefined iosCdStStart(RecompContext* ctx);
undefined iosCdStStop(RecompContext* ctx);
undefined iosCdStRead(RecompContext* ctx);
undefined iosCdStSkip(RecompContext* ctx);
undefined iosCdStSectorAlignSkip(RecompContext* ctx);
undefined iosCdSetErrorCallback(RecompContext* ctx);
undefined iosCdSetMode(RecompContext* ctx);
undefined iosCdStInit(RecompContext* ctx);
undefined iosCdInit(RecompContext* ctx);
undefined iosInitDebPc(RecompContext* ctx);
undefined iosStopPc(RecompContext* ctx);
undefined iosDebPcVsyncCounterCheck(RecompContext* ctx);
undefined iosGetCnt0Pc(RecompContext* ctx);
undefined iosGetCnt1Pc(RecompContext* ctx);
undefined InitDebPc(RecompContext* ctx);
undefined iosWaitIdleThread(RecompContext* ctx);
undefined iosCreateIdleThread(RecompContext* ctx);
undefined iosGetClock(RecompContext* ctx);
undefined iosGetClockSecond(RecompContext* ctx);
undefined Undefined_Gap_0x8D8_0x968(RecompContext* ctx);
undefined iosInit(RecompContext* ctx);
undefined iosAddIntcHandler(RecompContext* ctx);
undefined iosCreateSema(RecompContext* ctx);
undefined iosDeleteSema(RecompContext* ctx);
undefined iosInitIntrSystem(RecompContext* ctx);
undefined iosGetTCount(RecompContext* ctx);
undefined iosGetTCountExtension(RecompContext* ctx);
undefined iosGetSecondFromTCount(RecompContext* ctx);
undefined iosResetCpuRapCounter(RecompContext* ctx);
undefined iosGetCpuRapCountPar1Int(RecompContext* ctx);
undefined iosDI(RecompContext* ctx);
undefined iosEI(RecompContext* ctx);
undefined iosLoaderResetEntry(RecompContext* ctx);
undefined Undefined_Gap_0xEB8_0xF40(RecompContext* ctx);
undefined iosEE2IopRequest(RecompContext* ctx);
undefined iosEE2IopEndChk(RecompContext* ctx);
undefined iosCreateIopMgr(RecompContext* ctx);
undefined Undefined_Gap_0xFC0_0x34D8(RecompContext* ctx);
undefined iosWaitMalloc(RecompContext* ctx);
undefined iosSignalMalloc(RecompContext* ctx);
undefined iosMallocGarbageTickProc(RecompContext* ctx);
undefined iosMallocAlign(RecompContext* ctx);
undefined iosMallocAlignNoCheck(RecompContext* ctx);
undefined iosMallocInGarbagePtn(RecompContext* ctx);
undefined iosMallocSetExecGarbageCallback(RecompContext* ctx);
undefined iosReallocAlign(RecompContext* ctx);
undefined iosFree(RecompContext* ctx);
undefined iosFreeParts(RecompContext* ctx);
undefined iosCreatePartition(RecompContext* ctx);
undefined iosCreatePartitionWithPc(RecompContext* ctx);
undefined iosInitMallocSystem(RecompContext* ctx);
undefined iosGetMallocPtn(RecompContext* ctx);
undefined iosGetMallocRootPtnRemainSize(RecompContext* ctx);
undefined iosFollowAllLink(RecompContext* ctx);
undefined iosDebugPartitionDump(RecompContext* ctx);
undefined iosDebugPartitionFileDump(RecompContext* ctx);
undefined Undefined_Gap_0x3CF0_0x3D10(RecompContext* ctx);
undefined addMemoryDebugCallback(RecompContext* ctx);
undefined getMemorySafetyLockFlag(RecompContext* ctx);
undefined Undefined_Gap_0x3D2C_0x3D60(RecompContext* ctx);
undefined iosMcInit(RecompContext* ctx);
undefined iosMcGetInfo(RecompContext* ctx);
undefined iosMcChDir(RecompContext* ctx);
undefined iosMcMkDir(RecompContext* ctx);
undefined iosMcCreateFile(RecompContext* ctx);
undefined iosMcDeleteFile(RecompContext* ctx);
undefined iosMcReadFile(RecompContext* ctx);
undefined iosMcWriteFile(RecompContext* ctx);
undefined iosMcFormat(RecompContext* ctx);
undefined iosMcUnformat(RecompContext* ctx);
undefined iosMcGetDir(RecompContext* ctx);
undefined Undefined_Gap_0x4588_0x4628(RecompContext* ctx);
undefined iosSendMsg(RecompContext* ctx);
undefined iosRecvMsg(RecompContext* ctx);
undefined iosInitMessageSystem(RecompContext* ctx);
undefined iosCreateMsgQueue(RecompContext* ctx);
undefined Undefined_Gap_0x498C_0x4C80(RecompContext* ctx);
undefined iosNetRecvMsg(RecompContext* ctx);
undefined InitNet(RecompContext* ctx);
undefined iosNetRecv(RecompContext* ctx);
undefined iosNetSend(RecompContext* ctx);
undefined iosNetRecvMsgWithStateCallback(RecompContext* ctx);
undefined iosNetClose(RecompContext* ctx);
undefined iosNetOpen(RecompContext* ctx);
undefined iosPadTickProc(RecompContext* ctx);
undefined iosPadGetXZInputL(RecompContext* ctx);
undefined iosPadGetXZInputLwithThreshold(RecompContext* ctx);
undefined iosPadGetXZInputLwithThresholdIndepAxis(RecompContext* ctx);
undefined iosPadGetXZInputR(RecompContext* ctx);
undefined iosPadEntryTickFunc(RecompContext* ctx);
undefined iosPadRead(RecompContext* ctx);
undefined iosPadChkConnect(RecompContext* ctx);
undefined iosPadInit(RecompContext* ctx);
undefined iosSPrintf(RecompContext* ctx);
undefined iosUsbSerialPrintf(RecompContext* ctx);
undefined iosCreatePrintMgr(RecompContext* ctx);
undefined iosGetPrintfMode(RecompContext* ctx);
undefined iosSrpWaitDMA(RecompContext* ctx);
undefined iosMemToSprDmaAdrCopy(RecompContext* ctx);
undefined iosSprToMemDmaAdrCopy(RecompContext* ctx);
undefined iosCreateThread(RecompContext* ctx);
undefined Undefined_Gap_0x6304_0x6470(RecompContext* ctx);
undefined iosInitThreadSystem(RecompContext* ctx);
undefined iosGetThread(RecompContext* ctx);
undefined iosCreateThreadS(RecompContext* ctx);
undefined iosStartThread(RecompContext* ctx);
undefined iosSleepThread(RecompContext* ctx);
undefined iosWakeupThread(RecompContext* ctx);
undefined iosiWakeupThread(RecompContext* ctx);
undefined iosChangeThreadPriority(RecompContext* ctx);
undefined iosGetThreadPriority(RecompContext* ctx);
undefined iosDeleteThread(RecompContext* ctx);
undefined iosCallBackThreadMgr(RecompContext* ctx);
undefined ioskernel(RecompContext* ctx);
undefined iosJumpRecoverPoint(RecompContext* ctx);
undefined iosResetKernel(RecompContext* ctx);
undefined Undefined_Gap_0x6B04_0x6B58(RecompContext* ctx);
undefined endSCEDemo(RecompContext* ctx);
undefined Undefined_Gap_0x6B60_0x7280(RecompContext* ctx);
undefined Init_ShockVoiceSet(RecompContext* ctx);
undefined Init_Shock(RecompContext* ctx);
undefined Shock_SetShockVoiceSet(RecompContext* ctx);
undefined Init_Player(RecompContext* ctx);
undefined Init_Controler(RecompContext* ctx);
undefined Shock_Request(RecompContext* ctx);
undefined Shock_Decode(RecompContext* ctx);
undefined Shock_SetMotor(RecompContext* ctx);
undefined Undefined_Gap_0x772C_0x8288(RecompContext* ctx);
undefined isysMoveModuleObj(RecompContext* ctx);
undefined isysCreateModuleObjExisted(RecompContext* ctx);
undefined isysResolveAllModuleObjHasUndefSymbol(RecompContext* ctx);
undefined Undefined_Gap_0x8734_0x8E60(RecompContext* ctx);
undefined isysLaunchModule(RecompContext* ctx);
undefined IosCdvdManagerSimulation(RecompContext* ctx);
undefined isysGetXffEntryPointPreRelocation(RecompContext* ctx);
undefined InitDld(RecompContext* ctx);
undefined IosLoadIrxSimulation(RecompContext* ctx);
undefined IosGetMergeDataFileName(RecompContext* ctx);
undefined isysSearchSymbol(RecompContext* ctx);
undefined isysSearchModuleFuncNameByAddr(RecompContext* ctx);
undefined isysDumpExecutableModules(RecompContext* ctx);
undefined isysSearchModuleSymbolByGroup(RecompContext* ctx);
undefined isysRemoveModuleObjGroup(RecompContext* ctx);
undefined isysResolveOneModuleObj(RecompContext* ctx);
undefined isysResolveAllProgramModule(RecompContext* ctx);
undefined isysLaunchExecModule(RecompContext* ctx);
undefined isysInitModuleObjExisted(RecompContext* ctx);
undefined isysFlushModuleObj(RecompContext* ctx);
undefined GetSymbolByIndex(RecompContext* ctx);
undefined isysRelocateModuleObj(RecompContext* ctx);
undefined isysGetXffWorkSize(RecompContext* ctx);
undefined isysGetModuleObjMallocSize(RecompContext* ctx);
undefined isysDisposeModuleObjRelocationElement(RecompContext* ctx);
undefined GetExecModuleSize(RecompContext* ctx);
undefined getModuleSize(RecompContext* ctx);
undefined Undefined_Gap_0xA03C_0xA090(RecompContext* ctx);
undefined isysGetUndefModuleObjNum(RecompContext* ctx);
undefined isysGetSymdefModuleObjNum(RecompContext* ctx);
undefined Undefined_Gap_0xA170_0xA508(RecompContext* ctx);
undefined isysResolveAllModuleObjOfGroup(RecompContext* ctx);
undefined readEModule(RecompContext* ctx);
undefined isysWriteLinkerScriptFile(RecompContext* ctx);
undefined Undefined_Gap_0xA70C_0xA728(RecompContext* ctx);
undefined loadtest(RecompContext* ctx);
undefined iosLoaderGetFileSizeName(RecompContext* ctx);
undefined iosFileRead(RecompContext* ctx);
undefined iosLoaderFOpen(RecompContext* ctx);
undefined iosLoaderFClose(RecompContext* ctx);
undefined iosLoaderFRead(RecompContext* ctx);
undefined iosLoaderGetFileSize(RecompContext* ctx);
undefined initDldSys(RecompContext* ctx);
undefined Undefined_Gap_0xABF4_0xB0A8(RecompContext* ctx);
undefined DldExceptionByOriginAdr(RecompContext* ctx);
undefined isysSearchCalledModuleFuncNameByAddr(RecompContext* ctx);
undefined isysCreateExceptionThread(RecompContext* ctx);
undefined Undefined_Gap_0xB1C8_0xB1E0(RecompContext* ctx);
undefined iosCubicBezier(RecompContext* ctx);
undefined iosCubicInterVectorXYZ(RecompContext* ctx);
undefined iosFourthBezier(RecompContext* ctx);
undefined iosCubicBezierVectorXYZ(RecompContext* ctx);
undefined InitMath(RecompContext* ctx);
undefined Undefined_Gap_0xB3FC_0xBC38(RecompContext* ctx);
undefined CompareString16(RecompContext* ctx);
undefined iosInitCurrentMatrix(RecompContext* ctx);
undefined iosUnitCurrentMatrix(RecompContext* ctx);
undefined iosPushCurrentMatrix(RecompContext* ctx);
undefined iosPopCurrentMatrix(RecompContext* ctx);
undefined iosPushVu0RegistersToWork(RecompContext* ctx);
undefined iosPopVu0RegistersFromWork(RecompContext* ctx);
undefined iosTransCurrentMatrix(RecompContext* ctx);
undefined iosSetTransCurrentMatrix(RecompContext* ctx);
undefined iosClearTransCurrentMatrix(RecompContext* ctx);
undefined iosGetRotXVector(RecompContext* ctx);
undefined iosGetRotYVector(RecompContext* ctx);
undefined iosRotCurrentMatrixX(RecompContext* ctx);
undefined iosRotCurrentMatrixY(RecompContext* ctx);
undefined iosRotCurrentMatrixZ(RecompContext* ctx);
undefined iosScaleCurrentMatrix(RecompContext* ctx);
undefined iosGetCurrentMatrix(RecompContext* ctx);
undefined iosGetCurrentMatrixTrans(RecompContext* ctx);
undefined iosSetCurrentMatrix(RecompContext* ctx);
undefined iosMulCurrentMatrixR(RecompContext* ctx);
undefined iosMulCurrentMatrixL(RecompContext* ctx);
undefined iosApplyCurrentMatrix(RecompContext* ctx);
undefined iosApplyRotCurrentMatrix(RecompContext* ctx);
undefined iosRotTransPersCurrentMatrix(RecompContext* ctx);
undefined iosTransposeCurrentMatrix(RecompContext* ctx);
undefined iosTransposeRotationCurrentMatrix(RecompContext* ctx);
undefined iosInverseCurrentMatrix(RecompContext* ctx);
undefined iosPushVu0Registers(RecompContext* ctx);
undefined iosPopVu0Registers(RecompContext* ctx);
undefined iosInitPushPosVuSema(RecompContext* ctx);
undefined iosCopyMatrix(RecompContext* ctx);
undefined iosApplyRotMatrix(RecompContext* ctx);
undefined iosUnitMatrix(RecompContext* ctx);
undefined iosUnitRotation(RecompContext* ctx);
undefined iosTransposeMatrix(RecompContext* ctx);
undefined iosInverseMatrix(RecompContext* ctx);
undefined iosInverseMatrixPerfect(RecompContext* ctx);
undefined iosScaleMatrixV(RecompContext* ctx);
undefined iosFloatModulo(RecompContext* ctx);
undefined iosSetCameraMatrix(RecompContext* ctx);
undefined iosMakeNormalLightMatrix(RecompContext* ctx);
undefined iosScaleNormalLightMatrix(RecompContext* ctx);
undefined iosMakeLightColorMatrix(RecompContext* ctx);
undefined iosTransMatrix(RecompContext* ctx);
undefined iosTransMatrixF(RecompContext* ctx);
undefined iosScaleMatrix(RecompContext* ctx);
undefined iosMulRotMatrixXInt16(RecompContext* ctx);
undefined iosMulRotMatrixYInt16(RecompContext* ctx);
undefined iosMulRotMatrixZInt16(RecompContext* ctx);
undefined iosRotMatrixX(RecompContext* ctx);
undefined iosRotMatrixY(RecompContext* ctx);
undefined iosRotMatrixZ(RecompContext* ctx);
undefined iosDumpMatrix(RecompContext* ctx);
undefined iosGetScaleMatrixV(RecompContext* ctx);
undefined iosGetYDirXYZFromMatrix(RecompContext* ctx);
undefined iosGetXDirXYZFromMatrix(RecompContext* ctx);
undefined iosFmodf(RecompContext* ctx);
undefined iosRotTransCurrentMatrix(RecompContext* ctx);
undefined iosMvecZero(RecompContext* ctx);
undefined iosMvecAllOnes(RecompContext* ctx);
undefined iosMvecAllOne(RecompContext* ctx);
undefined iosAddMvec(RecompContext* ctx);
undefined iosClampSW_AddMvec(RecompContext* ctx);
undefined iosClampUW_AddMvec(RecompContext* ctx);
undefined iosSubMvec(RecompContext* ctx);
undefined iosMulMvec(RecompContext* ctx);
undefined iosApplyM_Mat(RecompContext* ctx);
undefined iosCalcIcolorToBrightness(RecompContext* ctx);
undefined iosIColScale(RecompContext* ctx);
undefined iosIColAddVec(RecompContext* ctx);
undefined iosSwClip255Mvec(RecompContext* ctx);
undefined iosIColAddVecXYZ(RecompContext* ctx);
undefined iosUcharColClampAdd(RecompContext* ctx);
undefined iosSWToMmColMvec(RecompContext* ctx);
undefined iosMmColToSWMvec(RecompContext* ctx);
undefined iosITOF15ToMmColMvec(RecompContext* ctx);
undefined iosMmColToITOF15Mvec(RecompContext* ctx);
undefined iosFvecToMmColMvec(RecompContext* ctx);
undefined iosMmColToFvecMvec(RecompContext* ctx);
undefined iosSwClipMvec(RecompContext* ctx);
undefined iosFvecToICol(RecompContext* ctx);
undefined iosIColToMvecSl(RecompContext* ctx);
undefined iosIColToFvec(RecompContext* ctx);
undefined iosPowf(RecompContext* ctx);
undefined iosFastPowf(RecompContext* ctx);
undefined GetDifferencialQuaternionWithNoRegularize(RecompContext* ctx);
undefined Undefined_Gap_0xDCF8_0xDEE8(RecompContext* ctx);
undefined GetEulerYXZFromQuaternion(RecompContext* ctx);
undefined GetEulerZXYFromQuaternion(RecompContext* ctx);
undefined GetEulerXYZFromQuaternion(RecompContext* ctx);
undefined GetRotLimitationQuaternion(RecompContext* ctx);
undefined GetLimitationQuaternionWithBaseAxis(RecompContext* ctx);
undefined GetCurrentQuaternion(RecompContext* ctx);
undefined GetLastQuaternion(RecompContext* ctx);
undefined MultiCurrentQuaternion(RecompContext* ctx);
undefined MultiCurrentQuaternionL(RecompContext* ctx);
undefined InvertCurrentQuaternion(RecompContext* ctx);
undefined SetCurrentQuaternion(RecompContext* ctx);
undefined RotCurrentQuaternionX(RecompContext* ctx);
undefined RotCurrentQuaternionY(RecompContext* ctx);
undefined RotCurrentQuaternionZ(RecompContext* ctx);
undefined PushQuaternion(RecompContext* ctx);
undefined PushQuaternionWithNoCopy(RecompContext* ctx);
undefined PopQuaternion(RecompContext* ctx);
undefined InitQuaternionDrive(RecompContext* ctx);
undefined SetQuaternionByAxisRotate(RecompContext* ctx);
undefined SetQuaternionByAxisRotateWithNoRegularize(RecompContext* ctx);
undefined SetQuaternionByAxisRotateV(RecompContext* ctx);
undefined SetQuaternionByAxisRotateVExact(RecompContext* ctx);
undefined SetQuaternionByAxisRotateVWithNoRegularize(RecompContext* ctx);
undefined DivQuaternion(RecompContext* ctx);
undefined GetInverseMatrixFromQuaternionPos(RecompContext* ctx);
undefined MultiMatrixByQuaternion(RecompContext* ctx);
undefined GetMirrorQuaternion(RecompContext* ctx);
undefined RotQuaternionXExact(RecompContext* ctx);
undefined RotQuaternionYExact(RecompContext* ctx);
undefined RotQuaternionZExact(RecompContext* ctx);
undefined GetQuaternionFromMatrix(RecompContext* ctx);
undefined CopyMultiQuaternion(RecompContext* ctx);
undefined GetQuaternionByAxisDirZY(RecompContext* ctx);
undefined GetQuaternionByAxisDirZYExact(RecompContext* ctx);
undefined GetQuaternionByAxisDirZX(RecompContext* ctx);
undefined SetQuaternionByCosineAxisRotateVWithNoRegularize(RecompContext* ctx);
undefined SetQuaternionByAxisRotateVWithNoRegularizeRadian(RecompContext* ctx);
undefined GetYRotQuaternionFromDir(RecompContext* ctx);
undefined GetStabYRotQuaternion(RecompContext* ctx);
undefined StabilizeToYRotQuaternion(RecompContext* ctx);
undefined GetQuaternionByEulerYXZ(RecompContext* ctx);
undefined GetQuaternionByEulerYXZExact(RecompContext* ctx);
undefined GetEulerYXZFromQuaternionZHalfPI(RecompContext* ctx);
undefined GetQuaternionByEulerZXY(RecompContext* ctx);
undefined GetQuaternionByEulerZXYExact(RecompContext* ctx);
undefined GetQuaternionByEulerXYZ(RecompContext* ctx);
undefined GetQuaternionByEulerXYZExact(RecompContext* ctx);
undefined GetLimitationQuaternion(RecompContext* ctx);
undefined GetZDirFromQuaternion(RecompContext* ctx);
undefined GetQuaternionByDegEulerYXZ(RecompContext* ctx);
undefined GetQuaternionAxisRotInfo(RecompContext* ctx);
undefined SetQuaternionByCosineAxisRotateV(RecompContext* ctx);
undefined iosGetAlignSinCosf(RecompContext* ctx);
undefined iosGetSinCosf(RecompContext* ctx);
undefined iosGetSinf(RecompContext* ctx);
undefined iosGetCosf(RecompContext* ctx);
undefined iosGetTanf(RecompContext* ctx);
undefined iosGetSinCos(RecompContext* ctx);
undefined iosGetSin(RecompContext* ctx);
undefined iosGetCos(RecompContext* ctx);
undefined iosGetTan(RecompContext* ctx);
undefined iosGetACosf(RecompContext* ctx);
undefined iosGetACos(RecompContext* ctx);
undefined iosGetACosfExact(RecompContext* ctx);
undefined iosGetASinfExact(RecompContext* ctx);
undefined iosGetATanfExact(RecompContext* ctx);
undefined iosGetATan2fExact(RecompContext* ctx);
undefined iosGetATan2fExact2(RecompContext* ctx);
undefined iosGetASin(RecompContext* ctx);
undefined iosGetATan2(RecompContext* ctx);
undefined resetArcFuncCall(RecompContext* ctx);
undefined iosGetTableSin(RecompContext* ctx);
undefined iosGetTableCos(RecompContext* ctx);
undefined InitTableSinCos(RecompContext* ctx);
undefined iosFTOI15Vector(RecompContext* ctx);
undefined iosFTOI12Vector(RecompContext* ctx);
undefined iosFTOI4Vector(RecompContext* ctx);
undefined iosFTOI0Vector(RecompContext* ctx);
undefined iosITOF15Vector(RecompContext* ctx);
undefined iosITOF12Vector(RecompContext* ctx);
undefined iosITOF4Vector(RecompContext* ctx);
undefined iosITOF0Vector(RecompContext* ctx);
undefined iosGetStabXZVector(RecompContext* ctx);
undefined iosInitRandom(RecompContext* ctx);
undefined iosGetRandom(RecompContext* ctx);
undefined iosGetRandomVector(RecompContext* ctx);
undefined iosGetDRandomVector(RecompContext* ctx);
undefined iosGetRandomVector0(RecompContext* ctx);
undefined iosAbsVector(RecompContext* ctx);
undefined iosGetReflectVector(RecompContext* ctx);
undefined iosDumpFVector(RecompContext* ctx);
undefined iosDumpIVector(RecompContext* ctx);
undefined iosGetArbitraryUpVectorElement(RecompContext* ctx);
undefined iosGetScaleInverseVector(RecompContext* ctx);
undefined iosGetStabXYVector(RecompContext* ctx);
undefined iosGetStabYZVector(RecompContext* ctx);
undefined iosGetLengthPointToLine(RecompContext* ctx);
undefined iosGetInverseVectorXYZ(RecompContext* ctx);
undefined iosGetExceptAxisVector(RecompContext* ctx);
undefined iosCalcFColorToBrightness(RecompContext* ctx);
undefined iosITOF15VectorXYZ(RecompContext* ctx);
undefined iosScaleColorTo255(RecompContext* ctx);
undefined iosScaleColorToONE(RecompContext* ctx);
undefined Undefined_Gap_0x12280_0x12590(RecompContext* ctx);
undefined iosCreateDC(RecompContext* ctx);
undefined iosReleaseDC(RecompContext* ctx);
undefined iosSetDCParam(RecompContext* ctx);
undefined iosSetDCClearParam(RecompContext* ctx);
undefined iosSetDCViewPort(RecompContext* ctx);
undefined iosSetDCViewPortCenter(RecompContext* ctx);
undefined iosSetDC(RecompContext* ctx);
undefined iosPushDC(RecompContext* ctx);
undefined iosPopDC(RecompContext* ctx);
undefined iosGetRootDC(RecompContext* ctx);
undefined iosSetRootDC(RecompContext* ctx);
undefined iosGetCurrentDC(RecompContext* ctx);
undefined iosSetCurrentDC(RecompContext* ctx);
undefined iosResetDC(RecompContext* ctx);
undefined iosInitDC(RecompContext* ctx);
undefined iosGetDCGroup(RecompContext* ctx);
undefined Undefined_Gap_0x12A94_0x12AA8(RecompContext* ctx);
undefined iosSetDCWithClear(RecompContext* ctx);
undefined _iosPushDC(RecompContext* ctx);
undefined iosPushDCWithClear(RecompContext* ctx);
undefined Undefined_Gap_0x12BF4_0x12F28(RecompContext* ctx);
undefined iosDlPopLayer(RecompContext* ctx);
undefined Undefined_Gap_0x13018_0x13140(RecompContext* ctx);
undefined iosUsedPacketBufferSize(RecompContext* ctx);
undefined iosCreateIVArbitrationSema(RecompContext* ctx);
undefined iosDlGetTransAdrs(RecompContext* ctx);
undefined iosGetPacketPtrPath1(RecompContext* ctx);
undefined iosSetPacketPtrPath1(RecompContext* ctx);
undefined iosAllocPacketPtrPath1(RecompContext* ctx);
undefined iosDlChainHead(RecompContext* ctx);
undefined iosDlChainTail(RecompContext* ctx);
undefined iosDlChainHeadCurrent(RecompContext* ctx);
undefined iosDlChainTailCurrent(RecompContext* ctx);
undefined iosDlSwap(RecompContext* ctx);
undefined iosDlTrans(RecompContext* ctx);
undefined iosDlLockObj(RecompContext* ctx);
undefined iosDlGetWorkBufId(RecompContext* ctx);
undefined iosDlGetTransBufId(RecompContext* ctx);
undefined iosDlGetEndAdrs(RecompContext* ctx);
undefined iosDlGetLayer(RecompContext* ctx);
undefined iosDlSetLayer(RecompContext* ctx);
undefined iosDlPushLayer(RecompContext* ctx);
undefined iosDlGetLayerNum(RecompContext* ctx);
undefined iosDlRelease(RecompContext* ctx);
undefined InitDL(RecompContext* ctx);
undefined iosDlCheckAdrs(RecompContext* ctx);
undefined iosDlCheckSize(RecompContext* ctx);
undefined iosDlGetCreateAdrs(RecompContext* ctx);
undefined iosAllocPacketPtrPath1UnCachedA(RecompContext* ctx);
undefined iosDlTransNow(RecompContext* ctx);
undefined iosDumpDMAStatus(RecompContext* ctx);
undefined iosDumpVIF1Status(RecompContext* ctx);
undefined iosDumpGIFStatus(RecompContext* ctx);
undefined iosSyncPath(RecompContext* ctx);
undefined Undefined_Gap_0x1490C_0x14C60(RecompContext* ctx);
undefined iosGsSetMode(RecompContext* ctx);
undefined iosSetRootContext(RecompContext* ctx);
undefined iosGsResizeRootDC(RecompContext* ctx);
undefined iosGsSetDrawContext(RecompContext* ctx);
undefined iosCopyFrameBuffer(RecompContext* ctx);
undefined iosSetScreenEnv(RecompContext* ctx);
undefined getDispScreenWidth(RecompContext* ctx);
undefined getDispScreenHeight(RecompContext* ctx);
undefined getDrawScreenWidth(RecompContext* ctx);
undefined getDrawScreenHeight(RecompContext* ctx);
undefined getFrameBufferSize(RecompContext* ctx);
undefined getFrameBufferSizeFBP(RecompContext* ctx);
undefined getFrameBufferSizeTBP(RecompContext* ctx);
undefined getDispBufferAddressTBP(RecompContext* ctx);
undefined getDispBufferAddressFBP(RecompContext* ctx);
undefined getDrawBufferAddressTBP(RecompContext* ctx);
undefined getDrawBufferAddressFBP(RecompContext* ctx);
undefined getZBufferAddressTBP(RecompContext* ctx);
undefined getZBufferAddressFBP(RecompContext* ctx);
undefined getTextureAreaAddressTBP(RecompContext* ctx);
undefined getTextureAreaAddressFBP(RecompContext* ctx);
undefined getScreenOffsetX(RecompContext* ctx);
undefined getScreenOffsetY(RecompContext* ctx);
undefined getAntiAlias(RecompContext* ctx);
undefined getProgressiveMode(RecompContext* ctx);
undefined iosResetGraph(RecompContext* ctx);
undefined iosDmaSendPath1(RecompContext* ctx);
undefined iosDmaSendPath2(RecompContext* ctx);
undefined iosDmaSendPath3(RecompContext* ctx);
undefined iosDmaSendSChainPath1(RecompContext* ctx);
undefined iosDmaSendSChainPath2(RecompContext* ctx);
undefined iosDmaSendSChainPath3(RecompContext* ctx);
undefined iosResetPath(RecompContext* ctx);
undefined iosSyncV(RecompContext* ctx);
undefined iosGetField(RecompContext* ctx);
undefined iosGsChangeMode(RecompContext* ctx);
undefined iosSetBGColor(RecompContext* ctx);
undefined iosGsResetCRTC(RecompContext* ctx);
undefined iosSetSyncNoReturnFunc(RecompContext* ctx);
undefined iosCheckDrawFinish(RecompContext* ctx);
undefined iosGsInitDC(RecompContext* ctx);
undefined InitGp(RecompContext* ctx);
undefined iosWaitDMA(RecompContext* ctx);
undefined iosWaitVU1(RecompContext* ctx);
undefined getCRTCoffsetU(RecompContext* ctx);
undefined getCRTCoffsetV(RecompContext* ctx);
undefined ClearVRAM(RecompContext* ctx);
undefined iosGsChangeScreenOffset(RecompContext* ctx);
undefined Undefined_Gap_0x16344_0x16738(RecompContext* ctx);
undefined set_nowloadingflag(RecompContext* ctx);
undefined iosSyncGP(RecompContext* ctx);
undefined bootGPThread(RecompContext* ctx);
undefined iosTransGP(RecompContext* ctx);
undefined iosChkGpDlTransExec(RecompContext* ctx);
undefined iosGPFrameInit(RecompContext* ctx);
undefined iosSetIStartFunc(RecompContext* ctx);
undefined iosSetGpFinishFunc(RecompContext* ctx);
undefined iosSetIFinishFunc(RecompContext* ctx);
undefined getIntrGpCount(RecompContext* ctx);
undefined iosSetDlTransFunc(RecompContext* ctx);
undefined iosSetVSchedulerFunc(RecompContext* ctx);
undefined iosWaitGPFinish(RecompContext* ctx);
undefined Undefined_Gap_0x16E54_0x16EE0(RecompContext* ctx);
undefined iStart(RecompContext* ctx);
undefined iFinish(RecompContext* ctx);
undefined Undefined_Gap_0x16F40_0x17050(RecompContext* ctx);
undefined gsRegBegin(RecompContext* ctx);
undefined gsRegEnd(RecompContext* ctx);
undefined gsRegEndWithPtr(RecompContext* ctx);
undefined gsReglistBegin(RecompContext* ctx);
undefined gsReglistEnd(RecompContext* ctx);
undefined gsBox(RecompContext* ctx);
undefined gsBox2(RecompContext* ctx);
undefined gsBoxLine(RecompContext* ctx);
undefined spriteNoTexFast(RecompContext* ctx);
undefined spriteTexFast(RecompContext* ctx);
undefined gsReg(RecompContext* ctx);
undefined getSpriteDrawFirst(RecompContext* ctx);
undefined gsReglist(RecompContext* ctx);
undefined iosTransTex(RecompContext* ctx);
undefined getTWH(RecompContext* ctx);
undefined isysDeleteObjManager(RecompContext* ctx);
undefined Undefined_Gap_0x197E8_0x19BB8(RecompContext* ctx);
undefined isysAddGroupWithLinkParam(RecompContext* ctx);
undefined isysAddGroupRelativeWithLinkParam(RecompContext* ctx);
undefined _isysDeleteGroup(RecompContext* ctx);
undefined isysDeleteGroupWithLinkParam(RecompContext* ctx);
undefined isysDeleteGroupAllObj(RecompContext* ctx);
undefined isysDeleteAllGroup(RecompContext* ctx);
undefined isysGroupForFirst(RecompContext* ctx);
undefined isysGroupForFirstForce(RecompContext* ctx);
undefined isysGroupGetObjNumForce(RecompContext* ctx);
undefined _isysCreateObj(RecompContext* ctx);
undefined isysSetObjImmediateDeleteFunc(RecompContext* ctx);
undefined isysRequestDeleteObj(RecompContext* ctx);
undefined isysInitGroup(RecompContext* ctx);
undefined isysAddGroupWithLinkParamNoWait(RecompContext* ctx);
undefined isysObjDeleteLock(RecompContext* ctx);
undefined isysObjDeleteUnLock(RecompContext* ctx);
undefined isysGroupForNext(RecompContext* ctx);
undefined isysGroupForNextForce(RecompContext* ctx);
undefined isysGroupForExit(RecompContext* ctx);
undefined isysInitObjSystem(RecompContext* ctx);
undefined isysGetLinkNum(RecompContext* ctx);
undefined isysGetLinkMax(RecompContext* ctx);
undefined isysGetObjIdentifierByObj(RecompContext* ctx);
undefined isysGetGroupSrhNext(RecompContext* ctx);
undefined isysObjWaitSema(RecompContext* ctx);
undefined isysObjSignalSema(RecompContext* ctx);
undefined Undefined_Gap_0x1B144_0x1B400(RecompContext* ctx);
undefined getVIntrCnt(RecompContext* ctx);
undefined setVIntrBaseTime(RecompContext* ctx);
undefined getVIntrDiffTime(RecompContext* ctx);
undefined addVIntrTime(RecompContext* ctx);
undefined waitVscheduler(RecompContext* ctx);
undefined bootSchedulerThread(RecompContext* ctx);
undefined iosAddISchedulerTaskList(RecompContext* ctx);
undefined iosGetISchedulerExecCnt(RecompContext* ctx);
undefined ischedStop(RecompContext* ctx);
undefined ischedRestart(RecompContext* ctx);
undefined iosSetISchedulerSubthreadTask(RecompContext* ctx);
undefined iosSetIVSyncMode(RecompContext* ctx);
undefined iosGetIVSyncMode(RecompContext* ctx);
undefined vschedSetNextFrameForceGarbage(RecompContext* ctx);
undefined GetGarbageTime(RecompContext* ctx);
undefined Undefined_Gap_0x1B6DC_0x1B8C0(RecompContext* ctx);
undefined isysInitISYSLetterObj(RecompContext* ctx);
undefined isysFlushISYSLetterObj(RecompContext* ctx);
undefined isysGetLetterObj(RecompContext* ctx);
undefined isysLetterObjDiscardLetterAll(RecompContext* ctx);
undefined create_letter(RecompContext* ctx);
undefined init_letter(RecompContext* ctx);
undefined is_hope_letter_type(RecompContext* ctx);
undefined get_letter_contents_data(RecompContext* ctx);
undefined Undefined_Gap_0x1BB58_0x1BB68(RecompContext* ctx);
undefined increment_letter_refcount(RecompContext* ctx);
undefined decrement_letter_refcount(RecompContext* ctx);
undefined is_letter_reach_time(RecompContext* ctx);
undefined is_init_letter_called(RecompContext* ctx);
undefined get_reference_letter_type(RecompContext* ctx);
undefined get_letter_receiver_obj_group(RecompContext* ctx);
undefined get_letter_receiver_data(RecompContext* ctx);
undefined doit_letter_manager(RecompContext* ctx);
undefined init_letter_manager(RecompContext* ctx);
undefined send_letter(RecompContext* ctx);
undefined Undefined_Gap_0x1BDF4_0x1BE70(RecompContext* ctx);
undefined create_letter_post(RecompContext* ctx);
undefined check_free_letter_post(RecompContext* ctx);
undefined discard_all_letter_in_post(RecompContext* ctx);
undefined get_total_letter_in_post(RecompContext* ctx);
undefined open_letter_post(RecompContext* ctx);
undefined get_next_letter_in_post(RecompContext* ctx);
undefined close_letter_post(RecompContext* ctx);
undefined Undefined_Gap_0x1BFAC_0x1BFC8(RecompContext* ctx);
undefined push_back_letter_in_post(RecompContext* ctx);
undefined discard_selecting_letter_in_post(RecompContext* ctx);
undefined constructor_letter_type(RecompContext* ctx);
undefined entry_new_letter_type(RecompContext* ctx);
undefined init_letter_type_store(RecompContext* ctx);
undefined get_letter_type(RecompContext* ctx);
undefined Undefined_Gap_0x1C200_0x1C3F0(RecompContext* ctx);
undefined iosConvertStringSJIStoEUC(RecompContext* ctx);
undefined iosConvertStringEUCtoSJIS(RecompContext* ctx);
undefined iosConvertStringEUCtoID(RecompContext* ctx);
undefined iosGetDataSizeOfFont(RecompContext* ctx);
undefined iosGetFontDataWithID(RecompContext* ctx);
undefined iosGetFontDataWithJIS(RecompContext* ctx);
undefined iosGetFontDataWithSJIS(RecompContext* ctx);
undefined iosGetFontDataWithEUC(RecompContext* ctx);
undefined iosGetFontIDWithJIS(RecompContext* ctx);
undefined iosGetFontIDWithSJIS(RecompContext* ctx);
undefined iosGetFontIDWithEUC(RecompContext* ctx);
undefined iosEntryLocaleFontNoLoad(RecompContext* ctx);
undefined iosGetFontInfo(RecompContext* ctx);
undefined iosGet2ByteCharCode(RecompContext* ctx);
undefined _isysCreateSubMsgQueue(RecompContext* ctx);
undefined _isysRecvSubMsg(RecompContext* ctx);
undefined _isysSendSubMsg(RecompContext* ctx);
undefined InitSubThread(RecompContext* ctx);
undefined isysInitSubThreadExecEnv(RecompContext* ctx);
undefined isysStartSubThread(RecompContext* ctx);
undefined isysDeleteSubThread(RecompContext* ctx);
undefined isysDumpSubThreadStatus(RecompContext* ctx);
undefined isysWakeupSubThread(RecompContext* ctx);
undefined isysSleepSubThread(RecompContext* ctx);
undefined Undefined_Gap_0x1D4B4_0x1D658(RecompContext* ctx);
undefined SubThreadTerminateRestorePoint(RecompContext* ctx);
undefined Undefined_Gap_0x1D658_0x1D818(RecompContext* ctx);
undefined isysGetThisSubThread(RecompContext* ctx);
undefined isysInitSubThreadObj(RecompContext* ctx);
undefined isysCreateSubThreadS(RecompContext* ctx);
undefined isysSleepSubThreadM(RecompContext* ctx);
undefined isysJumpSubThread(RecompContext* ctx);
undefined isysGetSubThreadWorkSize(RecompContext* ctx);
undefined isysGetSubThreadStackUse(RecompContext* ctx);
undefined isysGetSubThreadStackSize(RecompContext* ctx);
undefined isysDumpSubThreadPC(RecompContext* ctx);
undefined isysDebugSetSubThreadSleepProtection(RecompContext* ctx);
undefined Undefined_Gap_0x1DC1C_0x1DE68(RecompContext* ctx);
undefined sndSepTickProc(RecompContext* ctx);
undefined sndSepReq(RecompContext* ctx);
undefined sndSepPlayerSrh(RecompContext* ctx);
undefined sndSepPlayerSrh2(RecompContext* ctx);
undefined sndSepStopReq(RecompContext* ctx);
undefined sndSepSetVol(RecompContext* ctx);
undefined sndSepSetPan(RecompContext* ctx);
undefined sndSepSetDefaultParam(RecompContext* ctx);
undefined sndSepPauseAll(RecompContext* ctx);
undefined sndSepPause(RecompContext* ctx);
undefined sndSepCont(RecompContext* ctx);
undefined sndSepStopTypeAll(RecompContext* ctx);
undefined sndSepInitTickParam(RecompContext* ctx);
undefined sndSepInit(RecompContext* ctx);
undefined sndVabCreate(RecompContext* ctx);
undefined sndVabDelete(RecompContext* ctx);
undefined sndVabHDOpen(RecompContext* ctx);
undefined sndVabHDClose(RecompContext* ctx);
undefined sndBDOpen(RecompContext* ctx);
undefined sndBDClose(RecompContext* ctx);
undefined sndVabInit(RecompContext* ctx);
undefined initSound(RecompContext* ctx);
undefined tickProcSound(RecompContext* ctx);
undefined addAdpcmTickProcFunc(RecompContext* ctx);
undefined setPcmTickProcFunc(RecompContext* ctx);
undefined soundGetTickProcCnt(RecompContext* ctx);
undefined soundSetRevMode(RecompContext* ctx);
undefined soundGetRevMode(RecompContext* ctx);
undefined getSlotInfo(RecompContext* ctx);
undefined setSoundMode(RecompContext* ctx);
undefined getSoundMode(RecompContext* ctx);
undefined iosAllocIopHeap(RecompContext* ctx);
undefined iosFreeIopHeap(RecompContext* ctx);
undefined iosLoadIopModule(RecompContext* ctx);
undefined iosGetIopTotalFreeMemSize(RecompContext* ctx);
undefined iosGetIopTotalMemSize(RecompContext* ctx);
undefined iosWaitIopSema(RecompContext* ctx);
undefined iosSignalIopSema(RecompContext* ctx);
undefined InitIopDev(RecompContext* ctx);
undefined Undefined_Gap_0x1ED34_0x1EF50(RecompContext* ctx);
undefined iosKeybdInit(RecompContext* ctx);
undefined iosKeybdSetCallBackFunc(RecompContext* ctx);
undefined Undefined_Gap_0x1EFAC_0x1EFD0(RecompContext* ctx);
undefined iosKeybdGetInfo(RecompContext* ctx);
undefined Undefined_Gap_0x1F034_0x1F2B0(RecompContext* ctx);
undefined iosMouseInit(RecompContext* ctx);
undefined iosMouseSetCallBackFunc(RecompContext* ctx);
undefined Undefined_Gap_0x1F2FC_0x1F320(RecompContext* ctx);
undefined GetStrHashWorkBuffer(RecompContext* ctx);
undefined InitStrHash(RecompContext* ctx);
undefined AddStrHashKey(RecompContext* ctx);
undefined MakeStrHashValue(RecompContext* ctx);
undefined SearchStrHashKey(RecompContext* ctx);
undefined ReleaseStrHashKeyAll(RecompContext* ctx);
undefined DeleteStrHashKey(RecompContext* ctx);
undefined Sg2ChipSetDigitalOutputMode(RecompContext* ctx);
undefined Sg2ChipInit(RecompContext* ctx);
undefined Sg2ChipInitHot(RecompContext* ctx);
undefined Undefined_Gap_0x1F68C_0x1F698(RecompContext* ctx);
undefined Sg2CtrlEntryTickProc(RecompContext* ctx);
undefined Sg2CtrlEntryTickProcById(RecompContext* ctx);
undefined Sg2CtrlRemoveTickProc(RecompContext* ctx);
undefined Sg2CtrlTickProc(RecompContext* ctx);
undefined Sg2CtrlSetTickMode(RecompContext* ctx);
undefined Sg2CtrlGetTickMode(RecompContext* ctx);
undefined Sg2CtrlSetTickTime(RecompContext* ctx);
undefined Sg2CtrlGetTickTime(RecompContext* ctx);
undefined Sg2CtrlInit(RecompContext* ctx);
undefined Sg2DmaTransVoice(RecompContext* ctx);
undefined Sg2DmaTransStatus(RecompContext* ctx);
undefined Sg2DmaInit(RecompContext* ctx);
undefined Sg2DspEffectSetEndAdr(RecompContext* ctx);
undefined Sg2DspEffectSetType(RecompContext* ctx);
undefined Sg2DspEffectSetDepth(RecompContext* ctx);
undefined Sg2DspEffectSetDepth2(RecompContext* ctx);
undefined Sg2DspEffectSetDelay(RecompContext* ctx);
undefined Sg2DspEffectSetFeedBack(RecompContext* ctx);
undefined Sg2DspEffectChange(RecompContext* ctx);
undefined Sg2DspEffectSetSwitch(RecompContext* ctx);
undefined Sg2DspSetMasterVolume(RecompContext* ctx);
undefined Sg2DspSetMasterVolumeMax(RecompContext* ctx);
undefined Sg2DspGetMasterVolume(RecompContext* ctx);
undefined Sg2DspInit(RecompContext* ctx);
undefined Sg2ExStAdpcmInit(RecompContext* ctx);
undefined Sg2ExStAdpcmStopMode(RecompContext* ctx);
undefined Sg2ExStAdpcmQuit(RecompContext* ctx);
undefined Sg2ExStAdpcmSlotMalloc(RecompContext* ctx);
undefined Sg2ExStAdpcmSlotReserv(RecompContext* ctx);
undefined Sg2ExStAdpcmSlotFree(RecompContext* ctx);
undefined Sg2ExStAdpcmWorkClear(RecompContext* ctx);
undefined Undefined_Gap_0x200B4_0x20350(RecompContext* ctx);
undefined Sg2ExStAdpcmOpenFake(RecompContext* ctx);
undefined Sg2ExStAdpcmOpen(RecompContext* ctx);
undefined Sg2ExStAdpcmSetFd(RecompContext* ctx);
undefined Sg2ExStAdpcmGetFd(RecompContext* ctx);
undefined Sg2ExStAdpcmSetLsn(RecompContext* ctx);
undefined Sg2ExStAdpcmGetLsn(RecompContext* ctx);
undefined Sg2ExStAdpcmGetTargetLsn(RecompContext* ctx);
undefined Sg2ExStAdpcmSetUserParam(RecompContext* ctx);
undefined Sg2ExStAdpcmGetUserParam(RecompContext* ctx);
undefined Undefined_Gap_0x20598_0x206A0(RecompContext* ctx);
undefined Sg2ExStAdpcmVolumePercent(RecompContext* ctx);
undefined Sg2ExStAdpcmTrkVolumeDirect(RecompContext* ctx);
undefined Sg2ExStAdpcmTrkVolumePercent(RecompContext* ctx);
undefined Sg2ExStAdpcmTrkDspSw(RecompContext* ctx);
undefined ____VolReflection(RecompContext* ctx);
undefined ____VolPerBackup(RecompContext* ctx);
undefined Sg2ExStAdpcmPitchPercent(RecompContext* ctx);
undefined Sg2ExStAdpcmPlay(RecompContext* ctx);
undefined Sg2ExStAdpcmPause(RecompContext* ctx);
undefined Sg2ExStAdpcmCont(RecompContext* ctx);
undefined Sg2ExStAdpcmStop(RecompContext* ctx);
undefined Sg2ExStAdpcmIopReadAdr(RecompContext* ctx);
undefined Sg2ExStAdpcmSetOutputMode(RecompContext* ctx);
undefined Sg2ExStAdpcmLoopSecNum(RecompContext* ctx);
undefined Sg2ExStAdpcmGetBuffer(RecompContext* ctx);
undefined Sg2ExStAdpcmSetSignal(RecompContext* ctx);
undefined Undefined_Gap_0x20DAC_0x21288(RecompContext* ctx);
undefined Sg2ExStAdpcmPreLoad(RecompContext* ctx);
undefined Sg2ExStAdpcmClose(RecompContext* ctx);
undefined Sg2ExStAdpcmTickProc(RecompContext* ctx);
undefined Undefined_Gap_0x2144C_0x216D0(RecompContext* ctx);
undefined all_keyoff(RecompContext* ctx);
undefined all_soundoff(RecompContext* ctx);
undefined all_soundpause(RecompContext* ctx);
undefined all_soundmute(RecompContext* ctx);
undefined Sg2ModMidiout1(RecompContext* ctx);
undefined Sg2ModMidiout1Exclusive(RecompContext* ctx);
undefined Sg2ModMidiout(RecompContext* ctx);
undefined Sg2ModTickProc(RecompContext* ctx);
undefined Sg2ModOpenBgm(RecompContext* ctx);
undefined Sg2ModOpenSe(RecompContext* ctx);
undefined Sg2ModCheckSndOn(RecompContext* ctx);
undefined Sg2ModClose(RecompContext* ctx);
undefined Sg2ModSetParam(RecompContext* ctx);
undefined Sg2ModGetParam(RecompContext* ctx);
undefined Sg2ModSetOutputMode(RecompContext* ctx);
undefined Sg2ModInit(RecompContext* ctx);
undefined debug_mod_config(RecompContext* ctx);
undefined Undefined_Gap_0x23190_0x25678(RecompContext* ctx);
undefined Sg2RemoteSend(RecompContext* ctx);
undefined Sg2RemoteSendDmaCom(RecompContext* ctx);
undefined Sg2RemoteDmaTransStatus(RecompContext* ctx);
undefined Sg2RemoteGetAdpStmAdr(RecompContext* ctx);
undefined Sg2RemoteGetPcmStmTransOffset(RecompContext* ctx);
undefined Sg2RemoteGetSlotReleaseLv(RecompContext* ctx);
undefined Sg2RemoteGetDspChangeStatus(RecompContext* ctx);
undefined Sg2RemoteSyncStatus(RecompContext* ctx);
undefined Sg2RemoteTickProc(RecompContext* ctx);
undefined Sg2RemoteInit(RecompContext* ctx);
undefined Undefined_Gap_0x25B18_0x25C20(RecompContext* ctx);
undefined Sg2SepPlay(RecompContext* ctx);
undefined Sg2SepPlaySelectCore(RecompContext* ctx);
undefined Sg2SepStop(RecompContext* ctx);
undefined Sg2SepStopSndOff(RecompContext* ctx);
undefined Sg2SepPause(RecompContext* ctx);
undefined Sg2SepCont(RecompContext* ctx);
undefined Sg2SepVabStopSndOff(RecompContext* ctx);
undefined Sg2SepAllStopSndOff(RecompContext* ctx);
undefined Sg2SepStatus(RecompContext* ctx);
undefined Sg2SepCheckSndOn(RecompContext* ctx);
undefined Sg2SepSetParam(RecompContext* ctx);
undefined Sg2SepMidiOut(RecompContext* ctx);
undefined Sg2SepMasterVol(RecompContext* ctx);
undefined Sg2SepTickProc(RecompContext* ctx);
undefined Sg2SepInit(RecompContext* ctx);
undefined debug_sep_config(RecompContext* ctx);
undefined Undefined_Gap_0x26A8C_0x27170(RecompContext* ctx);
undefined Sg2SlotGetSlotClassIdx(RecompContext* ctx);
undefined Sg2SlotFreeSearch(RecompContext* ctx);
undefined Sg2SlotFreeSearchTerm(RecompContext* ctx);
undefined Sg2SlotSearchPriority(RecompContext* ctx);
undefined Sg2SlotSearchPriorityOlder(RecompContext* ctx);
undefined Sg2SlotSearchParam(RecompContext* ctx);
undefined Sg2SlotSearchParamOlder0(RecompContext* ctx);
undefined Sg2SlotSearchParamOlder1(RecompContext* ctx);
undefined Sg2SlotSearchTypeOlder(RecompContext* ctx);
undefined Sg2SlotBlock(RecompContext* ctx);
undefined Sg2SlotFree(RecompContext* ctx);
undefined Sg2SlotCheckSlotClass(RecompContext* ctx);
undefined Sg2SlotFindLoop(RecompContext* ctx);
undefined Sg2SlotFindVab(RecompContext* ctx);
undefined Sg2SlotFindVabCh(RecompContext* ctx);
undefined Sg2SlotFindVabChNote(RecompContext* ctx);
undefined Sg2SlotFindVabChSsaBaseNote(RecompContext* ctx);
undefined Sg2SlotFindSlotClass(RecompContext* ctx);
undefined Sg2SlotFindSlotClassCh(RecompContext* ctx);
undefined Sg2SlotFindSlotClassChNote(RecompContext* ctx);
undefined Sg2SlotFindSlotClassChSsaBaseNote(RecompContext* ctx);
undefined Sg2SlotSetBasicParam(RecompContext* ctx);
undefined Sg2SlotSetSsa(RecompContext* ctx);
undefined Sg2SlotSetGroup(RecompContext* ctx);
undefined Sg2SlotSetMute(RecompContext* ctx);
undefined Sg2SlotSetMasVol(RecompContext* ctx);
undefined Sg2SlotSetSeMasVol(RecompContext* ctx);
undefined Sg2SlotSetBaseVol(RecompContext* ctx);
undefined Sg2SlotSetVol(RecompContext* ctx);
undefined Sg2SlotSetMasPan(RecompContext* ctx);
undefined Sg2SlotSetBasePan(RecompContext* ctx);
undefined Sg2SlotSetPan(RecompContext* ctx);
undefined Sg2SlotSetBendRange(RecompContext* ctx);
undefined Sg2SlotSetBendValue(RecompContext* ctx);
undefined Sg2SlotSetPitch(RecompContext* ctx);
undefined Sg2SlotSetPause(RecompContext* ctx);
undefined Sg2SlotSetDirectPitch(RecompContext* ctx);
undefined Sg2SlotSetMasTune(RecompContext* ctx);
undefined Sg2SlotSetAdsr(RecompContext* ctx);
undefined Sg2SlotSetVolPhase(RecompContext* ctx);
undefined Sg2SlotSetLoop(RecompContext* ctx);
undefined Sg2SlotSetDumperOn(RecompContext* ctx);
undefined Sg2SlotSetLfoPitchTbl(RecompContext* ctx);
undefined Sg2SlotSetLfoPitchSpeed(RecompContext* ctx);
undefined Sg2SlotSetLfoPitchDepth(RecompContext* ctx);
undefined Sg2SlotSetLfoVolTbl(RecompContext* ctx);
undefined Sg2SlotSetLfoVolSpeed(RecompContext* ctx);
undefined Sg2SlotSetLfoVolDepth(RecompContext* ctx);
undefined Sg2SlotSetTimeVolParam(RecompContext* ctx);
undefined Sg2SlotSetTimePitchParam(RecompContext* ctx);
undefined Sg2SlotSetTimePanParam(RecompContext* ctx);
undefined Sg2SlotSetPoltamentParam(RecompContext* ctx);
undefined Sg2SlotGetVol(RecompContext* ctx);
undefined Sg2SlotGetPan(RecompContext* ctx);
undefined Sg2SlotSetDumperOff(RecompContext* ctx);
undefined Sg2SlotModKeyOff(RecompContext* ctx);
undefined Sg2SlotVabKeyOff(RecompContext* ctx);
undefined Sg2SlotVabKeyOffGroup(RecompContext* ctx);
undefined Sg2SlotSetKeyOnBit(RecompContext* ctx);
undefined Sg2SlotSetKeyOffBit(RecompContext* ctx);
undefined Sg2SlotSetReverbOnBit(RecompContext* ctx);
undefined Sg2SlotSetReverbOffBit(RecompContext* ctx);
undefined Sg2SlotSetNoiseOnBit(RecompContext* ctx);
undefined Sg2SlotSetNoiseOffBit(RecompContext* ctx);
undefined Sg2SlotSetOutputMode(RecompContext* ctx);
undefined Sg2SlotSetVolShiftDownParam(RecompContext* ctx);
undefined Sg2SlotGetVolShiftDownParam(RecompContext* ctx);
undefined Sg2SlotTickProc(RecompContext* ctx);
undefined Sg2SlotInit(RecompContext* ctx);
undefined Sg2SlotTbl(RecompContext* ctx);
undefined Sg2SlotEnvTbl(RecompContext* ctx);
undefined Undefined_Gap_0x2B7F8_0x2B8D0(RecompContext* ctx);
undefined Sg2SmfpOpen(RecompContext* ctx);
undefined Sg2SmfpOpenSelCore(RecompContext* ctx);
undefined Sg2SmfpClose(RecompContext* ctx);
undefined Sg2SmfpVabStopSndOff(RecompContext* ctx);
undefined Sg2SmfpPlay(RecompContext* ctx);
undefined Sg2SmfpStop(RecompContext* ctx);
undefined Sg2SmfpStopSndOff(RecompContext* ctx);
undefined Sg2SmfpPause(RecompContext* ctx);
undefined Sg2SmfpCont(RecompContext* ctx);
undefined Sg2SmfpStatus(RecompContext* ctx);
undefined Sg2SmfpCheckSndOn(RecompContext* ctx);
undefined Sg2SmfpSetParam(RecompContext* ctx);
undefined Sg2SmfpGetParam(RecompContext* ctx);
undefined Sg2SmfpMidiOut(RecompContext* ctx);
undefined Sg2SmfpSetSignal(RecompContext* ctx);
undefined Sg2SmfpTickProc(RecompContext* ctx);
undefined Sg2SmfpInit(RecompContext* ctx);
undefined debug_smfp_mod_config(RecompContext* ctx);
undefined debug_set_smfp_time_count_delta_per(RecompContext* ctx);
undefined Undefined_Gap_0x2CC30_0x2D280(RecompContext* ctx);
undefined Sg2StAdpcmOpen(RecompContext* ctx);
undefined Sg2StAdpcmClose(RecompContext* ctx);
undefined Sg2StAdpcmSetVolume(RecompContext* ctx);
undefined Sg2StAdpcmSetPitch(RecompContext* ctx);
undefined Sg2StAdpcmPlay(RecompContext* ctx);
undefined Sg2StAdpcmStop(RecompContext* ctx);
undefined Sg2StAdpcmIopReadAdr(RecompContext* ctx);
undefined Sg2StAdpcmInit(RecompContext* ctx);
undefined Sg2StAdpcmQuit(RecompContext* ctx);
undefined get_vabid(RecompContext* ctx);
undefined Undefined_Gap_0x2D570_0x2D708(RecompContext* ctx);
undefined vab_check_alive(RecompContext* ctx);
undefined vab_get_info(RecompContext* ctx);
undefined vab_get_seseq(RecompContext* ctx);
undefined vab_get_seprogchunk(RecompContext* ctx);
undefined vab_get_progchunk(RecompContext* ctx);
undefined vab_get_splitchunk(RecompContext* ctx);
undefined vab_get_veltbl(RecompContext* ctx);
undefined vab_get_lfotbl_param(RecompContext* ctx);
undefined vab_set_semastervol(RecompContext* ctx);
undefined vab_get_semastervol(RecompContext* ctx);
undefined Sg2VabHdOpen(RecompContext* ctx);
undefined Sg2VabGetBdSize(RecompContext* ctx);
undefined Sg2VabBdOpen(RecompContext* ctx);
undefined Sg2VabClose(RecompContext* ctx);
undefined Sg2VabHdClose(RecompContext* ctx);
undefined Sg2VabInit(RecompContext* ctx);
undefined Undefined_Gap_0x2DD58_0x2EE80(RecompContext* ctx);
undefined Sg2ExPcmInputOpenDoubleBuffer(RecompContext* ctx);
undefined Sg2ExPcmInputOpen(RecompContext* ctx);
undefined Sg2ExPcmInputClose(RecompContext* ctx);
undefined Sg2ExPcmInputCtrl(RecompContext* ctx);
undefined Sg2ExPcmInputGetLipFrame(RecompContext* ctx);
undefined Sg2ExPcmInputGetRealPlayFrameCount(RecompContext* ctx);
undefined Undefined_Gap_0x2F0A0_0x2F128(RecompContext* ctx);
undefined Sg2ExPcmInputSetVol(RecompContext* ctx);
undefined Sg2ExPcmInputSetPan(RecompContext* ctx);
undefined Sg2ExPcmInputSetPhase(RecompContext* ctx);
undefined Sg2ExPcmInputSetOutputMode(RecompContext* ctx);
undefined Sg2ExPcmInputAutoFilterInit(RecompContext* ctx);
undefined Sg2ExPcmInputSetAutoFilterDirect(RecompContext* ctx);
undefined Sg2ExPcmInputSetAutoFilter(RecompContext* ctx);
undefined Sg2ExPcmInputAutoFilterCtrl(RecompContext* ctx);
undefined Sg2ExPcmOutputOpen(RecompContext* ctx);
undefined Sg2ExPcmOutputClose(RecompContext* ctx);
undefined Sg2ExPcmOutputBufferClear(RecompContext* ctx);
undefined Sg2ExPcmOutputSetVol(RecompContext* ctx);
undefined Sg2ExPcmOutputSetEffect(RecompContext* ctx);
undefined Sg2ExPcmOutputSetOutputMode(RecompContext* ctx);
undefined Sg2ExPcmOutputCtrl(RecompContext* ctx);
undefined Sg2ExPcmOutputGetLipFrame(RecompContext* ctx);
undefined Sg2ExPcmOutputAutoFilterInit(RecompContext* ctx);
undefined Sg2ExPcmOutputSetAutoFilterDirect(RecompContext* ctx);
undefined Sg2ExPcmOutputSetAutoFilter(RecompContext* ctx);
undefined Sg2ExPcmOutputAutoFilterCtrl(RecompContext* ctx);
undefined Sg2ExPcmCheckAutoFilterSeq(RecompContext* ctx);
undefined Sg2ExPcmTickProc(RecompContext* ctx);
undefined Sg2ExPcmSetSignal(RecompContext* ctx);
undefined Sg2ExPcmInit(RecompContext* ctx);
undefined Undefined_Gap_0x2F9D8_0x30090(RecompContext* ctx);
undefined IirInit(RecompContext* ctx);
undefined IirParam(RecompContext* ctx);
undefined IirFilter(RecompContext* ctx);
undefined Sg2StPcmStart(RecompContext* ctx);
undefined Sg2StPcmStop(RecompContext* ctx);
undefined Sg2StPcmSetVolume(RecompContext* ctx);
undefined Sg2StPcmSetEffect(RecompContext* ctx);
undefined Sg2StPcmIopTransOffset(RecompContext* ctx);
undefined Sg2StPcmInit(RecompContext* ctx);
undefined Sg2StPcmQuit(RecompContext* ctx);
undefined Undefined_Gap_0x30424_0x307F8(RecompContext* ctx);
undefined div(RecompContext* ctx);
undefined atanf(RecompContext* ctx);
undefined cosf(RecompContext* ctx);
undefined fabsf(RecompContext* ctx);
undefined sinf(RecompContext* ctx);
undefined sqrt(RecompContext* ctx);
undefined acosf(RecompContext* ctx);
undefined asinf(RecompContext* ctx);
undefined atan2f(RecompContext* ctx);
undefined fmodf(RecompContext* ctx);
undefined powf(RecompContext* ctx);
undefined sqrtf(RecompContext* ctx);
undefined __ieee754_sqrt(RecompContext* ctx);
undefined __ieee754_acosf(RecompContext* ctx);
undefined __ieee754_asinf(RecompContext* ctx);
undefined __ieee754_atan2f(RecompContext* ctx);
undefined __ieee754_fmodf(RecompContext* ctx);
undefined __ieee754_powf(RecompContext* ctx);
undefined __ieee754_rem_pio2f(RecompContext* ctx);
undefined __ieee754_sqrtf(RecompContext* ctx);
undefined __kernel_cosf(RecompContext* ctx);
undefined __kernel_rem_pio2f(RecompContext* ctx);
undefined __kernel_sinf(RecompContext* ctx);
undefined floorf(RecompContext* ctx);
undefined scalbnf(RecompContext* ctx);
undefined copysignf(RecompContext* ctx);
undefined sceGsSetDefLoadImage(RecompContext* ctx);
undefined sceGsExecLoadImage(RecompContext* ctx);
undefined sceGsPutIMR(RecompContext* ctx);
undefined sceGsGetIMR(RecompContext* ctx);
undefined isceGsPutIMR(RecompContext* ctx);
undefined sceCdRead(RecompContext* ctx);
undefined sceCdReadIOPm(RecompContext* ctx);
undefined sceCdGetError(RecompContext* ctx);
undefined sceCdStatus(RecompContext* ctx);
undefined sceCdReadClock(RecompContext* ctx);
#endif
